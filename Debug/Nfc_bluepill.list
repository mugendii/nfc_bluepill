
Nfc_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004f90  08004f90  00005f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080050fc  080050fc  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080050fc  080050fc  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000060fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005100  08005100  00006100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005104  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  20000060  08005164  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001324  08005164  00007324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fade  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c3  00000000  00000000  00016b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00019230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c69  00000000  00000000  0001a220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fa2  00000000  00000000  0001ae89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012558  00000000  00000000  00033e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee3b  00000000  00000000  00046383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d51be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004750  00000000  00000000  000d5204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000d9954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f78 	.word	0x08004f78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004f78 	.word	0x08004f78

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000007c 	.word	0x2000007c
 800017c:	200000d0 	.word	0x200000d0

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09a      	sub	sp, #104	@ 0x68
 8000184:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */

	  char lcd_buffer[32];
	  uint8_t card_data[16];
	  uint8_t write_data[16] = "Hello NFC World!";
 8000186:	4b69      	ldr	r3, [pc, #420]	@ (800032c <main+0x1ac>)
 8000188:	f107 0420 	add.w	r4, r7, #32
 800018c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800018e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000192:	f000 ff81 	bl	8001098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000196:	f000 f8e9 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019a:	f000 fa15 	bl	80005c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800019e:	f000 f921 	bl	80003e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80001a2:	f000 f94d 	bl	8000440 <MX_I2C2_Init>
  MX_SPI1_Init();
 80001a6:	f000 f979 	bl	800049c <MX_SPI1_Init>
  MX_SPI2_Init();
 80001aa:	f000 f9ad 	bl	8000508 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80001ae:	f000 f9e1 	bl	8000574 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    // Initialize LCD
    HAL_Delay(100);
 80001b2:	2064      	movs	r0, #100	@ 0x64
 80001b4:	f000 ffd2 	bl	800115c <HAL_Delay>
    LCD_Init();
 80001b8:	f000 fc84 	bl	8000ac4 <LCD_Init>
    LCD_Clear();
 80001bc:	f000 fcb4 	bl	8000b28 <LCD_Clear>
    LCD_Print("NFC Reader Ready");
 80001c0:	485b      	ldr	r0, [pc, #364]	@ (8000330 <main+0x1b0>)
 80001c2:	f000 fcd9 	bl	8000b78 <LCD_Print>

    // Initialize NFC module
    if (PN532_Init() == HAL_OK) {
 80001c6:	f000 fa6d 	bl	80006a4 <PN532_Init>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d123      	bne.n	8000218 <main+0x98>
      LCD_SetCursor(1, 0);
 80001d0:	2100      	movs	r1, #0
 80001d2:	2001      	movs	r0, #1
 80001d4:	f000 fcb2 	bl	8000b3c <LCD_SetCursor>
      LCD_Print("PN532 OK!");
 80001d8:	4856      	ldr	r0, [pc, #344]	@ (8000334 <main+0x1b4>)
 80001da:	f000 fccd 	bl	8000b78 <LCD_Print>
      HAL_Delay(1000);
 80001de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e2:	f000 ffbb 	bl	800115c <HAL_Delay>
      LCD_SetCursor(1, 0);
      LCD_Print("PN532 Error!");
      while(1);
    }

    LCD_Clear();
 80001e6:	f000 fc9f 	bl	8000b28 <LCD_Clear>
    LCD_Print("Place NFC card...");
 80001ea:	4853      	ldr	r0, [pc, #332]	@ (8000338 <main+0x1b8>)
 80001ec:	f000 fcc4 	bl	8000b78 <LCD_Print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001f0:	4b52      	ldr	r3, [pc, #328]	@ (800033c <main+0x1bc>)
 80001f2:	1d3c      	adds	r4, r7, #4
 80001f4:	461d      	mov	r5, r3
 80001f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 f810 	bl	800322c <osThreadCreate>
 800020c:	4603      	mov	r3, r0
 800020e:	4a4c      	ldr	r2, [pc, #304]	@ (8000340 <main+0x1c0>)
 8000210:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000212:	f003 f804 	bl	800321e <osKernelStart>
 8000216:	e008      	b.n	800022a <main+0xaa>
      LCD_SetCursor(1, 0);
 8000218:	2100      	movs	r1, #0
 800021a:	2001      	movs	r0, #1
 800021c:	f000 fc8e 	bl	8000b3c <LCD_SetCursor>
      LCD_Print("PN532 Error!");
 8000220:	4848      	ldr	r0, [pc, #288]	@ (8000344 <main+0x1c4>)
 8000222:	f000 fca9 	bl	8000b78 <LCD_Print>
      while(1);
 8000226:	bf00      	nop
 8000228:	e7fd      	b.n	8000226 <main+0xa6>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Turn on the LED (active low, so set PC13 to RESSET) */
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000230:	4845      	ldr	r0, [pc, #276]	@ (8000348 <main+0x1c8>)
 8000232:	f001 fa1f 	bl	8001674 <HAL_GPIO_WritePin>




	      // Try to read NFC card
	      if (PN532_ReadPassiveTarget(nfc_uid, &nfc_uid_length) == HAL_OK) {
 8000236:	4945      	ldr	r1, [pc, #276]	@ (800034c <main+0x1cc>)
 8000238:	4845      	ldr	r0, [pc, #276]	@ (8000350 <main+0x1d0>)
 800023a:	f000 fac9 	bl	80007d0 <PN532_ReadPassiveTarget>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d16e      	bne.n	8000322 <main+0x1a2>
	        // Card detected
	        LCD_Clear();
 8000244:	f000 fc70 	bl	8000b28 <LCD_Clear>
	        LCD_Print("Card Found!");
 8000248:	4842      	ldr	r0, [pc, #264]	@ (8000354 <main+0x1d4>)
 800024a:	f000 fc95 	bl	8000b78 <LCD_Print>

	        // Display UID
	        LCD_SetCursor(1, 0);
 800024e:	2100      	movs	r1, #0
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fc73 	bl	8000b3c <LCD_SetCursor>
	        sprintf(lcd_buffer, "UID: %02X%02X%02X%02X",
	                nfc_uid[0], nfc_uid[1], nfc_uid[2], nfc_uid[3]);
 8000256:	4b3e      	ldr	r3, [pc, #248]	@ (8000350 <main+0x1d0>)
 8000258:	781b      	ldrb	r3, [r3, #0]
	        sprintf(lcd_buffer, "UID: %02X%02X%02X%02X",
 800025a:	4619      	mov	r1, r3
	                nfc_uid[0], nfc_uid[1], nfc_uid[2], nfc_uid[3]);
 800025c:	4b3c      	ldr	r3, [pc, #240]	@ (8000350 <main+0x1d0>)
 800025e:	785b      	ldrb	r3, [r3, #1]
	        sprintf(lcd_buffer, "UID: %02X%02X%02X%02X",
 8000260:	461c      	mov	r4, r3
	                nfc_uid[0], nfc_uid[1], nfc_uid[2], nfc_uid[3]);
 8000262:	4b3b      	ldr	r3, [pc, #236]	@ (8000350 <main+0x1d0>)
 8000264:	789b      	ldrb	r3, [r3, #2]
	        sprintf(lcd_buffer, "UID: %02X%02X%02X%02X",
 8000266:	461a      	mov	r2, r3
	                nfc_uid[0], nfc_uid[1], nfc_uid[2], nfc_uid[3]);
 8000268:	4b39      	ldr	r3, [pc, #228]	@ (8000350 <main+0x1d0>)
 800026a:	78db      	ldrb	r3, [r3, #3]
	        sprintf(lcd_buffer, "UID: %02X%02X%02X%02X",
 800026c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	9200      	str	r2, [sp, #0]
 8000274:	4623      	mov	r3, r4
 8000276:	460a      	mov	r2, r1
 8000278:	4937      	ldr	r1, [pc, #220]	@ (8000358 <main+0x1d8>)
 800027a:	f004 f9cd 	bl	8004618 <siprintf>
	        LCD_Print(lcd_buffer);
 800027e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fc78 	bl	8000b78 <LCD_Print>

	        HAL_Delay(2000);
 8000288:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800028c:	f000 ff66 	bl	800115c <HAL_Delay>

	        // Try to read block 4 (first user data block in MIFARE Classic)
	        if (PN532_ReadBlock(4, card_data) == HAL_OK) {
 8000290:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000294:	4619      	mov	r1, r3
 8000296:	2004      	movs	r0, #4
 8000298:	f000 faee 	bl	8000878 <PN532_ReadBlock>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d131      	bne.n	8000306 <main+0x186>
	          LCD_Clear();
 80002a2:	f000 fc41 	bl	8000b28 <LCD_Clear>
	          LCD_Print("Read Success:");
 80002a6:	482d      	ldr	r0, [pc, #180]	@ (800035c <main+0x1dc>)
 80002a8:	f000 fc66 	bl	8000b78 <LCD_Print>
	          LCD_SetCursor(1, 0);
 80002ac:	2100      	movs	r1, #0
 80002ae:	2001      	movs	r0, #1
 80002b0:	f000 fc44 	bl	8000b3c <LCD_SetCursor>
	          // Display first 16 characters
	          card_data[15] = '\0';  // Ensure null termination
 80002b4:	2300      	movs	r3, #0
 80002b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	          LCD_Print((char*)card_data);
 80002ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fc5a 	bl	8000b78 <LCD_Print>
	          HAL_Delay(3000);
 80002c4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80002c8:	f000 ff48 	bl	800115c <HAL_Delay>

	          // Write new data to the card
	          if (PN532_WriteBlock(4, write_data) == HAL_OK) {
 80002cc:	f107 0320 	add.w	r3, r7, #32
 80002d0:	4619      	mov	r1, r3
 80002d2:	2004      	movs	r0, #4
 80002d4:	f000 fb42 	bl	800095c <PN532_WriteBlock>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d109      	bne.n	80002f2 <main+0x172>
	            LCD_Clear();
 80002de:	f000 fc23 	bl	8000b28 <LCD_Clear>
	            LCD_Print("Write Success!");
 80002e2:	481f      	ldr	r0, [pc, #124]	@ (8000360 <main+0x1e0>)
 80002e4:	f000 fc48 	bl	8000b78 <LCD_Print>
	            HAL_Delay(2000);
 80002e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002ec:	f000 ff36 	bl	800115c <HAL_Delay>
 80002f0:	e012      	b.n	8000318 <main+0x198>
	          } else {
	            LCD_Clear();
 80002f2:	f000 fc19 	bl	8000b28 <LCD_Clear>
	            LCD_Print("Write Failed!");
 80002f6:	481b      	ldr	r0, [pc, #108]	@ (8000364 <main+0x1e4>)
 80002f8:	f000 fc3e 	bl	8000b78 <LCD_Print>
	            HAL_Delay(2000);
 80002fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000300:	f000 ff2c 	bl	800115c <HAL_Delay>
 8000304:	e008      	b.n	8000318 <main+0x198>
	          }
	        } else {
	          LCD_Clear();
 8000306:	f000 fc0f 	bl	8000b28 <LCD_Clear>
	          LCD_Print("Read Failed!");
 800030a:	4817      	ldr	r0, [pc, #92]	@ (8000368 <main+0x1e8>)
 800030c:	f000 fc34 	bl	8000b78 <LCD_Print>
	          HAL_Delay(2000);
 8000310:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000314:	f000 ff22 	bl	800115c <HAL_Delay>
	        }

	        LCD_Clear();
 8000318:	f000 fc06 	bl	8000b28 <LCD_Clear>
	        LCD_Print("Place NFC card...");
 800031c:	4806      	ldr	r0, [pc, #24]	@ (8000338 <main+0x1b8>)
 800031e:	f000 fc2b 	bl	8000b78 <LCD_Print>
	      }

	      HAL_Delay(500);  // Check for cards every 500ms
 8000322:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000326:	f000 ff19 	bl	800115c <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800032a:	e77e      	b.n	800022a <main+0xaa>
 800032c:	08005038 	.word	0x08005038
 8000330:	08004f90 	.word	0x08004f90
 8000334:	08004fa4 	.word	0x08004fa4
 8000338:	08004fc0 	.word	0x08004fc0
 800033c:	08005054 	.word	0x08005054
 8000340:	20000470 	.word	0x20000470
 8000344:	08004fb0 	.word	0x08004fb0
 8000348:	40011000 	.word	0x40011000
 800034c:	2000047e 	.word	0x2000047e
 8000350:	20000474 	.word	0x20000474
 8000354:	08004fd4 	.word	0x08004fd4
 8000358:	08004fe0 	.word	0x08004fe0
 800035c:	08004ff8 	.word	0x08004ff8
 8000360:	08005008 	.word	0x08005008
 8000364:	08005018 	.word	0x08005018
 8000368:	08005028 	.word	0x08005028

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b090      	sub	sp, #64	@ 0x40
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0318 	add.w	r3, r7, #24
 8000376:	2228      	movs	r2, #40	@ 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f004 f96e 	bl	800465c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
 800038c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038e:	2302      	movs	r3, #2
 8000390:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	2301      	movs	r3, #1
 8000394:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000396:	2310      	movs	r3, #16
 8000398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800039a:	2300      	movs	r3, #0
 800039c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 f9b2 	bl	800270c <HAL_RCC_OscConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ae:	f000 fc6d 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b2:	230f      	movs	r3, #15
 80003b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 fc20 	bl	8002c10 <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003d6:	f000 fc59 	bl	8000c8c <Error_Handler>
  }
}
 80003da:	bf00      	nop
 80003dc:	3740      	adds	r7, #64	@ 0x40
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e8:	4b12      	ldr	r3, [pc, #72]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003ea:	4a13      	ldr	r2, [pc, #76]	@ (8000438 <MX_I2C1_Init+0x54>)
 80003ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003ee:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003f0:	4a12      	ldr	r2, [pc, #72]	@ (800043c <MX_I2C1_Init+0x58>)
 80003f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_I2C1_Init+0x50>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000400:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000402:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000408:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <MX_I2C1_Init+0x50>)
 800040a:	2200      	movs	r2, #0
 800040c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800040e:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000414:	4b07      	ldr	r3, [pc, #28]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041a:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <MX_I2C1_Init+0x50>)
 800041c:	2200      	movs	r2, #0
 800041e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000420:	4804      	ldr	r0, [pc, #16]	@ (8000434 <MX_I2C1_Init+0x50>)
 8000422:	f001 f93f 	bl	80016a4 <HAL_I2C_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800042c:	f000 fc2e 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}
 8000434:	200002d0 	.word	0x200002d0
 8000438:	40005400 	.word	0x40005400
 800043c:	000186a0 	.word	0x000186a0

08000440 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <MX_I2C2_Init+0x50>)
 8000446:	4a13      	ldr	r2, [pc, #76]	@ (8000494 <MX_I2C2_Init+0x54>)
 8000448:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800044a:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <MX_I2C2_Init+0x50>)
 800044c:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <MX_I2C2_Init+0x58>)
 800044e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000450:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <MX_I2C2_Init+0x50>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <MX_I2C2_Init+0x50>)
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800045c:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <MX_I2C2_Init+0x50>)
 800045e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000462:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000464:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <MX_I2C2_Init+0x50>)
 8000466:	2200      	movs	r2, #0
 8000468:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800046a:	4b09      	ldr	r3, [pc, #36]	@ (8000490 <MX_I2C2_Init+0x50>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000470:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <MX_I2C2_Init+0x50>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000476:	4b06      	ldr	r3, [pc, #24]	@ (8000490 <MX_I2C2_Init+0x50>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800047c:	4804      	ldr	r0, [pc, #16]	@ (8000490 <MX_I2C2_Init+0x50>)
 800047e:	f001 f911 	bl	80016a4 <HAL_I2C_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000488:	f000 fc00 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000324 	.word	0x20000324
 8000494:	40005800 	.word	0x40005800
 8000498:	000186a0 	.word	0x000186a0

0800049c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80004a0:	4b17      	ldr	r3, [pc, #92]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004a2:	4a18      	ldr	r2, [pc, #96]	@ (8000504 <MX_SPI1_Init+0x68>)
 80004a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004a6:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80004ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004ae:	4b14      	ldr	r3, [pc, #80]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004b4:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004ba:	4b11      	ldr	r3, [pc, #68]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004d8:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004de:	4b08      	ldr	r3, [pc, #32]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004e6:	220a      	movs	r2, #10
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	@ (8000500 <MX_SPI1_Init+0x64>)
 80004ec:	f002 fd1e 	bl	8002f2c <HAL_SPI_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80004f6:	f000 fbc9 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000378 	.word	0x20000378
 8000504:	40013000 	.word	0x40013000

08000508 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800050c:	4b17      	ldr	r3, [pc, #92]	@ (800056c <MX_SPI2_Init+0x64>)
 800050e:	4a18      	ldr	r2, [pc, #96]	@ (8000570 <MX_SPI2_Init+0x68>)
 8000510:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000512:	4b16      	ldr	r3, [pc, #88]	@ (800056c <MX_SPI2_Init+0x64>)
 8000514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000518:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800051a:	4b14      	ldr	r3, [pc, #80]	@ (800056c <MX_SPI2_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <MX_SPI2_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000526:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_SPI2_Init+0x64>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800052c:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <MX_SPI2_Init+0x64>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_SPI2_Init+0x64>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000538:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <MX_SPI2_Init+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_SPI2_Init+0x64>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <MX_SPI2_Init+0x64>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_SPI2_Init+0x64>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <MX_SPI2_Init+0x64>)
 8000552:	220a      	movs	r2, #10
 8000554:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000556:	4805      	ldr	r0, [pc, #20]	@ (800056c <MX_SPI2_Init+0x64>)
 8000558:	f002 fce8 	bl	8002f2c <HAL_SPI_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8000562:	f000 fb93 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200003d0 	.word	0x200003d0
 8000570:	40003800 	.word	0x40003800

08000574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000578:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 800057a:	4a12      	ldr	r2, [pc, #72]	@ (80005c4 <MX_USART1_UART_Init+0x50>)
 800057c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800057e:	4b10      	ldr	r3, [pc, #64]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005aa:	4805      	ldr	r0, [pc, #20]	@ (80005c0 <MX_USART1_UART_Init+0x4c>)
 80005ac:	f002 fd42 	bl	8003034 <HAL_UART_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005b6:	f000 fb69 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000428 	.word	0x20000428
 80005c4:	40013800 	.word	0x40013800

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000698 <MX_GPIO_Init+0xd0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000698 <MX_GPIO_Init+0xd0>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <MX_GPIO_Init+0xd0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f4:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xd0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a27      	ldr	r2, [pc, #156]	@ (8000698 <MX_GPIO_Init+0xd0>)
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_GPIO_Init+0xd0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xd0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <MX_GPIO_Init+0xd0>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_GPIO_Init+0xd0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_GPIO_Init+0xd0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a1b      	ldr	r2, [pc, #108]	@ (8000698 <MX_GPIO_Init+0xd0>)
 800062a:	f043 0308 	orr.w	r3, r3, #8
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_GPIO_Init+0xd0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0308 	and.w	r3, r3, #8
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000642:	4816      	ldr	r0, [pc, #88]	@ (800069c <MX_GPIO_Init+0xd4>)
 8000644:	f001 f816 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800064e:	4814      	ldr	r0, [pc, #80]	@ (80006a0 <MX_GPIO_Init+0xd8>)
 8000650:	f001 f810 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000654:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2302      	movs	r3, #2
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	@ (800069c <MX_GPIO_Init+0xd4>)
 800066e:	f000 fe7d 	bl	800136c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000672:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_GPIO_Init+0xd8>)
 800068c:	f000 fe6e 	bl	800136c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	40011000 	.word	0x40011000
 80006a0:	40010800 	.word	0x40010800

080006a4 <PN532_Init>:

/* USER CODE BEGIN 4 */

// ===== NFC Functions =====

HAL_StatusTypeDef PN532_Init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  uint32_t version;

  // Get firmware version to test communication
  if (PN532_GetFirmwareVersion(&version) != HAL_OK) {
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f811 	bl	80006d4 <PN532_GetFirmwareVersion>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <PN532_Init+0x18>
    return HAL_ERROR;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e007      	b.n	80006cc <PN532_Init+0x28>
  }

  // Configure SAM (Security Access Module)
  if (PN532_SAMConfig() != HAL_OK) {
 80006bc:	f000 f856 	bl	800076c <PN532_SAMConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <PN532_Init+0x26>
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e000      	b.n	80006cc <PN532_Init+0x28>
  }

  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <PN532_GetFirmwareVersion>:

HAL_StatusTypeDef PN532_GetFirmwareVersion(uint32_t *version) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b090      	sub	sp, #64	@ 0x40
 80006d8:	af02      	add	r7, sp, #8
 80006da:	6078      	str	r0, [r7, #4]
  uint8_t cmd[] = {0x00, 0x00, 0xFF, 0x02, 0xFE, 0xD4, 0x02, 0x2A, 0x00};
 80006dc:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <PN532_GetFirmwareVersion+0x90>)
 80006de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e4:	c303      	stmia	r3!, {r0, r1}
 80006e6:	701a      	strb	r2, [r3, #0]
  uint8_t response[32];
  uint8_t response_len = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	72fb      	strb	r3, [r7, #11]

  if (HAL_I2C_Master_Transmit(&hi2c1, PN532_I2C_ADDRESS, cmd, sizeof(cmd), 1000) != HAL_OK) {
 80006ec:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80006f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f4:	9300      	str	r3, [sp, #0]
 80006f6:	2309      	movs	r3, #9
 80006f8:	2148      	movs	r1, #72	@ 0x48
 80006fa:	481b      	ldr	r0, [pc, #108]	@ (8000768 <PN532_GetFirmwareVersion+0x94>)
 80006fc:	f001 f916 	bl	800192c <HAL_I2C_Master_Transmit>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <PN532_GetFirmwareVersion+0x36>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	e028      	b.n	800075c <PN532_GetFirmwareVersion+0x88>
  }

  HAL_Delay(50);
 800070a:	2032      	movs	r0, #50	@ 0x32
 800070c:	f000 fd26 	bl	800115c <HAL_Delay>

  if (PN532_ReadResponse(response, &response_len) != HAL_OK) {
 8000710:	f107 020b 	add.w	r2, r7, #11
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f9a2 	bl	8000a64 <PN532_ReadResponse>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <PN532_GetFirmwareVersion+0x56>
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e018      	b.n	800075c <PN532_GetFirmwareVersion+0x88>
  }

  if (response_len >= 12 && response[7] == 0xD5 && response[8] == 0x03) {
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b0b      	cmp	r3, #11
 800072e:	d914      	bls.n	800075a <PN532_GetFirmwareVersion+0x86>
 8000730:	7cfb      	ldrb	r3, [r7, #19]
 8000732:	2bd5      	cmp	r3, #213	@ 0xd5
 8000734:	d111      	bne.n	800075a <PN532_GetFirmwareVersion+0x86>
 8000736:	7d3b      	ldrb	r3, [r7, #20]
 8000738:	2b03      	cmp	r3, #3
 800073a:	d10e      	bne.n	800075a <PN532_GetFirmwareVersion+0x86>
    *version = (response[9] << 24) | (response[10] << 16) | (response[11] << 8) | response[12];
 800073c:	7d7b      	ldrb	r3, [r7, #21]
 800073e:	061a      	lsls	r2, r3, #24
 8000740:	7dbb      	ldrb	r3, [r7, #22]
 8000742:	041b      	lsls	r3, r3, #16
 8000744:	431a      	orrs	r2, r3
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	4313      	orrs	r3, r2
 800074c:	7e3a      	ldrb	r2, [r7, #24]
 800074e:	4313      	orrs	r3, r2
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
    return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <PN532_GetFirmwareVersion+0x88>
  }

  return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3738      	adds	r7, #56	@ 0x38
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	08005070 	.word	0x08005070
 8000768:	200002d0 	.word	0x200002d0

0800076c <PN532_SAMConfig>:

HAL_StatusTypeDef PN532_SAMConfig(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	@ 0x38
 8000770:	af02      	add	r7, sp, #8
  uint8_t cmd[] = {0x00, 0x00, 0xFF, 0x05, 0xFB, 0xD4, 0x14, 0x01, 0x14, 0x01, 0x02, 0x00};
 8000772:	4a15      	ldr	r2, [pc, #84]	@ (80007c8 <PN532_SAMConfig+0x5c>)
 8000774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000778:	ca07      	ldmia	r2, {r0, r1, r2}
 800077a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t response[32];
  uint8_t response_len = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	70fb      	strb	r3, [r7, #3]

  if (HAL_I2C_Master_Transmit(&hi2c1, PN532_I2C_ADDRESS, cmd, sizeof(cmd), 1000) != HAL_OK) {
 8000782:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000786:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	230c      	movs	r3, #12
 800078e:	2148      	movs	r1, #72	@ 0x48
 8000790:	480e      	ldr	r0, [pc, #56]	@ (80007cc <PN532_SAMConfig+0x60>)
 8000792:	f001 f8cb 	bl	800192c <HAL_I2C_Master_Transmit>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <PN532_SAMConfig+0x34>
    return HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	e00e      	b.n	80007be <PN532_SAMConfig+0x52>
  }

  HAL_Delay(50);
 80007a0:	2032      	movs	r0, #50	@ 0x32
 80007a2:	f000 fcdb 	bl	800115c <HAL_Delay>

  if (PN532_ReadResponse(response, &response_len) != HAL_OK) {
 80007a6:	1cfa      	adds	r2, r7, #3
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f959 	bl	8000a64 <PN532_ReadResponse>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <PN532_SAMConfig+0x50>
    return HAL_ERROR;
 80007b8:	2301      	movs	r3, #1
 80007ba:	e000      	b.n	80007be <PN532_SAMConfig+0x52>
  }

  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3730      	adds	r7, #48	@ 0x30
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	0800507c 	.word	0x0800507c
 80007cc:	200002d0 	.word	0x200002d0

080007d0 <PN532_ReadPassiveTarget>:

HAL_StatusTypeDef PN532_ReadPassiveTarget(uint8_t *uid, uint8_t *uid_len) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b098      	sub	sp, #96	@ 0x60
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint8_t cmd[] = {0x00, 0x00, 0xFF, 0x04, 0xFC, 0xD4, 0x4A, 0x01, 0x00, 0xE1, 0x00};
 80007da:	4a25      	ldr	r2, [pc, #148]	@ (8000870 <PN532_ReadPassiveTarget+0xa0>)
 80007dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e2:	c303      	stmia	r3!, {r0, r1}
 80007e4:	801a      	strh	r2, [r3, #0]
 80007e6:	3302      	adds	r3, #2
 80007e8:	0c12      	lsrs	r2, r2, #16
 80007ea:	701a      	strb	r2, [r3, #0]
  uint8_t response[64];
  uint8_t response_len = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	72fb      	strb	r3, [r7, #11]

  if (HAL_I2C_Master_Transmit(&hi2c1, PN532_I2C_ADDRESS, cmd, sizeof(cmd), 1000) != HAL_OK) {
 80007f0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80007f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	230b      	movs	r3, #11
 80007fc:	2148      	movs	r1, #72	@ 0x48
 80007fe:	481d      	ldr	r0, [pc, #116]	@ (8000874 <PN532_ReadPassiveTarget+0xa4>)
 8000800:	f001 f894 	bl	800192c <HAL_I2C_Master_Transmit>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <PN532_ReadPassiveTarget+0x3e>
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e02b      	b.n	8000866 <PN532_ReadPassiveTarget+0x96>
  }

  HAL_Delay(100);
 800080e:	2064      	movs	r0, #100	@ 0x64
 8000810:	f000 fca4 	bl	800115c <HAL_Delay>

  if (PN532_ReadResponse(response, &response_len) != HAL_OK) {
 8000814:	f107 020b 	add.w	r2, r7, #11
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f920 	bl	8000a64 <PN532_ReadResponse>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <PN532_ReadPassiveTarget+0x5e>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
 800082c:	e01b      	b.n	8000866 <PN532_ReadPassiveTarget+0x96>
  }

  if (response_len >= 19 && response[7] == 0xD5 && response[8] == 0x4B && response[9] == 0x01) {
 800082e:	7afb      	ldrb	r3, [r7, #11]
 8000830:	2b12      	cmp	r3, #18
 8000832:	d917      	bls.n	8000864 <PN532_ReadPassiveTarget+0x94>
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	2bd5      	cmp	r3, #213	@ 0xd5
 8000838:	d114      	bne.n	8000864 <PN532_ReadPassiveTarget+0x94>
 800083a:	7d3b      	ldrb	r3, [r7, #20]
 800083c:	2b4b      	cmp	r3, #75	@ 0x4b
 800083e:	d111      	bne.n	8000864 <PN532_ReadPassiveTarget+0x94>
 8000840:	7d7b      	ldrb	r3, [r7, #21]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d10e      	bne.n	8000864 <PN532_ReadPassiveTarget+0x94>
    *uid_len = response[12];
 8000846:	7e3a      	ldrb	r2, [r7, #24]
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	701a      	strb	r2, [r3, #0]
    memcpy(uid, &response[13], *uid_len);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	330d      	adds	r3, #13
 8000858:	4619      	mov	r1, r3
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f003 ff32 	bl	80046c4 <memcpy>
    return HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	e000      	b.n	8000866 <PN532_ReadPassiveTarget+0x96>
  }

  return HAL_ERROR;
 8000864:	2301      	movs	r3, #1
}
 8000866:	4618      	mov	r0, r3
 8000868:	3758      	adds	r7, #88	@ 0x58
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	08005088 	.word	0x08005088
 8000874:	200002d0 	.word	0x200002d0

08000878 <PN532_ReadBlock>:

HAL_StatusTypeDef PN532_ReadBlock(uint8_t block, uint8_t *data) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b098      	sub	sp, #96	@ 0x60
 800087c:	af02      	add	r7, sp, #8
 800087e:	4603      	mov	r3, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = {0x00, 0x00, 0xFF, 0x05, 0xFB, 0xD4, 0x40, 0x01, 0x30, block, 0x00};
 8000884:	2300      	movs	r3, #0
 8000886:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 800088a:	2300      	movs	r3, #0
 800088c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 8000890:	23ff      	movs	r3, #255	@ 0xff
 8000892:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000896:	2305      	movs	r3, #5
 8000898:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800089c:	23fb      	movs	r3, #251	@ 0xfb
 800089e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 80008a2:	23d4      	movs	r3, #212	@ 0xd4
 80008a4:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 80008a8:	2340      	movs	r3, #64	@ 0x40
 80008aa:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80008ae:	2301      	movs	r3, #1
 80008b0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80008b4:	2330      	movs	r3, #48	@ 0x30
 80008b6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80008c0:	2300      	movs	r3, #0
 80008c2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  uint8_t response[64];
  uint8_t response_len = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	72fb      	strb	r3, [r7, #11]

  // Calculate checksum
  uint8_t checksum = 0xD4 + 0x40 + 0x01 + 0x30 + block;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	3345      	adds	r3, #69	@ 0x45
 80008ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  cmd[9] = block;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  cmd[10] = (~checksum + 1) & 0xFF;
 80008d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80008dc:	425b      	negs	r3, r3
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

  if (HAL_I2C_Master_Transmit(&hi2c1, PN532_I2C_ADDRESS, cmd, sizeof(cmd), 1000) != HAL_OK) {
 80008e4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80008e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	230b      	movs	r3, #11
 80008f0:	2148      	movs	r1, #72	@ 0x48
 80008f2:	4819      	ldr	r0, [pc, #100]	@ (8000958 <PN532_ReadBlock+0xe0>)
 80008f4:	f001 f81a 	bl	800192c <HAL_I2C_Master_Transmit>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <PN532_ReadBlock+0x8a>
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e026      	b.n	8000950 <PN532_ReadBlock+0xd8>
  }

  HAL_Delay(100);
 8000902:	2064      	movs	r0, #100	@ 0x64
 8000904:	f000 fc2a 	bl	800115c <HAL_Delay>

  if (PN532_ReadResponse(response, &response_len) != HAL_OK) {
 8000908:	f107 020b 	add.w	r2, r7, #11
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f8a6 	bl	8000a64 <PN532_ReadResponse>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <PN532_ReadBlock+0xaa>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e016      	b.n	8000950 <PN532_ReadBlock+0xd8>
  }

  if (response_len >= 26 && response[7] == 0xD5 && response[8] == 0x41 && response[9] == 0x00) {
 8000922:	7afb      	ldrb	r3, [r7, #11]
 8000924:	2b19      	cmp	r3, #25
 8000926:	d912      	bls.n	800094e <PN532_ReadBlock+0xd6>
 8000928:	7cfb      	ldrb	r3, [r7, #19]
 800092a:	2bd5      	cmp	r3, #213	@ 0xd5
 800092c:	d10f      	bne.n	800094e <PN532_ReadBlock+0xd6>
 800092e:	7d3b      	ldrb	r3, [r7, #20]
 8000930:	2b41      	cmp	r3, #65	@ 0x41
 8000932:	d10c      	bne.n	800094e <PN532_ReadBlock+0xd6>
 8000934:	7d7b      	ldrb	r3, [r7, #21]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d109      	bne.n	800094e <PN532_ReadBlock+0xd6>
    memcpy(data, &response[10], 16);
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	330a      	adds	r3, #10
 8000940:	2210      	movs	r2, #16
 8000942:	4619      	mov	r1, r3
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f003 febd 	bl	80046c4 <memcpy>
    return HAL_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	e000      	b.n	8000950 <PN532_ReadBlock+0xd8>
  }

  return HAL_ERROR;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3758      	adds	r7, #88	@ 0x58
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200002d0 	.word	0x200002d0

0800095c <PN532_WriteBlock>:

HAL_StatusTypeDef PN532_WriteBlock(uint8_t block, uint8_t *data) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	@ 0x58
 8000960:	af02      	add	r7, sp, #8
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[27] = {0x00, 0x00, 0xFF, 0x15, 0xEB, 0xD4, 0x40, 0x01, 0xA0, block};
 8000968:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	f8c3 2017 	str.w	r2, [r3, #23]
 800097e:	23ff      	movs	r3, #255	@ 0xff
 8000980:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000984:	2315      	movs	r3, #21
 8000986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800098a:	23eb      	movs	r3, #235	@ 0xeb
 800098c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8000990:	23d4      	movs	r3, #212	@ 0xd4
 8000992:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8000996:	2340      	movs	r3, #64	@ 0x40
 8000998:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800099c:	2301      	movs	r3, #1
 800099e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80009a2:	23a0      	movs	r3, #160	@ 0xa0
 80009a4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t response[32];
  uint8_t response_len = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	72fb      	strb	r3, [r7, #11]

  // Copy data to command
  memcpy(&cmd[10], data, 16);
 80009b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009b6:	330a      	adds	r3, #10
 80009b8:	2210      	movs	r2, #16
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f003 fe81 	bl	80046c4 <memcpy>

  // Calculate checksum
  uint8_t checksum = 0xD4 + 0x40 + 0x01 + 0xA0 + block;
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	3b4b      	subs	r3, #75	@ 0x4b
 80009c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for (int i = 0; i < 16; i++) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80009ce:	e00b      	b.n	80009e8 <PN532_WriteBlock+0x8c>
    checksum += data[i];
 80009d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009d2:	683a      	ldr	r2, [r7, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009dc:	4413      	add	r3, r2
 80009de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  for (int i = 0; i < 16; i++) {
 80009e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009e4:	3301      	adds	r3, #1
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80009e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	ddf0      	ble.n	80009d0 <PN532_WriteBlock+0x74>
  }
  cmd[26] = (~checksum + 1) & 0xFF;
 80009ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80009f2:	425b      	negs	r3, r3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (HAL_I2C_Master_Transmit(&hi2c1, PN532_I2C_ADDRESS, cmd, sizeof(cmd), 1000) != HAL_OK) {
 80009fa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80009fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	231b      	movs	r3, #27
 8000a06:	2148      	movs	r1, #72	@ 0x48
 8000a08:	4815      	ldr	r0, [pc, #84]	@ (8000a60 <PN532_WriteBlock+0x104>)
 8000a0a:	f000 ff8f 	bl	800192c <HAL_I2C_Master_Transmit>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <PN532_WriteBlock+0xbc>
    return HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e01e      	b.n	8000a56 <PN532_WriteBlock+0xfa>
  }

  HAL_Delay(100);
 8000a18:	2064      	movs	r0, #100	@ 0x64
 8000a1a:	f000 fb9f 	bl	800115c <HAL_Delay>

  if (PN532_ReadResponse(response, &response_len) != HAL_OK) {
 8000a1e:	f107 020b 	add.w	r2, r7, #11
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f81b 	bl	8000a64 <PN532_ReadResponse>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <PN532_WriteBlock+0xdc>
    return HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e00e      	b.n	8000a56 <PN532_WriteBlock+0xfa>
  }

  if (response_len >= 10 && response[7] == 0xD5 && response[8] == 0x41 && response[9] == 0x00) {
 8000a38:	7afb      	ldrb	r3, [r7, #11]
 8000a3a:	2b09      	cmp	r3, #9
 8000a3c:	d90a      	bls.n	8000a54 <PN532_WriteBlock+0xf8>
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
 8000a40:	2bd5      	cmp	r3, #213	@ 0xd5
 8000a42:	d107      	bne.n	8000a54 <PN532_WriteBlock+0xf8>
 8000a44:	7d3b      	ldrb	r3, [r7, #20]
 8000a46:	2b41      	cmp	r3, #65	@ 0x41
 8000a48:	d104      	bne.n	8000a54 <PN532_WriteBlock+0xf8>
 8000a4a:	7d7b      	ldrb	r3, [r7, #21]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <PN532_WriteBlock+0xf8>
    return HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	e000      	b.n	8000a56 <PN532_WriteBlock+0xfa>
  }

  return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3750      	adds	r7, #80	@ 0x50
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200002d0 	.word	0x200002d0

08000a64 <PN532_ReadResponse>:

HAL_StatusTypeDef PN532_ReadResponse(uint8_t *response, uint8_t *response_len) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af02      	add	r7, sp, #8
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint8_t ready_byte;

  // Check if PN532 is ready
  if (HAL_I2C_Master_Receive(&hi2c1, PN532_I2C_ADDRESS, &ready_byte, 1, 100) != HAL_OK) {
 8000a6e:	f107 020f 	add.w	r2, r7, #15
 8000a72:	2364      	movs	r3, #100	@ 0x64
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	2148      	movs	r1, #72	@ 0x48
 8000a7a:	4811      	ldr	r0, [pc, #68]	@ (8000ac0 <PN532_ReadResponse+0x5c>)
 8000a7c:	f001 f854 	bl	8001b28 <HAL_I2C_Master_Receive>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <PN532_ReadResponse+0x26>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e016      	b.n	8000ab8 <PN532_ReadResponse+0x54>
  }

  if (ready_byte != 0x01) {
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d001      	beq.n	8000a94 <PN532_ReadResponse+0x30>
    return HAL_ERROR;
 8000a90:	2301      	movs	r3, #1
 8000a92:	e011      	b.n	8000ab8 <PN532_ReadResponse+0x54>
  }

  // Read response
  if (HAL_I2C_Master_Receive(&hi2c1, PN532_I2C_ADDRESS, response, 64, 1000) != HAL_OK) {
 8000a94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2340      	movs	r3, #64	@ 0x40
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	2148      	movs	r1, #72	@ 0x48
 8000aa0:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <PN532_ReadResponse+0x5c>)
 8000aa2:	f001 f841 	bl	8001b28 <HAL_I2C_Master_Receive>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <PN532_ReadResponse+0x4c>
    return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e003      	b.n	8000ab8 <PN532_ReadResponse+0x54>
  }

  *response_len = 64;  // Simplified - should parse actual length
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2240      	movs	r2, #64	@ 0x40
 8000ab4:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200002d0 	.word	0x200002d0

08000ac4 <LCD_Init>:

// ===== LCD Functions =====

void LCD_Init(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8000ac8:	2032      	movs	r0, #50	@ 0x32
 8000aca:	f000 fb47 	bl	800115c <HAL_Delay>

  // Initialize in 4-bit mode
  LCD_SendNibble(0x03, 0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f89b 	bl	8000c0c <LCD_SendNibble>
  HAL_Delay(5);
 8000ad6:	2005      	movs	r0, #5
 8000ad8:	f000 fb40 	bl	800115c <HAL_Delay>
  LCD_SendNibble(0x03, 0);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2003      	movs	r0, #3
 8000ae0:	f000 f894 	bl	8000c0c <LCD_SendNibble>
  HAL_Delay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f000 fb39 	bl	800115c <HAL_Delay>
  LCD_SendNibble(0x03, 0);
 8000aea:	2100      	movs	r1, #0
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f88d 	bl	8000c0c <LCD_SendNibble>
  HAL_Delay(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f000 fb32 	bl	800115c <HAL_Delay>
  LCD_SendNibble(0x02, 0);  // Switch to 4-bit mode
 8000af8:	2100      	movs	r1, #0
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 f886 	bl	8000c0c <LCD_SendNibble>
  HAL_Delay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 fb2b 	bl	800115c <HAL_Delay>

  // Function set: 4-bit, 2 lines, 5x8 dots
  LCD_SendCommand(LCD_FUNCTION_SET | 0x08);
 8000b06:	2028      	movs	r0, #40	@ 0x28
 8000b08:	f000 f84b 	bl	8000ba2 <LCD_SendCommand>
  // Display control: display on, cursor off, blink off
  LCD_SendCommand(LCD_DISPLAY_CONTROL | 0x04);
 8000b0c:	200c      	movs	r0, #12
 8000b0e:	f000 f848 	bl	8000ba2 <LCD_SendCommand>
  // Clear display
  LCD_SendCommand(LCD_CLEAR_DISPLAY);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 f845 	bl	8000ba2 <LCD_SendCommand>
  HAL_Delay(2);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f000 fb1f 	bl	800115c <HAL_Delay>
  // Entry mode: increment cursor, no shift
  LCD_SendCommand(LCD_ENTRY_MODE_SET | 0x02);
 8000b1e:	2006      	movs	r0, #6
 8000b20:	f000 f83f 	bl	8000ba2 <LCD_SendCommand>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <LCD_Clear>:

void LCD_Clear(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  LCD_SendCommand(LCD_CLEAR_DISPLAY);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 f838 	bl	8000ba2 <LCD_SendCommand>
  HAL_Delay(2);
 8000b32:	2002      	movs	r0, #2
 8000b34:	f000 fb12 	bl	800115c <HAL_Delay>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	460a      	mov	r2, r1
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	71bb      	strb	r3, [r7, #6]
  uint8_t address = (row == 0) ? 0x00 : 0x40;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <LCD_SetCursor+0x1a>
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <LCD_SetCursor+0x1c>
 8000b56:	2340      	movs	r3, #64	@ 0x40
 8000b58:	73fb      	strb	r3, [r7, #15]
  address += col;
 8000b5a:	7bfa      	ldrb	r2, [r7, #15]
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	4413      	add	r3, r2
 8000b60:	73fb      	strb	r3, [r7, #15]
  LCD_SendCommand(LCD_SET_DDRAM_ADDR | address);
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f819 	bl	8000ba2 <LCD_SendCommand>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <LCD_Print>:

void LCD_Print(char *str) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  while (*str) {
 8000b80:	e006      	b.n	8000b90 <LCD_Print+0x18>
    LCD_SendData(*str++);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	1c5a      	adds	r2, r3, #1
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f823 	bl	8000bd6 <LCD_SendData>
  while (*str) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f4      	bne.n	8000b82 <LCD_Print+0xa>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = (cmd & 0xF0);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f023 030f 	bic.w	r3, r3, #15
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = ((cmd << 4) & 0xF0);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	73bb      	strb	r3, [r7, #14]

  LCD_SendNibble(upper_nibble, 0);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f824 	bl	8000c0c <LCD_SendNibble>
  LCD_SendNibble(lower_nibble, 0);
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 f81f 	bl	8000c0c <LCD_SendNibble>
}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = (data & 0xF0);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f023 030f 	bic.w	r3, r3, #15
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = ((data << 4) & 0xF0);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	73bb      	strb	r3, [r7, #14]

  LCD_SendNibble(upper_nibble, LCD_RS_BIT);
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f80a 	bl	8000c0c <LCD_SendNibble>
  LCD_SendNibble(lower_nibble, LCD_RS_BIT);
 8000bf8:	7bbb      	ldrb	r3, [r7, #14]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f805 	bl	8000c0c <LCD_SendNibble>
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <LCD_SendNibble>:

void LCD_SendNibble(uint8_t nibble, uint8_t rs) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af02      	add	r7, sp, #8
 8000c12:	4603      	mov	r3, r0
 8000c14:	460a      	mov	r2, r1
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble | rs | LCD_BACKLIGHT;
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	79bb      	ldrb	r3, [r7, #6]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	73fb      	strb	r3, [r7, #15]

  // Send with enable high
  data |= LCD_ENABLE_BIT;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, &data, 1, 100);
 8000c36:	f107 020f 	add.w	r2, r7, #15
 8000c3a:	2364      	movs	r3, #100	@ 0x64
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	214e      	movs	r1, #78	@ 0x4e
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <LCD_SendNibble+0x6c>)
 8000c44:	f000 fe72 	bl	800192c <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 fa87 	bl	800115c <HAL_Delay>

  // Send with enable low
  data &= ~LCD_ENABLE_BIT;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	f023 0304 	bic.w	r3, r3, #4
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, &data, 1, 100);
 8000c58:	f107 020f 	add.w	r2, r7, #15
 8000c5c:	2364      	movs	r3, #100	@ 0x64
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	214e      	movs	r1, #78	@ 0x4e
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <LCD_SendNibble+0x6c>)
 8000c66:	f000 fe61 	bl	800192c <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	f000 fa76 	bl	800115c <HAL_Delay>
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000324 	.word	0x20000324

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f002 fb1d 	bl	80032c4 <osDelay>
 8000c8a:	e7fb      	b.n	8000c84 <StartDefaultTask+0x8>

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_MspInit+0x68>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a17      	ldr	r2, [pc, #92]	@ (8000d00 <HAL_MspInit+0x68>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_MspInit+0x68>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <HAL_MspInit+0x68>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a11      	ldr	r2, [pc, #68]	@ (8000d00 <HAL_MspInit+0x68>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <HAL_MspInit+0x68>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	210f      	movs	r1, #15
 8000cd2:	f06f 0001 	mvn.w	r0, #1
 8000cd6:	f000 fb20 	bl	800131a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_MspInit+0x6c>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_MspInit+0x6c>)
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000

08000d08 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a2b      	ldr	r2, [pc, #172]	@ (8000dd0 <HAL_I2C_MspInit+0xc8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d124      	bne.n	8000d72 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a29      	ldr	r2, [pc, #164]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d2e:	f043 0308 	orr.w	r3, r3, #8
 8000d32:	6193      	str	r3, [r2, #24]
 8000d34:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	f003 0308 	and.w	r3, r3, #8
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d40:	23c0      	movs	r3, #192	@ 0xc0
 8000d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d44:	2312      	movs	r3, #18
 8000d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	4619      	mov	r1, r3
 8000d52:	4821      	ldr	r0, [pc, #132]	@ (8000dd8 <HAL_I2C_MspInit+0xd0>)
 8000d54:	f000 fb0a 	bl	800136c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d62:	61d3      	str	r3, [r2, #28]
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d70:	e029      	b.n	8000dc6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a19      	ldr	r2, [pc, #100]	@ (8000ddc <HAL_I2C_MspInit+0xd4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d124      	bne.n	8000dc6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a14      	ldr	r2, [pc, #80]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9a:	2312      	movs	r3, #18
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	4619      	mov	r1, r3
 8000da8:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <HAL_I2C_MspInit+0xd0>)
 8000daa:	f000 fadf 	bl	800136c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000db4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_I2C_MspInit+0xcc>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	@ 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	40005800 	.word	0x40005800

08000de0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a37      	ldr	r2, [pc, #220]	@ (8000ed8 <HAL_SPI_MspInit+0xf8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d130      	bne.n	8000e62 <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e00:	4b36      	ldr	r3, [pc, #216]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a35      	ldr	r2, [pc, #212]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b30      	ldr	r3, [pc, #192]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b2d      	ldr	r3, [pc, #180]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000e30:	2350      	movs	r3, #80	@ 0x50
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4827      	ldr	r0, [pc, #156]	@ (8000ee0 <HAL_SPI_MspInit+0x100>)
 8000e44:	f000 fa92 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000e48:	23a0      	movs	r3, #160	@ 0xa0
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4821      	ldr	r0, [pc, #132]	@ (8000ee0 <HAL_SPI_MspInit+0x100>)
 8000e5c:	f000 fa86 	bl	800136c <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e60:	e036      	b.n	8000ed0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <HAL_SPI_MspInit+0x104>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d131      	bne.n	8000ed0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	4a1a      	ldr	r2, [pc, #104]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e76:	61d3      	str	r3, [r2, #28]
 8000e78:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e7a:	69db      	ldr	r3, [r3, #28]
 8000e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e84:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e8a:	f043 0308 	orr.w	r3, r3, #8
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <HAL_SPI_MspInit+0xfc>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0308 	and.w	r3, r3, #8
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000e9c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <HAL_SPI_MspInit+0x108>)
 8000eb2:	f000 fa5b 	bl	800136c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000eb6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0318 	add.w	r3, r7, #24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <HAL_SPI_MspInit+0x108>)
 8000ecc:	f000 fa4e 	bl	800136c <HAL_GPIO_Init>
}
 8000ed0:	bf00      	nop
 8000ed2:	3728      	adds	r7, #40	@ 0x28
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40013000 	.word	0x40013000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40003800 	.word	0x40003800
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a1c      	ldr	r2, [pc, #112]	@ (8000f78 <HAL_UART_MspInit+0x8c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d131      	bne.n	8000f70 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f7c <HAL_UART_MspInit+0x90>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a1a      	ldr	r2, [pc, #104]	@ (8000f7c <HAL_UART_MspInit+0x90>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <HAL_UART_MspInit+0x90>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <HAL_UART_MspInit+0x90>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <HAL_UART_MspInit+0x90>)
 8000f2a:	f043 0304 	orr.w	r3, r3, #4
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_UART_MspInit+0x90>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	f003 0304 	and.w	r3, r3, #4
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <HAL_UART_MspInit+0x94>)
 8000f52:	f000 fa0b 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <HAL_UART_MspInit+0x94>)
 8000f6c:	f000 f9fe 	bl	800136c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40013800 	.word	0x40013800
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010800 	.word	0x40010800

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000fac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f8b2 	bl	8001124 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fc0:	f002 ff0a 	bl	8003dd8 <xTaskGetSchedulerState>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d001      	beq.n	8000fce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fca:	f003 f8f5 	bl	80041b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f003 fb32 	bl	800466c <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20005000 	.word	0x20005000
 8001034:	00000400 	.word	0x00000400
 8001038:	20000480 	.word	0x20000480
 800103c:	20001328 	.word	0x20001328

08001040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800104c:	f7ff fff8 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001050:	480b      	ldr	r0, [pc, #44]	@ (8001080 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001052:	490c      	ldr	r1, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a09      	ldr	r2, [pc, #36]	@ (800108c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001068:	4c09      	ldr	r4, [pc, #36]	@ (8001090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f003 faff 	bl	8004678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800107a:	f7ff f881 	bl	8000180 <main>
  bx lr
 800107e:	4770      	bx	lr
  ldr r0, =_sdata
 8001080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001084:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001088:	08005104 	.word	0x08005104
  ldr r2, =_sbss
 800108c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001090:	20001324 	.word	0x20001324

08001094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001094:	e7fe      	b.n	8001094 <ADC1_2_IRQHandler>
	...

08001098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_Init+0x28>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <HAL_Init+0x28>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f92b 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ae:	200f      	movs	r0, #15
 80010b0:	f000 f808 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fdf0 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f935 	bl	8001352 <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f90b 	bl	800131a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000000 	.word	0x20000000
 800111c:	20000008 	.word	0x20000008
 8001120:	20000004 	.word	0x20000004

08001124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_IncTick+0x1c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_IncTick+0x20>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a03      	ldr	r2, [pc, #12]	@ (8001144 <HAL_IncTick+0x20>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	20000008 	.word	0x20000008
 8001144:	20000484 	.word	0x20000484

08001148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b02      	ldr	r3, [pc, #8]	@ (8001158 <HAL_GetTick+0x10>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000484 	.word	0x20000484

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff fff0 	bl	8001148 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffe0 	bl	8001148 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	6039      	str	r1, [r7, #0]
 8001212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	db0a      	blt.n	8001232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	490c      	ldr	r1, [pc, #48]	@ (8001254 <__NVIC_SetPriority+0x4c>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	0112      	lsls	r2, r2, #4
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	440b      	add	r3, r1
 800122c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001230:	e00a      	b.n	8001248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <__NVIC_SetPriority+0x50>)
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	f003 030f 	and.w	r3, r3, #15
 800123e:	3b04      	subs	r3, #4
 8001240:	0112      	lsls	r2, r2, #4
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	440b      	add	r3, r1
 8001246:	761a      	strb	r2, [r3, #24]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	@ 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f1c3 0307 	rsb	r3, r3, #7
 8001276:	2b04      	cmp	r3, #4
 8001278:	bf28      	it	cs
 800127a:	2304      	movcs	r3, #4
 800127c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3304      	adds	r3, #4
 8001282:	2b06      	cmp	r3, #6
 8001284:	d902      	bls.n	800128c <NVIC_EncodePriority+0x30>
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3b03      	subs	r3, #3
 800128a:	e000      	b.n	800128e <NVIC_EncodePriority+0x32>
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	401a      	ands	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa01 f303 	lsl.w	r3, r1, r3
 80012ae:	43d9      	mvns	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	4313      	orrs	r3, r2
         );
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d0:	d301      	bcc.n	80012d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00f      	b.n	80012f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <SysTick_Config+0x40>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3b01      	subs	r3, #1
 80012dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012de:	210f      	movs	r1, #15
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f7ff ff90 	bl	8001208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <SysTick_Config+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Config+0x40>)
 80012f0:	2207      	movs	r2, #7
 80012f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000e010 	.word	0xe000e010

08001304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff49 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800132c:	f7ff ff5e 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001330:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68b9      	ldr	r1, [r7, #8]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff ff90 	bl	800125c <NVIC_EncodePriority>
 800133c:	4602      	mov	r2, r0
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff5f 	bl	8001208 <__NVIC_SetPriority>
}
 800134a:	bf00      	nop
 800134c:	3718      	adds	r7, #24
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffb0 	bl	80012c0 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
	...

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b480      	push	{r7}
 800136e:	b08b      	sub	sp, #44	@ 0x2c
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e169      	b.n	8001654 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001380:	2201      	movs	r2, #1
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	429a      	cmp	r2, r3
 800139a:	f040 8158 	bne.w	800164e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a9a      	ldr	r2, [pc, #616]	@ (800160c <HAL_GPIO_Init+0x2a0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d05e      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013a8:	4a98      	ldr	r2, [pc, #608]	@ (800160c <HAL_GPIO_Init+0x2a0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d875      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ae:	4a98      	ldr	r2, [pc, #608]	@ (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d058      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013b4:	4a96      	ldr	r2, [pc, #600]	@ (8001610 <HAL_GPIO_Init+0x2a4>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d86f      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013ba:	4a96      	ldr	r2, [pc, #600]	@ (8001614 <HAL_GPIO_Init+0x2a8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d052      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013c0:	4a94      	ldr	r2, [pc, #592]	@ (8001614 <HAL_GPIO_Init+0x2a8>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d869      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013c6:	4a94      	ldr	r2, [pc, #592]	@ (8001618 <HAL_GPIO_Init+0x2ac>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d04c      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013cc:	4a92      	ldr	r2, [pc, #584]	@ (8001618 <HAL_GPIO_Init+0x2ac>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d863      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013d2:	4a92      	ldr	r2, [pc, #584]	@ (800161c <HAL_GPIO_Init+0x2b0>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d046      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
 80013d8:	4a90      	ldr	r2, [pc, #576]	@ (800161c <HAL_GPIO_Init+0x2b0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d85d      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013de:	2b12      	cmp	r3, #18
 80013e0:	d82a      	bhi.n	8001438 <HAL_GPIO_Init+0xcc>
 80013e2:	2b12      	cmp	r3, #18
 80013e4:	d859      	bhi.n	800149a <HAL_GPIO_Init+0x12e>
 80013e6:	a201      	add	r2, pc, #4	@ (adr r2, 80013ec <HAL_GPIO_Init+0x80>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	08001467 	.word	0x08001467
 80013f0:	08001441 	.word	0x08001441
 80013f4:	08001453 	.word	0x08001453
 80013f8:	08001495 	.word	0x08001495
 80013fc:	0800149b 	.word	0x0800149b
 8001400:	0800149b 	.word	0x0800149b
 8001404:	0800149b 	.word	0x0800149b
 8001408:	0800149b 	.word	0x0800149b
 800140c:	0800149b 	.word	0x0800149b
 8001410:	0800149b 	.word	0x0800149b
 8001414:	0800149b 	.word	0x0800149b
 8001418:	0800149b 	.word	0x0800149b
 800141c:	0800149b 	.word	0x0800149b
 8001420:	0800149b 	.word	0x0800149b
 8001424:	0800149b 	.word	0x0800149b
 8001428:	0800149b 	.word	0x0800149b
 800142c:	0800149b 	.word	0x0800149b
 8001430:	08001449 	.word	0x08001449
 8001434:	0800145d 	.word	0x0800145d
 8001438:	4a79      	ldr	r2, [pc, #484]	@ (8001620 <HAL_GPIO_Init+0x2b4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800143e:	e02c      	b.n	800149a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e029      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	3304      	adds	r3, #4
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e024      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	3308      	adds	r3, #8
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e01f      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	330c      	adds	r3, #12
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e01a      	b.n	800149c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146e:	2304      	movs	r3, #4
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e013      	b.n	800149c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	611a      	str	r2, [r3, #16]
          break;
 8001486:	e009      	b.n	800149c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001488:	2308      	movs	r3, #8
 800148a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	615a      	str	r2, [r3, #20]
          break;
 8001492:	e003      	b.n	800149c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x130>
          break;
 800149a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	@ 0xff
 80014a0:	d801      	bhi.n	80014a6 <HAL_GPIO_Init+0x13a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	e001      	b.n	80014aa <HAL_GPIO_Init+0x13e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2bff      	cmp	r3, #255	@ 0xff
 80014b0:	d802      	bhi.n	80014b8 <HAL_GPIO_Init+0x14c>
 80014b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x152>
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	3b08      	subs	r3, #8
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	210f      	movs	r1, #15
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	fa01 f303 	lsl.w	r3, r1, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	6a39      	ldr	r1, [r7, #32]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80b1 	beq.w	800164e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001624 <HAL_GPIO_Init+0x2b8>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001504:	4a48      	ldr	r2, [pc, #288]	@ (8001628 <HAL_GPIO_Init+0x2bc>)
 8001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a40      	ldr	r2, [pc, #256]	@ (800162c <HAL_GPIO_Init+0x2c0>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d013      	beq.n	8001558 <HAL_GPIO_Init+0x1ec>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3f      	ldr	r2, [pc, #252]	@ (8001630 <HAL_GPIO_Init+0x2c4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d00d      	beq.n	8001554 <HAL_GPIO_Init+0x1e8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a3e      	ldr	r2, [pc, #248]	@ (8001634 <HAL_GPIO_Init+0x2c8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d007      	beq.n	8001550 <HAL_GPIO_Init+0x1e4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a3d      	ldr	r2, [pc, #244]	@ (8001638 <HAL_GPIO_Init+0x2cc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_GPIO_Init+0x1e0>
 8001548:	2303      	movs	r3, #3
 800154a:	e006      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 800154c:	2304      	movs	r3, #4
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001550:	2302      	movs	r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1ee>
 8001558:	2300      	movs	r3, #0
 800155a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156a:	492f      	ldr	r1, [pc, #188]	@ (8001628 <HAL_GPIO_Init+0x2bc>)
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001584:	4b2d      	ldr	r3, [pc, #180]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	492c      	ldr	r1, [pc, #176]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001592:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4928      	ldr	r1, [pc, #160]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4922      	ldr	r1, [pc, #136]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
 80015b8:	e006      	b.n	80015c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ba:	4b20      	ldr	r3, [pc, #128]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	491e      	ldr	r1, [pc, #120]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d4:	4b19      	ldr	r3, [pc, #100]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4918      	ldr	r1, [pc, #96]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e2:	4b16      	ldr	r3, [pc, #88]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4914      	ldr	r1, [pc, #80]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d021      	beq.n	8001640 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	490e      	ldr	r1, [pc, #56]	@ (800163c <HAL_GPIO_Init+0x2d0>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	600b      	str	r3, [r1, #0]
 8001608:	e021      	b.n	800164e <HAL_GPIO_Init+0x2e2>
 800160a:	bf00      	nop
 800160c:	10320000 	.word	0x10320000
 8001610:	10310000 	.word	0x10310000
 8001614:	10220000 	.word	0x10220000
 8001618:	10210000 	.word	0x10210000
 800161c:	10120000 	.word	0x10120000
 8001620:	10110000 	.word	0x10110000
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	40010800 	.word	0x40010800
 8001630:	40010c00 	.word	0x40010c00
 8001634:	40011000 	.word	0x40011000
 8001638:	40011400 	.word	0x40011400
 800163c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_GPIO_Init+0x304>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	43db      	mvns	r3, r3
 8001648:	4909      	ldr	r1, [pc, #36]	@ (8001670 <HAL_GPIO_Init+0x304>)
 800164a:	4013      	ands	r3, r2
 800164c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	3301      	adds	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165a:	fa22 f303 	lsr.w	r3, r2, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	f47f ae8e 	bne.w	8001380 <HAL_GPIO_Init+0x14>
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	372c      	adds	r7, #44	@ 0x2c
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	611a      	str	r2, [r3, #16]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e12b      	b.n	800190e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fb1c 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2224      	movs	r2, #36	@ 0x24
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001708:	f001 fbca 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 800170c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4a81      	ldr	r2, [pc, #516]	@ (8001918 <HAL_I2C_Init+0x274>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d807      	bhi.n	8001728 <HAL_I2C_Init+0x84>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a80      	ldr	r2, [pc, #512]	@ (800191c <HAL_I2C_Init+0x278>)
 800171c:	4293      	cmp	r3, r2
 800171e:	bf94      	ite	ls
 8001720:	2301      	movls	r3, #1
 8001722:	2300      	movhi	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	e006      	b.n	8001736 <HAL_I2C_Init+0x92>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a7d      	ldr	r2, [pc, #500]	@ (8001920 <HAL_I2C_Init+0x27c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	bf94      	ite	ls
 8001730:	2301      	movls	r3, #1
 8001732:	2300      	movhi	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0e7      	b.n	800190e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4a78      	ldr	r2, [pc, #480]	@ (8001924 <HAL_I2C_Init+0x280>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	430a      	orrs	r2, r1
 800175c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a6a      	ldr	r2, [pc, #424]	@ (8001918 <HAL_I2C_Init+0x274>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d802      	bhi.n	8001778 <HAL_I2C_Init+0xd4>
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3301      	adds	r3, #1
 8001776:	e009      	b.n	800178c <HAL_I2C_Init+0xe8>
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	4a69      	ldr	r2, [pc, #420]	@ (8001928 <HAL_I2C_Init+0x284>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	3301      	adds	r3, #1
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	430b      	orrs	r3, r1
 8001792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800179e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	495c      	ldr	r1, [pc, #368]	@ (8001918 <HAL_I2C_Init+0x274>)
 80017a8:	428b      	cmp	r3, r1
 80017aa:	d819      	bhi.n	80017e0 <HAL_I2C_Init+0x13c>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	1e59      	subs	r1, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ba:	1c59      	adds	r1, r3, #1
 80017bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80017c0:	400b      	ands	r3, r1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <HAL_I2C_Init+0x138>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1e59      	subs	r1, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017da:	e051      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 80017dc:	2304      	movs	r3, #4
 80017de:	e04f      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d111      	bne.n	800180c <HAL_I2C_Init+0x168>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e58      	subs	r0, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	440b      	add	r3, r1
 80017f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017fa:	3301      	adds	r3, #1
 80017fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	e012      	b.n	8001832 <HAL_I2C_Init+0x18e>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Init+0x196>
 8001836:	2301      	movs	r3, #1
 8001838:	e022      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10e      	bne.n	8001860 <HAL_I2C_Init+0x1bc>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1e58      	subs	r0, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6859      	ldr	r1, [r3, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	440b      	add	r3, r1
 8001850:	fbb0 f3f3 	udiv	r3, r0, r3
 8001854:	3301      	adds	r3, #1
 8001856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800185a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800185e:	e00f      	b.n	8001880 <HAL_I2C_Init+0x1dc>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1e58      	subs	r0, r3, #1
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	0099      	lsls	r1, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	fbb0 f3f3 	udiv	r3, r0, r3
 8001876:	3301      	adds	r3, #1
 8001878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	6809      	ldr	r1, [r1, #0]
 8001884:	4313      	orrs	r3, r2
 8001886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6911      	ldr	r1, [r2, #16]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68d2      	ldr	r2, [r2, #12]
 80018ba:	4311      	orrs	r1, r2
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	430b      	orrs	r3, r1
 80018c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695a      	ldr	r2, [r3, #20]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	000186a0 	.word	0x000186a0
 800191c:	001e847f 	.word	0x001e847f
 8001920:	003d08ff 	.word	0x003d08ff
 8001924:	431bde83 	.word	0x431bde83
 8001928:	10624dd3 	.word	0x10624dd3

0800192c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	607a      	str	r2, [r7, #4]
 8001936:	461a      	mov	r2, r3
 8001938:	460b      	mov	r3, r1
 800193a:	817b      	strh	r3, [r7, #10]
 800193c:	4613      	mov	r3, r2
 800193e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff fc02 	bl	8001148 <HAL_GetTick>
 8001944:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b20      	cmp	r3, #32
 8001950:	f040 80e0 	bne.w	8001b14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2319      	movs	r3, #25
 800195a:	2201      	movs	r2, #1
 800195c:	4970      	ldr	r1, [pc, #448]	@ (8001b20 <HAL_I2C_Master_Transmit+0x1f4>)
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 fc9e 	bl	80022a0 <I2C_WaitOnFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
 800196c:	e0d3      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <HAL_I2C_Master_Transmit+0x50>
 8001978:	2302      	movs	r3, #2
 800197a:	e0cc      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	d007      	beq.n	80019a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0201 	orr.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2221      	movs	r2, #33	@ 0x21
 80019b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2210      	movs	r2, #16
 80019be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	893a      	ldrh	r2, [r7, #8]
 80019d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4a50      	ldr	r2, [pc, #320]	@ (8001b24 <HAL_I2C_Master_Transmit+0x1f8>)
 80019e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80019e4:	8979      	ldrh	r1, [r7, #10]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	6a3a      	ldr	r2, [r7, #32]
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 fb08 	bl	8002000 <I2C_MasterRequestWrite>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e08d      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a10:	e066      	b.n	8001ae0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	6a39      	ldr	r1, [r7, #32]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fd5c 	bl	80024d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00d      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d107      	bne.n	8001a3a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_I2C_Master_Transmit+0x188>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d017      	beq.n	8001ab4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	781a      	ldrb	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	6a39      	ldr	r1, [r7, #32]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 fd53 	bl	8002564 <I2C_WaitOnBTFFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00d      	beq.n	8001ae0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d107      	bne.n	8001adc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ada:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e01a      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d194      	bne.n	8001a12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2220      	movs	r2, #32
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	00100002 	.word	0x00100002
 8001b24:	ffff0000 	.word	0xffff0000

08001b28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	@ 0x30
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	461a      	mov	r2, r3
 8001b34:	460b      	mov	r3, r1
 8001b36:	817b      	strh	r3, [r7, #10]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff fb02 	bl	8001148 <HAL_GetTick>
 8001b44:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	f040 824b 	bne.w	8001fea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2319      	movs	r3, #25
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	497f      	ldr	r1, [pc, #508]	@ (8001d5c <HAL_I2C_Master_Receive+0x234>)
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fb9e 	bl	80022a0 <I2C_WaitOnFlagUntilTimeout>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e23e      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_I2C_Master_Receive+0x54>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e237      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d007      	beq.n	8001ba2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 0201 	orr.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2222      	movs	r2, #34	@ 0x22
 8001bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	893a      	ldrh	r2, [r7, #8]
 8001bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4a5f      	ldr	r2, [pc, #380]	@ (8001d60 <HAL_I2C_Master_Receive+0x238>)
 8001be2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001be4:	8979      	ldrh	r1, [r7, #10]
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fa8a 	bl	8002104 <I2C_MasterRequestRead>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1f8      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d113      	bne.n	8001c2a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e1cc      	b.n	8001fc4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d11e      	bne.n	8001c70 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c42:	b672      	cpsid	i
}
 8001c44:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c6c:	b662      	cpsie	i
}
 8001c6e:	e035      	b.n	8001cdc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d11e      	bne.n	8001cb6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c88:	b672      	cpsid	i
}
 8001c8a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cb2:	b662      	cpsie	i
}
 8001cb4:	e012      	b.n	8001cdc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001cdc:	e172      	b.n	8001fc4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	f200 811f 	bhi.w	8001f26 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d123      	bne.n	8001d38 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 fc7d 	bl	80025f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e173      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d36:	e145      	b.n	8001fc4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d152      	bne.n	8001de6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d46:	2200      	movs	r2, #0
 8001d48:	4906      	ldr	r1, [pc, #24]	@ (8001d64 <HAL_I2C_Master_Receive+0x23c>)
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 faa8 	bl	80022a0 <I2C_WaitOnFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d008      	beq.n	8001d68 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e148      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
 8001d5a:	bf00      	nop
 8001d5c:	00100002 	.word	0x00100002
 8001d60:	ffff0000 	.word	0xffff0000
 8001d64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001d68:	b672      	cpsid	i
}
 8001d6a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001dae:	b662      	cpsie	i
}
 8001db0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001de4:	e0ee      	b.n	8001fc4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dec:	2200      	movs	r2, #0
 8001dee:	4981      	ldr	r1, [pc, #516]	@ (8001ff4 <HAL_I2C_Master_Receive+0x4cc>)
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fa55 	bl	80022a0 <I2C_WaitOnFlagUntilTimeout>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0f5      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001e46:	4b6c      	ldr	r3, [pc, #432]	@ (8001ff8 <HAL_I2C_Master_Receive+0x4d0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	08db      	lsrs	r3, r3, #3
 8001e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8001ffc <HAL_I2C_Master_Receive+0x4d4>)
 8001e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e52:	0a1a      	lsrs	r2, r3, #8
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00da      	lsls	r2, r3, #3
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d118      	bne.n	8001e9e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f043 0220 	orr.w	r2, r3, #32
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e8e:	b662      	cpsie	i
}
 8001e90:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0a6      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d1d9      	bne.n	8001e60 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001eee:	b662      	cpsie	i
}
 8001ef0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f24:	e04e      	b.n	8001fc4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 fb62 	bl	80025f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e058      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d124      	bne.n	8001fc4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f90:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	691a      	ldr	r2, [r3, #16]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f47f ae88 	bne.w	8001cde <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3728      	adds	r7, #40	@ 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	00010004 	.word	0x00010004
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	14f8b589 	.word	0x14f8b589

08002000 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	607a      	str	r2, [r7, #4]
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	460b      	mov	r3, r1
 800200e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002014:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d006      	beq.n	800202a <I2C_MasterRequestWrite+0x2a>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d003      	beq.n	800202a <I2C_MasterRequestWrite+0x2a>
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002028:	d108      	bne.n	800203c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	e00b      	b.n	8002054 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	2b12      	cmp	r3, #18
 8002042:	d107      	bne.n	8002054 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f91d 	bl	80022a0 <I2C_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00d      	beq.n	8002088 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800207a:	d103      	bne.n	8002084 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002082:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e035      	b.n	80020f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002090:	d108      	bne.n	80020a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002092:	897b      	ldrh	r3, [r7, #10]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	e01b      	b.n	80020dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020a4:	897b      	ldrh	r3, [r7, #10]
 80020a6:	11db      	asrs	r3, r3, #7
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f003 0306 	and.w	r3, r3, #6
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	f063 030f 	orn	r3, r3, #15
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	490e      	ldr	r1, [pc, #56]	@ (80020fc <I2C_MasterRequestWrite+0xfc>)
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f966 	bl	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e010      	b.n	80020f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020d2:	897b      	ldrh	r3, [r7, #10]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <I2C_MasterRequestWrite+0x100>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f956 	bl	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	00010008 	.word	0x00010008
 8002100:	00010002 	.word	0x00010002

08002104 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	460b      	mov	r3, r1
 8002112:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002128:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d006      	beq.n	800213e <I2C_MasterRequestRead+0x3a>
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d003      	beq.n	800213e <I2C_MasterRequestRead+0x3a>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800213c:	d108      	bne.n	8002150 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e00b      	b.n	8002168 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002154:	2b11      	cmp	r3, #17
 8002156:	d107      	bne.n	8002168 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002166:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f893 	bl	80022a0 <I2C_WaitOnFlagUntilTimeout>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00d      	beq.n	800219c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800218e:	d103      	bne.n	8002198 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e079      	b.n	8002290 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021a4:	d108      	bne.n	80021b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	611a      	str	r2, [r3, #16]
 80021b6:	e05f      	b.n	8002278 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021b8:	897b      	ldrh	r3, [r7, #10]
 80021ba:	11db      	asrs	r3, r3, #7
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f003 0306 	and.w	r3, r3, #6
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f063 030f 	orn	r3, r3, #15
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4930      	ldr	r1, [pc, #192]	@ (8002298 <I2C_MasterRequestRead+0x194>)
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f8dc 	bl	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e054      	b.n	8002290 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021e6:	897b      	ldrh	r3, [r7, #10]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4929      	ldr	r1, [pc, #164]	@ (800229c <I2C_MasterRequestRead+0x198>)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f8cc 	bl	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e044      	b.n	8002290 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800222a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f831 	bl	80022a0 <I2C_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00d      	beq.n	8002260 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002252:	d103      	bne.n	800225c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e017      	b.n	8002290 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002260:	897b      	ldrh	r3, [r7, #10]
 8002262:	11db      	asrs	r3, r3, #7
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f003 0306 	and.w	r3, r3, #6
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f063 030e 	orn	r3, r3, #14
 8002270:	b2da      	uxtb	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4907      	ldr	r1, [pc, #28]	@ (800229c <I2C_MasterRequestRead+0x198>)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f888 	bl	8002394 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	00010008 	.word	0x00010008
 800229c:	00010002 	.word	0x00010002

080022a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b0:	e048      	b.n	8002344 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d044      	beq.n	8002344 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7fe ff45 	bl	8001148 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d139      	bne.n	8002344 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	0c1b      	lsrs	r3, r3, #16
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	43da      	mvns	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4013      	ands	r3, r2
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	e00c      	b.n	8002310 <I2C_WaitOnFlagUntilTimeout+0x70>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	43da      	mvns	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4013      	ands	r3, r2
 8002302:	b29b      	uxth	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf0c      	ite	eq
 8002308:	2301      	moveq	r3, #1
 800230a:	2300      	movne	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	429a      	cmp	r2, r3
 8002314:	d116      	bne.n	8002344 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e023      	b.n	800238c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	0c1b      	lsrs	r3, r3, #16
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d10d      	bne.n	800236a <I2C_WaitOnFlagUntilTimeout+0xca>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	43da      	mvns	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	4013      	ands	r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	e00c      	b.n	8002384 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	43da      	mvns	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4013      	ands	r3, r2
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	79fb      	ldrb	r3, [r7, #7]
 8002386:	429a      	cmp	r2, r3
 8002388:	d093      	beq.n	80022b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023a2:	e071      	b.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b2:	d123      	bne.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80023cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e8:	f043 0204 	orr.w	r2, r3, #4
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e067      	b.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002402:	d041      	beq.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002404:	f7fe fea0 	bl	8001148 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d302      	bcc.n	800241a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d136      	bne.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10c      	bne.n	800243e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4013      	ands	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	bf14      	ite	ne
 8002436:	2301      	movne	r3, #1
 8002438:	2300      	moveq	r3, #0
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e00b      	b.n	8002456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	43da      	mvns	r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4013      	ands	r3, r2
 800244a:	b29b      	uxth	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf14      	ite	ne
 8002450:	2301      	movne	r3, #1
 8002452:	2300      	moveq	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e021      	b.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0c1b      	lsrs	r3, r3, #16
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d10c      	bne.n	80024ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	43da      	mvns	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	e00b      	b.n	80024c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	43da      	mvns	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	4013      	ands	r3, r2
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf14      	ite	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	2300      	moveq	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f47f af6d 	bne.w	80023a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024e0:	e034      	b.n	800254c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f8e3 	bl	80026ae <I2C_IsAcknowledgeFailed>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e034      	b.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d028      	beq.n	800254c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7fe fe25 	bl	8001148 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11d      	bne.n	800254c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251a:	2b80      	cmp	r3, #128	@ 0x80
 800251c:	d016      	beq.n	800254c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f043 0220 	orr.w	r2, r3, #32
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e007      	b.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002556:	2b80      	cmp	r3, #128	@ 0x80
 8002558:	d1c3      	bne.n	80024e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002570:	e034      	b.n	80025dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f89b 	bl	80026ae <I2C_IsAcknowledgeFailed>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e034      	b.n	80025ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d028      	beq.n	80025dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800258a:	f7fe fddd 	bl	8001148 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	429a      	cmp	r2, r3
 8002598:	d302      	bcc.n	80025a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d11d      	bne.n	80025dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d016      	beq.n	80025dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	f043 0220 	orr.w	r2, r3, #32
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e007      	b.n	80025ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d1c3      	bne.n	8002572 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002600:	e049      	b.n	8002696 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b10      	cmp	r3, #16
 800260e:	d119      	bne.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0210 	mvn.w	r2, #16
 8002618:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e030      	b.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7fe fd80 	bl	8001148 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11d      	bne.n	8002696 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002664:	2b40      	cmp	r3, #64	@ 0x40
 8002666:	d016      	beq.n	8002696 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e007      	b.n	80026a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a0:	2b40      	cmp	r3, #64	@ 0x40
 80026a2:	d1ae      	bne.n	8002602 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026c4:	d11b      	bne.n	80026fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f043 0204 	orr.w	r2, r3, #4
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
	...

0800270c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e272      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8087 	beq.w	800283a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800272c:	4b92      	ldr	r3, [pc, #584]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b04      	cmp	r3, #4
 8002736:	d00c      	beq.n	8002752 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002738:	4b8f      	ldr	r3, [pc, #572]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f003 030c 	and.w	r3, r3, #12
 8002740:	2b08      	cmp	r3, #8
 8002742:	d112      	bne.n	800276a <HAL_RCC_OscConfig+0x5e>
 8002744:	4b8c      	ldr	r3, [pc, #560]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002750:	d10b      	bne.n	800276a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002752:	4b89      	ldr	r3, [pc, #548]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d06c      	beq.n	8002838 <HAL_RCC_OscConfig+0x12c>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d168      	bne.n	8002838 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e24c      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x76>
 8002774:	4b80      	ldr	r3, [pc, #512]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a7f      	ldr	r2, [pc, #508]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e02e      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x98>
 800278a:	4b7b      	ldr	r3, [pc, #492]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7a      	ldr	r2, [pc, #488]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b78      	ldr	r3, [pc, #480]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a77      	ldr	r2, [pc, #476]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e01d      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCC_OscConfig+0xbc>
 80027ae:	4b72      	ldr	r3, [pc, #456]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a71      	ldr	r2, [pc, #452]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a6e      	ldr	r2, [pc, #440]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0xd4>
 80027c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	4b68      	ldr	r3, [pc, #416]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a67      	ldr	r2, [pc, #412]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80027da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fcae 	bl	8001148 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7fe fcaa 	bl	8001148 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e200      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0xe4>
 800280e:	e014      	b.n	800283a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7fe fc9a 	bl	8001148 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7fe fc96 	bl	8001148 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b64      	cmp	r3, #100	@ 0x64
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e1ec      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800282a:	4b53      	ldr	r3, [pc, #332]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x10c>
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d063      	beq.n	800290e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002846:	4b4c      	ldr	r3, [pc, #304]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002852:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 030c 	and.w	r3, r3, #12
 800285a:	2b08      	cmp	r3, #8
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x18c>
 800285e:	4b46      	ldr	r3, [pc, #280]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	4b43      	ldr	r3, [pc, #268]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x176>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1c0      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b3d      	ldr	r3, [pc, #244]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4939      	ldr	r1, [pc, #228]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a0:	4b36      	ldr	r3, [pc, #216]	@ (800297c <HAL_RCC_OscConfig+0x270>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7fe fc4f 	bl	8001148 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fc4b 	bl	8001148 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1a1      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4927      	ldr	r1, [pc, #156]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b26      	ldr	r3, [pc, #152]	@ (800297c <HAL_RCC_OscConfig+0x270>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fc2e 	bl	8001148 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7fe fc2a 	bl	8001148 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e180      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d03a      	beq.n	8002990 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d019      	beq.n	8002956 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b17      	ldr	r3, [pc, #92]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002928:	f7fe fc0e 	bl	8001148 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe fc0a 	bl	8001148 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e160      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <HAL_RCC_OscConfig+0x26c>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800294e:	2001      	movs	r0, #1
 8002950:	f000 face 	bl	8002ef0 <RCC_Delay>
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <HAL_RCC_OscConfig+0x274>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295c:	f7fe fbf4 	bl	8001148 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002962:	e00f      	b.n	8002984 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe fbf0 	bl	8001148 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d908      	bls.n	8002984 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e146      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
 800297c:	42420000 	.word	0x42420000
 8002980:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002984:	4b92      	ldr	r3, [pc, #584]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1e9      	bne.n	8002964 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a6 	beq.w	8002aea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a2:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ae:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a87      	ldr	r2, [pc, #540]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	61d3      	str	r3, [r2, #28]
 80029ba:	4b85      	ldr	r3, [pc, #532]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b82      	ldr	r3, [pc, #520]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7e      	ldr	r2, [pc, #504]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fbb1 	bl	8001148 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7fe fbad 	bl	8001148 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	@ 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e103      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b75      	ldr	r3, [pc, #468]	@ (8002bd4 <HAL_RCC_OscConfig+0x4c8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x312>
 8002a10:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	e02d      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x334>
 8002a26:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	4a69      	ldr	r2, [pc, #420]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	6213      	str	r3, [r2, #32]
 8002a32:	4b67      	ldr	r3, [pc, #412]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	4a66      	ldr	r2, [pc, #408]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	f023 0304 	bic.w	r3, r3, #4
 8002a3c:	6213      	str	r3, [r2, #32]
 8002a3e:	e01c      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d10c      	bne.n	8002a62 <HAL_RCC_OscConfig+0x356>
 8002a48:	4b61      	ldr	r3, [pc, #388]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a60      	ldr	r2, [pc, #384]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	f043 0304 	orr.w	r3, r3, #4
 8002a52:	6213      	str	r3, [r2, #32]
 8002a54:	4b5e      	ldr	r3, [pc, #376]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	4a5d      	ldr	r2, [pc, #372]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a5a:	f043 0301 	orr.w	r3, r3, #1
 8002a5e:	6213      	str	r3, [r2, #32]
 8002a60:	e00b      	b.n	8002a7a <HAL_RCC_OscConfig+0x36e>
 8002a62:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a5a      	ldr	r2, [pc, #360]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	4b58      	ldr	r3, [pc, #352]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a57      	ldr	r2, [pc, #348]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d015      	beq.n	8002aae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fb61 	bl	8001148 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fb5d 	bl	8001148 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0b1      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ee      	beq.n	8002a8a <HAL_RCC_OscConfig+0x37e>
 8002aac:	e014      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aae:	f7fe fb4b 	bl	8001148 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe fb47 	bl	8001148 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e09b      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002acc:	4b40      	ldr	r3, [pc, #256]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ee      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d105      	bne.n	8002aea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ade:	4b3c      	ldr	r3, [pc, #240]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8087 	beq.w	8002c02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af4:	4b36      	ldr	r3, [pc, #216]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d061      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d146      	bne.n	8002b96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b33      	ldr	r3, [pc, #204]	@ (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0e:	f7fe fb1b 	bl	8001148 <HAL_GetTick>
 8002b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b14:	e008      	b.n	8002b28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b16:	f7fe fb17 	bl	8001148 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e06d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b28:	4b29      	ldr	r3, [pc, #164]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1f0      	bne.n	8002b16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b3e:	4b24      	ldr	r3, [pc, #144]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4921      	ldr	r1, [pc, #132]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b50:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a19      	ldr	r1, [r3, #32]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	430b      	orrs	r3, r1
 8002b62:	491b      	ldr	r1, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b68:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7fe faeb 	bl	8001148 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe fae7 	bl	8001148 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e03d      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b88:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x46a>
 8002b94:	e035      	b.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_RCC_OscConfig+0x4cc>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fad4 	bl	8001148 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe fad0 	bl	8001148 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e026      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x498>
 8002bc2:	e01e      	b.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d107      	bne.n	8002bdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e019      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40007000 	.word	0x40007000
 8002bd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_OscConfig+0x500>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000

08002c10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0d0      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c24:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d910      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b67      	ldr	r3, [pc, #412]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 0207 	bic.w	r2, r3, #7
 8002c3a:	4965      	ldr	r1, [pc, #404]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b63      	ldr	r3, [pc, #396]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0b8      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b59      	ldr	r3, [pc, #356]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a58      	ldr	r2, [pc, #352]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a52      	ldr	r2, [pc, #328]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b50      	ldr	r3, [pc, #320]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	494d      	ldr	r1, [pc, #308]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d040      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d115      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e07f      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e073      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e06b      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b39      	ldr	r3, [pc, #228]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4936      	ldr	r1, [pc, #216]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7fe fa22 	bl	8001148 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe fa1e 	bl	8001148 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e053      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d210      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b24      	ldr	r3, [pc, #144]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4922      	ldr	r1, [pc, #136]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e032      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d008      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	4916      	ldr	r1, [pc, #88]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8a:	4b12      	ldr	r3, [pc, #72]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	490e      	ldr	r1, [pc, #56]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d9e:	f000 f821 	bl	8002de4 <HAL_RCC_GetSysClockFreq>
 8002da2:	4602      	mov	r2, r0
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	490a      	ldr	r1, [pc, #40]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
 8002db2:	fa22 f303 	lsr.w	r3, r2, r3
 8002db6:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <HAL_RCC_ClockConfig+0x1cc>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dba:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1d0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f980 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	0800509c 	.word	0x0800509c
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000004 	.word	0x20000004

08002de4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b087      	sub	sp, #28
 8002de8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	2300      	movs	r3, #0
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x30>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x36>
 8002e12:	e027      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e14:	4b19      	ldr	r3, [pc, #100]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e16:	613b      	str	r3, [r7, #16]
      break;
 8002e18:	e027      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	0c9b      	lsrs	r3, r3, #18
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e32:	4b11      	ldr	r3, [pc, #68]	@ (8002e78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	0c5b      	lsrs	r3, r3, #17
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	4a11      	ldr	r2, [pc, #68]	@ (8002e84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e46:	fb03 f202 	mul.w	r2, r3, r2
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	e004      	b.n	8002e5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0c      	ldr	r2, [pc, #48]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e58:	fb02 f303 	mul.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	613b      	str	r3, [r7, #16]
      break;
 8002e62:	e002      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b05      	ldr	r3, [pc, #20]	@ (8002e7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002e66:	613b      	str	r3, [r7, #16]
      break;
 8002e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6a:	693b      	ldr	r3, [r7, #16]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	007a1200 	.word	0x007a1200
 8002e80:	080050b4 	.word	0x080050b4
 8002e84:	080050c4 	.word	0x080050c4
 8002e88:	003d0900 	.word	0x003d0900

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e90:	4b02      	ldr	r3, [pc, #8]	@ (8002e9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	20000000 	.word	0x20000000

08002ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea4:	f7ff fff2 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0a1b      	lsrs	r3, r3, #8
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	@ (8002ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	080050ac 	.word	0x080050ac

08002ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ecc:	f7ff ffde 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	0adb      	lsrs	r3, r3, #11
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4903      	ldr	r1, [pc, #12]	@ (8002eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	080050ac 	.word	0x080050ac

08002ef0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <RCC_Delay+0x34>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <RCC_Delay+0x38>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0a5b      	lsrs	r3, r3, #9
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f0c:	bf00      	nop
  }
  while (Delay --);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	60fa      	str	r2, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f9      	bne.n	8002f0c <RCC_Delay+0x1c>
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr
 8002f24:	20000000 	.word	0x20000000
 8002f28:	10624dd3 	.word	0x10624dd3

08002f2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e076      	b.n	800302c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d108      	bne.n	8002f58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f4e:	d009      	beq.n	8002f64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
 8002f56:	e005      	b.n	8002f64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d106      	bne.n	8002f84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd ff2e 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe8:	ea42 0103 	orr.w	r1, r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	0c1a      	lsrs	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f002 0204 	and.w	r2, r2, #4
 800300a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800301a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e042      	b.n	80030cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd ff46 	bl	8000eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	@ 0x24
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f82b 	bl	80030d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800308c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800309c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800310e:	f023 030c 	bic.w	r3, r3, #12
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	430b      	orrs	r3, r1
 800311a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2c      	ldr	r2, [pc, #176]	@ (80031e8 <UART_SetConfig+0x114>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d103      	bne.n	8003144 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800313c:	f7ff fec4 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	e002      	b.n	800314a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003144:	f7ff feac 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 8003148:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	009a      	lsls	r2, r3, #2
 8003154:	441a      	add	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	4a22      	ldr	r2, [pc, #136]	@ (80031ec <UART_SetConfig+0x118>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	0119      	lsls	r1, r3, #4
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003180:	4b1a      	ldr	r3, [pc, #104]	@ (80031ec <UART_SetConfig+0x118>)
 8003182:	fba3 0302 	umull	r0, r3, r3, r2
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2064      	movs	r0, #100	@ 0x64
 800318a:	fb00 f303 	mul.w	r3, r0, r3
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	3332      	adds	r3, #50	@ 0x32
 8003194:	4a15      	ldr	r2, [pc, #84]	@ (80031ec <UART_SetConfig+0x118>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a0:	4419      	add	r1, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009a      	lsls	r2, r3, #2
 80031ac:	441a      	add	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b8:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <UART_SetConfig+0x118>)
 80031ba:	fba3 0302 	umull	r0, r3, r3, r2
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2064      	movs	r0, #100	@ 0x64
 80031c2:	fb00 f303 	mul.w	r3, r0, r3
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	3332      	adds	r3, #50	@ 0x32
 80031cc:	4a07      	ldr	r2, [pc, #28]	@ (80031ec <UART_SetConfig+0x118>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	f003 020f 	and.w	r2, r3, #15
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	440a      	add	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40013800 	.word	0x40013800
 80031ec:	51eb851f 	.word	0x51eb851f

080031f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80031fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003202:	2b84      	cmp	r3, #132	@ 0x84
 8003204:	d005      	beq.n	8003212 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003206:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	3303      	adds	r3, #3
 8003210:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003212:	68fb      	ldr	r3, [r7, #12]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003222:	f000 fadf 	bl	80037e4 <vTaskStartScheduler>
  
  return osOK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}

0800322c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322e:	b089      	sub	sp, #36	@ 0x24
 8003230:	af04      	add	r7, sp, #16
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <osThreadCreate+0x54>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01c      	beq.n	8003280 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685c      	ldr	r4, [r3, #4]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691e      	ldr	r6, [r3, #16]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff ffc9 	bl	80031f0 <makeFreeRtosPriority>
 800325e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003268:	9202      	str	r2, [sp, #8]
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	9100      	str	r1, [sp, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	4632      	mov	r2, r6
 8003272:	4629      	mov	r1, r5
 8003274:	4620      	mov	r0, r4
 8003276:	f000 f8e8 	bl	800344a <xTaskCreateStatic>
 800327a:	4603      	mov	r3, r0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e01c      	b.n	80032ba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685c      	ldr	r4, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800328c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ffab 	bl	80031f0 <makeFreeRtosPriority>
 800329a:	4602      	mov	r2, r0
 800329c:	f107 030c 	add.w	r3, r7, #12
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	9200      	str	r2, [sp, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4632      	mov	r2, r6
 80032a8:	4629      	mov	r1, r5
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 f92d 	bl	800350a <xTaskCreate>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e000      	b.n	80032bc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032ba:	68fb      	ldr	r3, [r7, #12]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032c4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <osDelay+0x16>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	e000      	b.n	80032dc <osDelay+0x18>
 80032da:	2301      	movs	r3, #1
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fa4b 	bl	8003778 <vTaskDelay>
  
  return osOK;
 80032e2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f103 0208 	add.w	r2, r3, #8
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f04f 32ff 	mov.w	r2, #4294967295
 8003304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f103 0208 	add.w	r2, r3, #8
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f103 0208 	add.w	r2, r3, #8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d103      	bne.n	80033a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e00c      	b.n	80033c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3308      	adds	r3, #8
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e002      	b.n	80033b6 <vListInsert+0x2e>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d2f6      	bcs.n	80033b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	601a      	str	r2, [r3, #0]
}
 80033ee:	bf00      	nop
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr

080033f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6892      	ldr	r2, [r2, #8]
 800340e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6852      	ldr	r2, [r2, #4]
 8003418:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	429a      	cmp	r2, r3
 8003422:	d103      	bne.n	800342c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	1e5a      	subs	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800344a:	b580      	push	{r7, lr}
 800344c:	b08e      	sub	sp, #56	@ 0x38
 800344e:	af04      	add	r7, sp, #16
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	e7fd      	b.n	8003472 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10b      	bne.n	8003494 <xTaskCreateStatic+0x4a>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	61fb      	str	r3, [r7, #28]
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003494:	2354      	movs	r3, #84	@ 0x54
 8003496:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b54      	cmp	r3, #84	@ 0x54
 800349c:	d00b      	beq.n	80034b6 <xTaskCreateStatic+0x6c>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	61bb      	str	r3, [r7, #24]
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	e7fd      	b.n	80034b2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80034b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80034b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d01e      	beq.n	80034fc <xTaskCreateStatic+0xb2>
 80034be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80034d6:	2300      	movs	r3, #0
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	9302      	str	r3, [sp, #8]
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f850 	bl	8003594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034f6:	f000 f8d5 	bl	80036a4 <prvAddNewTaskToReadyList>
 80034fa:	e001      	b.n	8003500 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003500:	697b      	ldr	r3, [r7, #20]
	}
 8003502:	4618      	mov	r0, r3
 8003504:	3728      	adds	r7, #40	@ 0x28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800350a:	b580      	push	{r7, lr}
 800350c:	b08c      	sub	sp, #48	@ 0x30
 800350e:	af04      	add	r7, sp, #16
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fe8e 	bl	8004240 <pvPortMalloc>
 8003524:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800352c:	2054      	movs	r0, #84	@ 0x54
 800352e:	f000 fe87 	bl	8004240 <pvPortMalloc>
 8003532:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003540:	e005      	b.n	800354e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003542:	6978      	ldr	r0, [r7, #20]
 8003544:	f000 ff4a 	bl	80043dc <vPortFree>
 8003548:	e001      	b.n	800354e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	2300      	movs	r3, #0
 8003560:	9303      	str	r3, [sp, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	9302      	str	r3, [sp, #8]
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	9301      	str	r3, [sp, #4]
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f80e 	bl	8003594 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003578:	69f8      	ldr	r0, [r7, #28]
 800357a:	f000 f893 	bl	80036a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800357e:	2301      	movs	r3, #1
 8003580:	61bb      	str	r3, [r7, #24]
 8003582:	e002      	b.n	800358a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800358a:	69bb      	ldr	r3, [r7, #24]
	}
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035ac:	3b01      	subs	r3, #1
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f023 0307 	bic.w	r3, r3, #7
 80035ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <prvInitialiseNewTask+0x4a>
	__asm volatile
 80035c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ca:	f383 8811 	msr	BASEPRI, r3
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	617b      	str	r3, [r7, #20]
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	e7fd      	b.n	80035da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01f      	beq.n	8003624 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
 80035e8:	e012      	b.n	8003610 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	7819      	ldrb	r1, [r3, #0]
 80035f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	3334      	adds	r3, #52	@ 0x34
 80035fa:	460a      	mov	r2, r1
 80035fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3301      	adds	r3, #1
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	2b0f      	cmp	r3, #15
 8003614:	d9e9      	bls.n	80035ea <prvInitialiseNewTask+0x56>
 8003616:	e000      	b.n	800361a <prvInitialiseNewTask+0x86>
			{
				break;
 8003618:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800361a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003622:	e003      	b.n	800362c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	2b06      	cmp	r3, #6
 8003630:	d901      	bls.n	8003636 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003632:	2306      	movs	r3, #6
 8003634:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800363c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800363e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003640:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003644:	2200      	movs	r2, #0
 8003646:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	3304      	adds	r3, #4
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fe6c 	bl	800332a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003654:	3318      	adds	r3, #24
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fe67 	bl	800332a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800365c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003660:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	f1c3 0207 	rsb	r2, r3, #7
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	2200      	movs	r2, #0
 8003676:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	68f9      	ldr	r1, [r7, #12]
 8003684:	69b8      	ldr	r0, [r7, #24]
 8003686:	f000 fc2b 	bl	8003ee0 <pxPortInitialiseStack>
 800368a:	4602      	mov	r2, r0
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800369a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800369c:	bf00      	nop
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80036ac:	f000 fd06 	bl	80040bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80036b0:	4b2a      	ldr	r3, [pc, #168]	@ (800375c <prvAddNewTaskToReadyList+0xb8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a29      	ldr	r2, [pc, #164]	@ (800375c <prvAddNewTaskToReadyList+0xb8>)
 80036b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80036ba:	4b29      	ldr	r3, [pc, #164]	@ (8003760 <prvAddNewTaskToReadyList+0xbc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80036c2:	4a27      	ldr	r2, [pc, #156]	@ (8003760 <prvAddNewTaskToReadyList+0xbc>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80036c8:	4b24      	ldr	r3, [pc, #144]	@ (800375c <prvAddNewTaskToReadyList+0xb8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d110      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80036d0:	f000 fac4 	bl	8003c5c <prvInitialiseTaskLists>
 80036d4:	e00d      	b.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80036d6:	4b23      	ldr	r3, [pc, #140]	@ (8003764 <prvAddNewTaskToReadyList+0xc0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <prvAddNewTaskToReadyList+0xbc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d802      	bhi.n	80036f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80036ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003760 <prvAddNewTaskToReadyList+0xbc>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80036f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003768 <prvAddNewTaskToReadyList+0xc4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <prvAddNewTaskToReadyList+0xc4>)
 80036fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	2201      	movs	r2, #1
 8003702:	409a      	lsls	r2, r3
 8003704:	4b19      	ldr	r3, [pc, #100]	@ (800376c <prvAddNewTaskToReadyList+0xc8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4313      	orrs	r3, r2
 800370a:	4a18      	ldr	r2, [pc, #96]	@ (800376c <prvAddNewTaskToReadyList+0xc8>)
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4a15      	ldr	r2, [pc, #84]	@ (8003770 <prvAddNewTaskToReadyList+0xcc>)
 800371c:	441a      	add	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	4619      	mov	r1, r3
 8003724:	4610      	mov	r0, r2
 8003726:	f7ff fe0c 	bl	8003342 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800372a:	f000 fcf7 	bl	800411c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800372e:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <prvAddNewTaskToReadyList+0xc0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00e      	beq.n	8003754 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003736:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <prvAddNewTaskToReadyList+0xbc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	429a      	cmp	r2, r3
 8003742:	d207      	bcs.n	8003754 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <prvAddNewTaskToReadyList+0xd0>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000588 	.word	0x20000588
 8003760:	20000488 	.word	0x20000488
 8003764:	20000594 	.word	0x20000594
 8003768:	200005a4 	.word	0x200005a4
 800376c:	20000590 	.word	0x20000590
 8003770:	2000048c 	.word	0x2000048c
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800378a:	4b14      	ldr	r3, [pc, #80]	@ (80037dc <vTaskDelay+0x64>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00b      	beq.n	80037aa <vTaskDelay+0x32>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60bb      	str	r3, [r7, #8]
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	e7fd      	b.n	80037a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037aa:	f000 f87d 	bl	80038a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ae:	2100      	movs	r1, #0
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fb2f 	bl	8003e14 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037b6:	f000 f885 	bl	80038c4 <xTaskResumeAll>
 80037ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d107      	bne.n	80037d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80037c2:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <vTaskDelay+0x68>)
 80037c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	200005b0 	.word	0x200005b0
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	@ 0x28
 80037e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80037f2:	463a      	mov	r2, r7
 80037f4:	1d39      	adds	r1, r7, #4
 80037f6:	f107 0308 	add.w	r3, r7, #8
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fc fca8 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	9202      	str	r2, [sp, #8]
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2300      	movs	r3, #0
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2300      	movs	r3, #0
 8003810:	460a      	mov	r2, r1
 8003812:	491f      	ldr	r1, [pc, #124]	@ (8003890 <vTaskStartScheduler+0xac>)
 8003814:	481f      	ldr	r0, [pc, #124]	@ (8003894 <vTaskStartScheduler+0xb0>)
 8003816:	f7ff fe18 	bl	800344a <xTaskCreateStatic>
 800381a:	4603      	mov	r3, r0
 800381c:	4a1e      	ldr	r2, [pc, #120]	@ (8003898 <vTaskStartScheduler+0xb4>)
 800381e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <vTaskStartScheduler+0xb4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e001      	b.n	8003832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d116      	bne.n	8003866 <vTaskStartScheduler+0x82>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	613b      	str	r3, [r7, #16]
}
 800384a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800384c:	4b13      	ldr	r3, [pc, #76]	@ (800389c <vTaskStartScheduler+0xb8>)
 800384e:	f04f 32ff 	mov.w	r2, #4294967295
 8003852:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003854:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <vTaskStartScheduler+0xbc>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800385a:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <vTaskStartScheduler+0xc0>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003860:	f000 fbba 	bl	8003fd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003864:	e00f      	b.n	8003886 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d10b      	bne.n	8003886 <vTaskStartScheduler+0xa2>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	60fb      	str	r3, [r7, #12]
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	e7fd      	b.n	8003882 <vTaskStartScheduler+0x9e>
}
 8003886:	bf00      	nop
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	08005094 	.word	0x08005094
 8003894:	08003c2d 	.word	0x08003c2d
 8003898:	200005ac 	.word	0x200005ac
 800389c:	200005a8 	.word	0x200005a8
 80038a0:	20000594 	.word	0x20000594
 80038a4:	2000058c 	.word	0x2000058c

080038a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038ac:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <vTaskSuspendAll+0x18>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	4a03      	ldr	r2, [pc, #12]	@ (80038c0 <vTaskSuspendAll+0x18>)
 80038b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	200005b0 	.word	0x200005b0

080038c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80038d2:	4b42      	ldr	r3, [pc, #264]	@ (80039dc <xTaskResumeAll+0x118>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10b      	bne.n	80038f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	603b      	str	r3, [r7, #0]
}
 80038ec:	bf00      	nop
 80038ee:	bf00      	nop
 80038f0:	e7fd      	b.n	80038ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80038f2:	f000 fbe3 	bl	80040bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80038f6:	4b39      	ldr	r3, [pc, #228]	@ (80039dc <xTaskResumeAll+0x118>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	4a37      	ldr	r2, [pc, #220]	@ (80039dc <xTaskResumeAll+0x118>)
 80038fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003900:	4b36      	ldr	r3, [pc, #216]	@ (80039dc <xTaskResumeAll+0x118>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d161      	bne.n	80039cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003908:	4b35      	ldr	r3, [pc, #212]	@ (80039e0 <xTaskResumeAll+0x11c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05d      	beq.n	80039cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003910:	e02e      	b.n	8003970 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003912:	4b34      	ldr	r3, [pc, #208]	@ (80039e4 <xTaskResumeAll+0x120>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3318      	adds	r3, #24
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fd6a 	bl	80033f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3304      	adds	r3, #4
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff fd65 	bl	80033f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	4b2c      	ldr	r3, [pc, #176]	@ (80039e8 <xTaskResumeAll+0x124>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	4a2a      	ldr	r2, [pc, #168]	@ (80039e8 <xTaskResumeAll+0x124>)
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4a27      	ldr	r2, [pc, #156]	@ (80039ec <xTaskResumeAll+0x128>)
 800394e:	441a      	add	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f7ff fcf3 	bl	8003342 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003960:	4b23      	ldr	r3, [pc, #140]	@ (80039f0 <xTaskResumeAll+0x12c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800396a:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <xTaskResumeAll+0x130>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003970:	4b1c      	ldr	r3, [pc, #112]	@ (80039e4 <xTaskResumeAll+0x120>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1cc      	bne.n	8003912 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800397e:	f000 fa0b 	bl	8003d98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003982:	4b1d      	ldr	r3, [pc, #116]	@ (80039f8 <xTaskResumeAll+0x134>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d010      	beq.n	80039b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800398e:	f000 f837 	bl	8003a00 <xTaskIncrementTick>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003998:	4b16      	ldr	r3, [pc, #88]	@ (80039f4 <xTaskResumeAll+0x130>)
 800399a:	2201      	movs	r2, #1
 800399c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f1      	bne.n	800398e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039aa:	4b13      	ldr	r3, [pc, #76]	@ (80039f8 <xTaskResumeAll+0x134>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039b0:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <xTaskResumeAll+0x130>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039b8:	2301      	movs	r3, #1
 80039ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <xTaskResumeAll+0x138>)
 80039be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039cc:	f000 fba6 	bl	800411c <vPortExitCritical>

	return xAlreadyYielded;
 80039d0:	68bb      	ldr	r3, [r7, #8]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200005b0 	.word	0x200005b0
 80039e0:	20000588 	.word	0x20000588
 80039e4:	20000548 	.word	0x20000548
 80039e8:	20000590 	.word	0x20000590
 80039ec:	2000048c 	.word	0x2000048c
 80039f0:	20000488 	.word	0x20000488
 80039f4:	2000059c 	.word	0x2000059c
 80039f8:	20000598 	.word	0x20000598
 80039fc:	e000ed04 	.word	0xe000ed04

08003a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b48 <xTaskIncrementTick+0x148>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f040 808f 	bne.w	8003b32 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a14:	4b4d      	ldr	r3, [pc, #308]	@ (8003b4c <xTaskIncrementTick+0x14c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003b4c <xTaskIncrementTick+0x14c>)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d121      	bne.n	8003a6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a28:	4b49      	ldr	r3, [pc, #292]	@ (8003b50 <xTaskIncrementTick+0x150>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	603b      	str	r3, [r7, #0]
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	e7fd      	b.n	8003a46 <xTaskIncrementTick+0x46>
 8003a4a:	4b41      	ldr	r3, [pc, #260]	@ (8003b50 <xTaskIncrementTick+0x150>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	4b40      	ldr	r3, [pc, #256]	@ (8003b54 <xTaskIncrementTick+0x154>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3e      	ldr	r2, [pc, #248]	@ (8003b50 <xTaskIncrementTick+0x150>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4a3e      	ldr	r2, [pc, #248]	@ (8003b54 <xTaskIncrementTick+0x154>)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b58 <xTaskIncrementTick+0x158>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	4a3c      	ldr	r2, [pc, #240]	@ (8003b58 <xTaskIncrementTick+0x158>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	f000 f996 	bl	8003d98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b5c <xTaskIncrementTick+0x15c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d348      	bcc.n	8003b08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a76:	4b36      	ldr	r3, [pc, #216]	@ (8003b50 <xTaskIncrementTick+0x150>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d104      	bne.n	8003a8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a80:	4b36      	ldr	r3, [pc, #216]	@ (8003b5c <xTaskIncrementTick+0x15c>)
 8003a82:	f04f 32ff 	mov.w	r2, #4294967295
 8003a86:	601a      	str	r2, [r3, #0]
					break;
 8003a88:	e03e      	b.n	8003b08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8a:	4b31      	ldr	r3, [pc, #196]	@ (8003b50 <xTaskIncrementTick+0x150>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d203      	bcs.n	8003aaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b5c <xTaskIncrementTick+0x15c>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003aa8:	e02e      	b.n	8003b08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fca2 	bl	80033f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d004      	beq.n	8003ac6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3318      	adds	r3, #24
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fc99 	bl	80033f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aca:	2201      	movs	r2, #1
 8003acc:	409a      	lsls	r2, r3
 8003ace:	4b24      	ldr	r3, [pc, #144]	@ (8003b60 <xTaskIncrementTick+0x160>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	4a22      	ldr	r2, [pc, #136]	@ (8003b60 <xTaskIncrementTick+0x160>)
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <xTaskIncrementTick+0x164>)
 8003ae6:	441a      	add	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f7ff fc27 	bl	8003342 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003af8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <xTaskIncrementTick+0x168>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d3b9      	bcc.n	8003a76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b06:	e7b6      	b.n	8003a76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b08:	4b17      	ldr	r3, [pc, #92]	@ (8003b68 <xTaskIncrementTick+0x168>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b0e:	4915      	ldr	r1, [pc, #84]	@ (8003b64 <xTaskIncrementTick+0x164>)
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d901      	bls.n	8003b24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b20:	2301      	movs	r3, #1
 8003b22:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b24:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <xTaskIncrementTick+0x16c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e004      	b.n	8003b3c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b32:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <xTaskIncrementTick+0x170>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3301      	adds	r3, #1
 8003b38:	4a0d      	ldr	r2, [pc, #52]	@ (8003b70 <xTaskIncrementTick+0x170>)
 8003b3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b3c:	697b      	ldr	r3, [r7, #20]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200005b0 	.word	0x200005b0
 8003b4c:	2000058c 	.word	0x2000058c
 8003b50:	20000540 	.word	0x20000540
 8003b54:	20000544 	.word	0x20000544
 8003b58:	200005a0 	.word	0x200005a0
 8003b5c:	200005a8 	.word	0x200005a8
 8003b60:	20000590 	.word	0x20000590
 8003b64:	2000048c 	.word	0x2000048c
 8003b68:	20000488 	.word	0x20000488
 8003b6c:	2000059c 	.word	0x2000059c
 8003b70:	20000598 	.word	0x20000598

08003b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b7a:	4b27      	ldr	r3, [pc, #156]	@ (8003c18 <vTaskSwitchContext+0xa4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b82:	4b26      	ldr	r3, [pc, #152]	@ (8003c1c <vTaskSwitchContext+0xa8>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b88:	e040      	b.n	8003c0c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003b8a:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <vTaskSwitchContext+0xa8>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b90:	4b23      	ldr	r3, [pc, #140]	@ (8003c20 <vTaskSwitchContext+0xac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b9e:	7afb      	ldrb	r3, [r7, #11]
 8003ba0:	f1c3 031f 	rsb	r3, r3, #31
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	491f      	ldr	r1, [pc, #124]	@ (8003c24 <vTaskSwitchContext+0xb0>)
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	607b      	str	r3, [r7, #4]
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	e7fd      	b.n	8003bce <vTaskSwitchContext+0x5a>
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4a11      	ldr	r2, [pc, #68]	@ (8003c24 <vTaskSwitchContext+0xb0>)
 8003bde:	4413      	add	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d104      	bne.n	8003c02 <vTaskSwitchContext+0x8e>
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a07      	ldr	r2, [pc, #28]	@ (8003c28 <vTaskSwitchContext+0xb4>)
 8003c0a:	6013      	str	r3, [r2, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	200005b0 	.word	0x200005b0
 8003c1c:	2000059c 	.word	0x2000059c
 8003c20:	20000590 	.word	0x20000590
 8003c24:	2000048c 	.word	0x2000048c
 8003c28:	20000488 	.word	0x20000488

08003c2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c34:	f000 f852 	bl	8003cdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c38:	4b06      	ldr	r3, [pc, #24]	@ (8003c54 <prvIdleTask+0x28>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d9f9      	bls.n	8003c34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c40:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <prvIdleTask+0x2c>)
 8003c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c50:	e7f0      	b.n	8003c34 <prvIdleTask+0x8>
 8003c52:	bf00      	nop
 8003c54:	2000048c 	.word	0x2000048c
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	e00c      	b.n	8003c82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4a12      	ldr	r2, [pc, #72]	@ (8003cbc <prvInitialiseTaskLists+0x60>)
 8003c74:	4413      	add	r3, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fb38 	bl	80032ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b06      	cmp	r3, #6
 8003c86:	d9ef      	bls.n	8003c68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c88:	480d      	ldr	r0, [pc, #52]	@ (8003cc0 <prvInitialiseTaskLists+0x64>)
 8003c8a:	f7ff fb2f 	bl	80032ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c8e:	480d      	ldr	r0, [pc, #52]	@ (8003cc4 <prvInitialiseTaskLists+0x68>)
 8003c90:	f7ff fb2c 	bl	80032ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c94:	480c      	ldr	r0, [pc, #48]	@ (8003cc8 <prvInitialiseTaskLists+0x6c>)
 8003c96:	f7ff fb29 	bl	80032ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c9a:	480c      	ldr	r0, [pc, #48]	@ (8003ccc <prvInitialiseTaskLists+0x70>)
 8003c9c:	f7ff fb26 	bl	80032ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ca0:	480b      	ldr	r0, [pc, #44]	@ (8003cd0 <prvInitialiseTaskLists+0x74>)
 8003ca2:	f7ff fb23 	bl	80032ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <prvInitialiseTaskLists+0x78>)
 8003ca8:	4a05      	ldr	r2, [pc, #20]	@ (8003cc0 <prvInitialiseTaskLists+0x64>)
 8003caa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003cac:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <prvInitialiseTaskLists+0x7c>)
 8003cae:	4a05      	ldr	r2, [pc, #20]	@ (8003cc4 <prvInitialiseTaskLists+0x68>)
 8003cb0:	601a      	str	r2, [r3, #0]
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	2000048c 	.word	0x2000048c
 8003cc0:	20000518 	.word	0x20000518
 8003cc4:	2000052c 	.word	0x2000052c
 8003cc8:	20000548 	.word	0x20000548
 8003ccc:	2000055c 	.word	0x2000055c
 8003cd0:	20000574 	.word	0x20000574
 8003cd4:	20000540 	.word	0x20000540
 8003cd8:	20000544 	.word	0x20000544

08003cdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ce2:	e019      	b.n	8003d18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ce4:	f000 f9ea 	bl	80040bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ce8:	4b10      	ldr	r3, [pc, #64]	@ (8003d2c <prvCheckTasksWaitingTermination+0x50>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fb7f 	bl	80033f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003d30 <prvCheckTasksWaitingTermination+0x54>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	4a0b      	ldr	r2, [pc, #44]	@ (8003d30 <prvCheckTasksWaitingTermination+0x54>)
 8003d02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d04:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <prvCheckTasksWaitingTermination+0x58>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d34 <prvCheckTasksWaitingTermination+0x58>)
 8003d0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d0e:	f000 fa05 	bl	800411c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f810 	bl	8003d38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d18:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <prvCheckTasksWaitingTermination+0x58>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1e1      	bne.n	8003ce4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d20:	bf00      	nop
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	2000055c 	.word	0x2000055c
 8003d30:	20000588 	.word	0x20000588
 8003d34:	20000570 	.word	0x20000570

08003d38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d108      	bne.n	8003d5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fb44 	bl	80043dc <vPortFree>
				vPortFree( pxTCB );
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fb41 	bl	80043dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d5a:	e019      	b.n	8003d90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d103      	bne.n	8003d6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb38 	bl	80043dc <vPortFree>
	}
 8003d6c:	e010      	b.n	8003d90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d00b      	beq.n	8003d90 <prvDeleteTCB+0x58>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	60fb      	str	r3, [r7, #12]
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <prvDeleteTCB+0x54>
	}
 8003d90:	bf00      	nop
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <prvResetNextTaskUnblockTime+0x38>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003da8:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <prvResetNextTaskUnblockTime+0x3c>)
 8003daa:	f04f 32ff 	mov.w	r2, #4294967295
 8003dae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003db0:	e008      	b.n	8003dc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db2:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <prvResetNextTaskUnblockTime+0x38>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a04      	ldr	r2, [pc, #16]	@ (8003dd4 <prvResetNextTaskUnblockTime+0x3c>)
 8003dc2:	6013      	str	r3, [r2, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000540 	.word	0x20000540
 8003dd4:	200005a8 	.word	0x200005a8

08003dd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <xTaskGetSchedulerState+0x34>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003de6:	2301      	movs	r3, #1
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	e008      	b.n	8003dfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dec:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <xTaskGetSchedulerState+0x38>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d102      	bne.n	8003dfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003df4:	2302      	movs	r3, #2
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	e001      	b.n	8003dfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dfe:	687b      	ldr	r3, [r7, #4]
	}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000594 	.word	0x20000594
 8003e10:	200005b0 	.word	0x200005b0

08003e14 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e1e:	4b29      	ldr	r3, [pc, #164]	@ (8003ec4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e24:	4b28      	ldr	r3, [pc, #160]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff fae4 	bl	80033f8 <uxListRemove>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43da      	mvns	r2, r3
 8003e44:	4b21      	ldr	r3, [pc, #132]	@ (8003ecc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	4a20      	ldr	r2, [pc, #128]	@ (8003ecc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e4c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d10a      	bne.n	8003e6c <prvAddCurrentTaskToDelayedList+0x58>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4619      	mov	r1, r3
 8003e64:	481a      	ldr	r0, [pc, #104]	@ (8003ed0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e66:	f7ff fa6c 	bl	8003342 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e6a:	e026      	b.n	8003eba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e74:	4b14      	ldr	r3, [pc, #80]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d209      	bcs.n	8003e98 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e84:	4b13      	ldr	r3, [pc, #76]	@ (8003ed4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f7ff fa79 	bl	8003388 <vListInsert>
}
 8003e96:	e010      	b.n	8003eba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7ff fa6f 	bl	8003388 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d202      	bcs.n	8003eba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003eb4:	4a09      	ldr	r2, [pc, #36]	@ (8003edc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6013      	str	r3, [r2, #0]
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	2000058c 	.word	0x2000058c
 8003ec8:	20000488 	.word	0x20000488
 8003ecc:	20000590 	.word	0x20000590
 8003ed0:	20000574 	.word	0x20000574
 8003ed4:	20000544 	.word	0x20000544
 8003ed8:	20000540 	.word	0x20000540
 8003edc:	200005a8 	.word	0x200005a8

08003ee0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3b04      	subs	r3, #4
 8003ef0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3b04      	subs	r3, #4
 8003efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f023 0201 	bic.w	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3b04      	subs	r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f10:	4a08      	ldr	r2, [pc, #32]	@ (8003f34 <pxPortInitialiseStack+0x54>)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3b14      	subs	r3, #20
 8003f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3b20      	subs	r3, #32
 8003f26:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f28:	68fb      	ldr	r3, [r7, #12]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	08003f39 	.word	0x08003f39

08003f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f42:	4b12      	ldr	r3, [pc, #72]	@ (8003f8c <prvTaskExitError+0x54>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4a:	d00b      	beq.n	8003f64 <prvTaskExitError+0x2c>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	60fb      	str	r3, [r7, #12]
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <prvTaskExitError+0x28>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	60bb      	str	r3, [r7, #8]
}
 8003f76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f78:	bf00      	nop
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0fc      	beq.n	8003f7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	2000000c 	.word	0x2000000c

08003f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f90:	4b07      	ldr	r3, [pc, #28]	@ (8003fb0 <pxCurrentTCBConst2>)
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	6808      	ldr	r0, [r1, #0]
 8003f96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003f9a:	f380 8809 	msr	PSP, r0
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f04f 0000 	mov.w	r0, #0
 8003fa6:	f380 8811 	msr	BASEPRI, r0
 8003faa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003fae:	4770      	bx	lr

08003fb0 <pxCurrentTCBConst2>:
 8003fb0:	20000488 	.word	0x20000488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop

08003fb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003fb8:	4806      	ldr	r0, [pc, #24]	@ (8003fd4 <prvPortStartFirstTask+0x1c>)
 8003fba:	6800      	ldr	r0, [r0, #0]
 8003fbc:	6800      	ldr	r0, [r0, #0]
 8003fbe:	f380 8808 	msr	MSP, r0
 8003fc2:	b662      	cpsie	i
 8003fc4:	b661      	cpsie	f
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	df00      	svc	0
 8003fd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003fd2:	bf00      	nop
 8003fd4:	e000ed08 	.word	0xe000ed08

08003fd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fde:	4b32      	ldr	r3, [pc, #200]	@ (80040a8 <xPortStartScheduler+0xd0>)
 8003fe0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	22ff      	movs	r2, #255	@ 0xff
 8003fee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004000:	b2da      	uxtb	r2, r3
 8004002:	4b2a      	ldr	r3, [pc, #168]	@ (80040ac <xPortStartScheduler+0xd4>)
 8004004:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004006:	4b2a      	ldr	r3, [pc, #168]	@ (80040b0 <xPortStartScheduler+0xd8>)
 8004008:	2207      	movs	r2, #7
 800400a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800400c:	e009      	b.n	8004022 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800400e:	4b28      	ldr	r3, [pc, #160]	@ (80040b0 <xPortStartScheduler+0xd8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3b01      	subs	r3, #1
 8004014:	4a26      	ldr	r2, [pc, #152]	@ (80040b0 <xPortStartScheduler+0xd8>)
 8004016:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	b2db      	uxtb	r3, r3
 8004020:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402a:	2b80      	cmp	r3, #128	@ 0x80
 800402c:	d0ef      	beq.n	800400e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800402e:	4b20      	ldr	r3, [pc, #128]	@ (80040b0 <xPortStartScheduler+0xd8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1c3 0307 	rsb	r3, r3, #7
 8004036:	2b04      	cmp	r3, #4
 8004038:	d00b      	beq.n	8004052 <xPortStartScheduler+0x7a>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	60bb      	str	r3, [r7, #8]
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	e7fd      	b.n	800404e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004052:	4b17      	ldr	r3, [pc, #92]	@ (80040b0 <xPortStartScheduler+0xd8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	4a15      	ldr	r2, [pc, #84]	@ (80040b0 <xPortStartScheduler+0xd8>)
 800405a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800405c:	4b14      	ldr	r3, [pc, #80]	@ (80040b0 <xPortStartScheduler+0xd8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004064:	4a12      	ldr	r2, [pc, #72]	@ (80040b0 <xPortStartScheduler+0xd8>)
 8004066:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004070:	4b10      	ldr	r3, [pc, #64]	@ (80040b4 <xPortStartScheduler+0xdc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a0f      	ldr	r2, [pc, #60]	@ (80040b4 <xPortStartScheduler+0xdc>)
 8004076:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800407a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800407c:	4b0d      	ldr	r3, [pc, #52]	@ (80040b4 <xPortStartScheduler+0xdc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0c      	ldr	r2, [pc, #48]	@ (80040b4 <xPortStartScheduler+0xdc>)
 8004082:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004086:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004088:	f000 f8b8 	bl	80041fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800408c:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <xPortStartScheduler+0xe0>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004092:	f7ff ff91 	bl	8003fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004096:	f7ff fd6d 	bl	8003b74 <vTaskSwitchContext>
	prvTaskExitError();
 800409a:	f7ff ff4d 	bl	8003f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	e000e400 	.word	0xe000e400
 80040ac:	200005b4 	.word	0x200005b4
 80040b0:	200005b8 	.word	0x200005b8
 80040b4:	e000ed20 	.word	0xe000ed20
 80040b8:	2000000c 	.word	0x2000000c

080040bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
	__asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	607b      	str	r3, [r7, #4]
}
 80040d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <vPortEnterCritical+0x58>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3301      	adds	r3, #1
 80040dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004114 <vPortEnterCritical+0x58>)
 80040de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <vPortEnterCritical+0x58>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d110      	bne.n	800410a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <vPortEnterCritical+0x5c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <vPortEnterCritical+0x4e>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	603b      	str	r3, [r7, #0]
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	e7fd      	b.n	8004106 <vPortEnterCritical+0x4a>
	}
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	2000000c 	.word	0x2000000c
 8004118:	e000ed04 	.word	0xe000ed04

0800411c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004122:	4b12      	ldr	r3, [pc, #72]	@ (800416c <vPortExitCritical+0x50>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <vPortExitCritical+0x26>
	__asm volatile
 800412a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800412e:	f383 8811 	msr	BASEPRI, r3
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	607b      	str	r3, [r7, #4]
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	e7fd      	b.n	800413e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <vPortExitCritical+0x50>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3b01      	subs	r3, #1
 8004148:	4a08      	ldr	r2, [pc, #32]	@ (800416c <vPortExitCritical+0x50>)
 800414a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800414c:	4b07      	ldr	r3, [pc, #28]	@ (800416c <vPortExitCritical+0x50>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <vPortExitCritical+0x44>
 8004154:	2300      	movs	r3, #0
 8004156:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800415e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	2000000c 	.word	0x2000000c

08004170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004170:	f3ef 8009 	mrs	r0, PSP
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	4b0d      	ldr	r3, [pc, #52]	@ (80041b0 <pxCurrentTCBConst>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004180:	6010      	str	r0, [r2, #0]
 8004182:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004186:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800418a:	f380 8811 	msr	BASEPRI, r0
 800418e:	f7ff fcf1 	bl	8003b74 <vTaskSwitchContext>
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	6808      	ldr	r0, [r1, #0]
 80041a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041a6:	f380 8809 	msr	PSP, r0
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	4770      	bx	lr

080041b0 <pxCurrentTCBConst>:
 80041b0:	20000488 	.word	0x20000488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop

080041b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	607b      	str	r3, [r7, #4]
}
 80041d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041d2:	f7ff fc15 	bl	8003a00 <xTaskIncrementTick>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041dc:	4b06      	ldr	r3, [pc, #24]	@ (80041f8 <xPortSysTickHandler+0x40>)
 80041de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	2300      	movs	r3, #0
 80041e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f383 8811 	msr	BASEPRI, r3
}
 80041ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004200:	4b0a      	ldr	r3, [pc, #40]	@ (800422c <vPortSetupTimerInterrupt+0x30>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004206:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <vPortSetupTimerInterrupt+0x34>)
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <vPortSetupTimerInterrupt+0x38>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a09      	ldr	r2, [pc, #36]	@ (8004238 <vPortSetupTimerInterrupt+0x3c>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	099b      	lsrs	r3, r3, #6
 8004218:	4a08      	ldr	r2, [pc, #32]	@ (800423c <vPortSetupTimerInterrupt+0x40>)
 800421a:	3b01      	subs	r3, #1
 800421c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800421e:	4b03      	ldr	r3, [pc, #12]	@ (800422c <vPortSetupTimerInterrupt+0x30>)
 8004220:	2207      	movs	r2, #7
 8004222:	601a      	str	r2, [r3, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	e000e010 	.word	0xe000e010
 8004230:	e000e018 	.word	0xe000e018
 8004234:	20000000 	.word	0x20000000
 8004238:	10624dd3 	.word	0x10624dd3
 800423c:	e000e014 	.word	0xe000e014

08004240 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	@ 0x28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800424c:	f7ff fb2c 	bl	80038a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004250:	4b5c      	ldr	r3, [pc, #368]	@ (80043c4 <pvPortMalloc+0x184>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004258:	f000 f924 	bl	80044a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800425c:	4b5a      	ldr	r3, [pc, #360]	@ (80043c8 <pvPortMalloc+0x188>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 8095 	bne.w	8004394 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01e      	beq.n	80042ae <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004270:	2208      	movs	r2, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	2b00      	cmp	r3, #0
 8004280:	d015      	beq.n	80042ae <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f023 0307 	bic.w	r3, r3, #7
 8004288:	3308      	adds	r3, #8
 800428a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <pvPortMalloc+0x6e>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	617b      	str	r3, [r7, #20]
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	e7fd      	b.n	80042aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d06f      	beq.n	8004394 <pvPortMalloc+0x154>
 80042b4:	4b45      	ldr	r3, [pc, #276]	@ (80043cc <pvPortMalloc+0x18c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d86a      	bhi.n	8004394 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80042be:	4b44      	ldr	r3, [pc, #272]	@ (80043d0 <pvPortMalloc+0x190>)
 80042c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80042c2:	4b43      	ldr	r3, [pc, #268]	@ (80043d0 <pvPortMalloc+0x190>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042c8:	e004      	b.n	80042d4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d903      	bls.n	80042e6 <pvPortMalloc+0xa6>
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f1      	bne.n	80042ca <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80042e6:	4b37      	ldr	r3, [pc, #220]	@ (80043c4 <pvPortMalloc+0x184>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d051      	beq.n	8004394 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2208      	movs	r2, #8
 80042f6:	4413      	add	r3, r2
 80042f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	1ad2      	subs	r2, r2, r3
 800430a:	2308      	movs	r3, #8
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	429a      	cmp	r2, r3
 8004310:	d920      	bls.n	8004354 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4413      	add	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00b      	beq.n	800433c <pvPortMalloc+0xfc>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	613b      	str	r3, [r7, #16]
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	1ad2      	subs	r2, r2, r3
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800434e:	69b8      	ldr	r0, [r7, #24]
 8004350:	f000 f90a 	bl	8004568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004354:	4b1d      	ldr	r3, [pc, #116]	@ (80043cc <pvPortMalloc+0x18c>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	4a1b      	ldr	r2, [pc, #108]	@ (80043cc <pvPortMalloc+0x18c>)
 8004360:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004362:	4b1a      	ldr	r3, [pc, #104]	@ (80043cc <pvPortMalloc+0x18c>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b1b      	ldr	r3, [pc, #108]	@ (80043d4 <pvPortMalloc+0x194>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d203      	bcs.n	8004376 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800436e:	4b17      	ldr	r3, [pc, #92]	@ (80043cc <pvPortMalloc+0x18c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a18      	ldr	r2, [pc, #96]	@ (80043d4 <pvPortMalloc+0x194>)
 8004374:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	4b13      	ldr	r3, [pc, #76]	@ (80043c8 <pvPortMalloc+0x188>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	431a      	orrs	r2, r3
 8004380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004382:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800438a:	4b13      	ldr	r3, [pc, #76]	@ (80043d8 <pvPortMalloc+0x198>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	4a11      	ldr	r2, [pc, #68]	@ (80043d8 <pvPortMalloc+0x198>)
 8004392:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004394:	f7ff fa96 	bl	80038c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <pvPortMalloc+0x17a>
	__asm volatile
 80043a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	60fb      	str	r3, [r7, #12]
}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	e7fd      	b.n	80043b6 <pvPortMalloc+0x176>
	return pvReturn;
 80043ba:	69fb      	ldr	r3, [r7, #28]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3728      	adds	r7, #40	@ 0x28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200011c4 	.word	0x200011c4
 80043c8:	200011d8 	.word	0x200011d8
 80043cc:	200011c8 	.word	0x200011c8
 80043d0:	200011bc 	.word	0x200011bc
 80043d4:	200011cc 	.word	0x200011cc
 80043d8:	200011d0 	.word	0x200011d0

080043dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d04f      	beq.n	800448e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80043ee:	2308      	movs	r3, #8
 80043f0:	425b      	negs	r3, r3
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4413      	add	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	4b25      	ldr	r3, [pc, #148]	@ (8004498 <vPortFree+0xbc>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <vPortFree+0x46>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440e:	f383 8811 	msr	BASEPRI, r3
 8004412:	f3bf 8f6f 	isb	sy
 8004416:	f3bf 8f4f 	dsb	sy
 800441a:	60fb      	str	r3, [r7, #12]
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	e7fd      	b.n	800441e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <vPortFree+0x66>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	60bb      	str	r3, [r7, #8]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	685a      	ldr	r2, [r3, #4]
 8004446:	4b14      	ldr	r3, [pc, #80]	@ (8004498 <vPortFree+0xbc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01e      	beq.n	800448e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11a      	bne.n	800448e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	4b0e      	ldr	r3, [pc, #56]	@ (8004498 <vPortFree+0xbc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	43db      	mvns	r3, r3
 8004462:	401a      	ands	r2, r3
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004468:	f7ff fa1e 	bl	80038a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	4b0a      	ldr	r3, [pc, #40]	@ (800449c <vPortFree+0xc0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4413      	add	r3, r2
 8004476:	4a09      	ldr	r2, [pc, #36]	@ (800449c <vPortFree+0xc0>)
 8004478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800447a:	6938      	ldr	r0, [r7, #16]
 800447c:	f000 f874 	bl	8004568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004480:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <vPortFree+0xc4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	4a06      	ldr	r2, [pc, #24]	@ (80044a0 <vPortFree+0xc4>)
 8004488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800448a:	f7ff fa1b 	bl	80038c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800448e:	bf00      	nop
 8004490:	3718      	adds	r7, #24
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	200011d8 	.word	0x200011d8
 800449c:	200011c8 	.word	0x200011c8
 80044a0:	200011d4 	.word	0x200011d4

080044a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80044ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80044b0:	4b27      	ldr	r3, [pc, #156]	@ (8004550 <prvHeapInit+0xac>)
 80044b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3307      	adds	r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0307 	bic.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	4a1f      	ldr	r2, [pc, #124]	@ (8004550 <prvHeapInit+0xac>)
 80044d4:	4413      	add	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80044dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <prvHeapInit+0xb0>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80044e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004554 <prvHeapInit+0xb0>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	4413      	add	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80044f0:	2208      	movs	r2, #8
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0307 	bic.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4a15      	ldr	r2, [pc, #84]	@ (8004558 <prvHeapInit+0xb4>)
 8004504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004506:	4b14      	ldr	r3, [pc, #80]	@ (8004558 <prvHeapInit+0xb4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800450e:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <prvHeapInit+0xb4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	1ad2      	subs	r2, r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <prvHeapInit+0xb4>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <prvHeapInit+0xb8>)
 8004532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <prvHeapInit+0xbc>)
 800453a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800453c:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <prvHeapInit+0xc0>)
 800453e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	200005bc 	.word	0x200005bc
 8004554:	200011bc 	.word	0x200011bc
 8004558:	200011c4 	.word	0x200011c4
 800455c:	200011cc 	.word	0x200011cc
 8004560:	200011c8 	.word	0x200011c8
 8004564:	200011d8 	.word	0x200011d8

08004568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004570:	4b27      	ldr	r3, [pc, #156]	@ (8004610 <prvInsertBlockIntoFreeList+0xa8>)
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e002      	b.n	800457c <prvInsertBlockIntoFreeList+0x14>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	429a      	cmp	r2, r3
 8004584:	d8f7      	bhi.n	8004576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4413      	add	r3, r2
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	429a      	cmp	r2, r3
 8004596:	d108      	bne.n	80045aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	441a      	add	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	441a      	add	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d118      	bne.n	80045f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <prvInsertBlockIntoFreeList+0xac>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d00d      	beq.n	80045e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	e008      	b.n	80045f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80045e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <prvInsertBlockIntoFreeList+0xac>)
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	e003      	b.n	80045f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d002      	beq.n	8004606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	200011bc 	.word	0x200011bc
 8004614:	200011c4 	.word	0x200011c4

08004618 <siprintf>:
 8004618:	b40e      	push	{r1, r2, r3}
 800461a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800461e:	b510      	push	{r4, lr}
 8004620:	2400      	movs	r4, #0
 8004622:	b09d      	sub	sp, #116	@ 0x74
 8004624:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004626:	9002      	str	r0, [sp, #8]
 8004628:	9006      	str	r0, [sp, #24]
 800462a:	9107      	str	r1, [sp, #28]
 800462c:	9104      	str	r1, [sp, #16]
 800462e:	4809      	ldr	r0, [pc, #36]	@ (8004654 <siprintf+0x3c>)
 8004630:	4909      	ldr	r1, [pc, #36]	@ (8004658 <siprintf+0x40>)
 8004632:	f853 2b04 	ldr.w	r2, [r3], #4
 8004636:	9105      	str	r1, [sp, #20]
 8004638:	6800      	ldr	r0, [r0, #0]
 800463a:	a902      	add	r1, sp, #8
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004640:	f000 f9a0 	bl	8004984 <_svfiprintf_r>
 8004644:	9b02      	ldr	r3, [sp, #8]
 8004646:	701c      	strb	r4, [r3, #0]
 8004648:	b01d      	add	sp, #116	@ 0x74
 800464a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800464e:	b003      	add	sp, #12
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000010 	.word	0x20000010
 8004658:	ffff0208 	.word	0xffff0208

0800465c <memset>:
 800465c:	4603      	mov	r3, r0
 800465e:	4402      	add	r2, r0
 8004660:	4293      	cmp	r3, r2
 8004662:	d100      	bne.n	8004666 <memset+0xa>
 8004664:	4770      	bx	lr
 8004666:	f803 1b01 	strb.w	r1, [r3], #1
 800466a:	e7f9      	b.n	8004660 <memset+0x4>

0800466c <__errno>:
 800466c:	4b01      	ldr	r3, [pc, #4]	@ (8004674 <__errno+0x8>)
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	20000010 	.word	0x20000010

08004678 <__libc_init_array>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	2600      	movs	r6, #0
 800467c:	4d0c      	ldr	r5, [pc, #48]	@ (80046b0 <__libc_init_array+0x38>)
 800467e:	4c0d      	ldr	r4, [pc, #52]	@ (80046b4 <__libc_init_array+0x3c>)
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	42a6      	cmp	r6, r4
 8004686:	d109      	bne.n	800469c <__libc_init_array+0x24>
 8004688:	f000 fc76 	bl	8004f78 <_init>
 800468c:	2600      	movs	r6, #0
 800468e:	4d0a      	ldr	r5, [pc, #40]	@ (80046b8 <__libc_init_array+0x40>)
 8004690:	4c0a      	ldr	r4, [pc, #40]	@ (80046bc <__libc_init_array+0x44>)
 8004692:	1b64      	subs	r4, r4, r5
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	42a6      	cmp	r6, r4
 8004698:	d105      	bne.n	80046a6 <__libc_init_array+0x2e>
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a0:	4798      	blx	r3
 80046a2:	3601      	adds	r6, #1
 80046a4:	e7ee      	b.n	8004684 <__libc_init_array+0xc>
 80046a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046aa:	4798      	blx	r3
 80046ac:	3601      	adds	r6, #1
 80046ae:	e7f2      	b.n	8004696 <__libc_init_array+0x1e>
 80046b0:	080050fc 	.word	0x080050fc
 80046b4:	080050fc 	.word	0x080050fc
 80046b8:	080050fc 	.word	0x080050fc
 80046bc:	08005100 	.word	0x08005100

080046c0 <__retarget_lock_acquire_recursive>:
 80046c0:	4770      	bx	lr

080046c2 <__retarget_lock_release_recursive>:
 80046c2:	4770      	bx	lr

080046c4 <memcpy>:
 80046c4:	440a      	add	r2, r1
 80046c6:	4291      	cmp	r1, r2
 80046c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80046cc:	d100      	bne.n	80046d0 <memcpy+0xc>
 80046ce:	4770      	bx	lr
 80046d0:	b510      	push	{r4, lr}
 80046d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d6:	4291      	cmp	r1, r2
 80046d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046dc:	d1f9      	bne.n	80046d2 <memcpy+0xe>
 80046de:	bd10      	pop	{r4, pc}

080046e0 <_free_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4605      	mov	r5, r0
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d040      	beq.n	800476a <_free_r+0x8a>
 80046e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ec:	1f0c      	subs	r4, r1, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfb8      	it	lt
 80046f2:	18e4      	addlt	r4, r4, r3
 80046f4:	f000 f8de 	bl	80048b4 <__malloc_lock>
 80046f8:	4a1c      	ldr	r2, [pc, #112]	@ (800476c <_free_r+0x8c>)
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	b933      	cbnz	r3, 800470c <_free_r+0x2c>
 80046fe:	6063      	str	r3, [r4, #4]
 8004700:	6014      	str	r4, [r2, #0]
 8004702:	4628      	mov	r0, r5
 8004704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004708:	f000 b8da 	b.w	80048c0 <__malloc_unlock>
 800470c:	42a3      	cmp	r3, r4
 800470e:	d908      	bls.n	8004722 <_free_r+0x42>
 8004710:	6820      	ldr	r0, [r4, #0]
 8004712:	1821      	adds	r1, r4, r0
 8004714:	428b      	cmp	r3, r1
 8004716:	bf01      	itttt	eq
 8004718:	6819      	ldreq	r1, [r3, #0]
 800471a:	685b      	ldreq	r3, [r3, #4]
 800471c:	1809      	addeq	r1, r1, r0
 800471e:	6021      	streq	r1, [r4, #0]
 8004720:	e7ed      	b.n	80046fe <_free_r+0x1e>
 8004722:	461a      	mov	r2, r3
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	b10b      	cbz	r3, 800472c <_free_r+0x4c>
 8004728:	42a3      	cmp	r3, r4
 800472a:	d9fa      	bls.n	8004722 <_free_r+0x42>
 800472c:	6811      	ldr	r1, [r2, #0]
 800472e:	1850      	adds	r0, r2, r1
 8004730:	42a0      	cmp	r0, r4
 8004732:	d10b      	bne.n	800474c <_free_r+0x6c>
 8004734:	6820      	ldr	r0, [r4, #0]
 8004736:	4401      	add	r1, r0
 8004738:	1850      	adds	r0, r2, r1
 800473a:	4283      	cmp	r3, r0
 800473c:	6011      	str	r1, [r2, #0]
 800473e:	d1e0      	bne.n	8004702 <_free_r+0x22>
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4408      	add	r0, r1
 8004746:	6010      	str	r0, [r2, #0]
 8004748:	6053      	str	r3, [r2, #4]
 800474a:	e7da      	b.n	8004702 <_free_r+0x22>
 800474c:	d902      	bls.n	8004754 <_free_r+0x74>
 800474e:	230c      	movs	r3, #12
 8004750:	602b      	str	r3, [r5, #0]
 8004752:	e7d6      	b.n	8004702 <_free_r+0x22>
 8004754:	6820      	ldr	r0, [r4, #0]
 8004756:	1821      	adds	r1, r4, r0
 8004758:	428b      	cmp	r3, r1
 800475a:	bf01      	itttt	eq
 800475c:	6819      	ldreq	r1, [r3, #0]
 800475e:	685b      	ldreq	r3, [r3, #4]
 8004760:	1809      	addeq	r1, r1, r0
 8004762:	6021      	streq	r1, [r4, #0]
 8004764:	6063      	str	r3, [r4, #4]
 8004766:	6054      	str	r4, [r2, #4]
 8004768:	e7cb      	b.n	8004702 <_free_r+0x22>
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	20001320 	.word	0x20001320

08004770 <sbrk_aligned>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	4e0f      	ldr	r6, [pc, #60]	@ (80047b0 <sbrk_aligned+0x40>)
 8004774:	460c      	mov	r4, r1
 8004776:	6831      	ldr	r1, [r6, #0]
 8004778:	4605      	mov	r5, r0
 800477a:	b911      	cbnz	r1, 8004782 <sbrk_aligned+0x12>
 800477c:	f000 fba8 	bl	8004ed0 <_sbrk_r>
 8004780:	6030      	str	r0, [r6, #0]
 8004782:	4621      	mov	r1, r4
 8004784:	4628      	mov	r0, r5
 8004786:	f000 fba3 	bl	8004ed0 <_sbrk_r>
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	d103      	bne.n	8004796 <sbrk_aligned+0x26>
 800478e:	f04f 34ff 	mov.w	r4, #4294967295
 8004792:	4620      	mov	r0, r4
 8004794:	bd70      	pop	{r4, r5, r6, pc}
 8004796:	1cc4      	adds	r4, r0, #3
 8004798:	f024 0403 	bic.w	r4, r4, #3
 800479c:	42a0      	cmp	r0, r4
 800479e:	d0f8      	beq.n	8004792 <sbrk_aligned+0x22>
 80047a0:	1a21      	subs	r1, r4, r0
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 fb94 	bl	8004ed0 <_sbrk_r>
 80047a8:	3001      	adds	r0, #1
 80047aa:	d1f2      	bne.n	8004792 <sbrk_aligned+0x22>
 80047ac:	e7ef      	b.n	800478e <sbrk_aligned+0x1e>
 80047ae:	bf00      	nop
 80047b0:	2000131c 	.word	0x2000131c

080047b4 <_malloc_r>:
 80047b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b8:	1ccd      	adds	r5, r1, #3
 80047ba:	f025 0503 	bic.w	r5, r5, #3
 80047be:	3508      	adds	r5, #8
 80047c0:	2d0c      	cmp	r5, #12
 80047c2:	bf38      	it	cc
 80047c4:	250c      	movcc	r5, #12
 80047c6:	2d00      	cmp	r5, #0
 80047c8:	4606      	mov	r6, r0
 80047ca:	db01      	blt.n	80047d0 <_malloc_r+0x1c>
 80047cc:	42a9      	cmp	r1, r5
 80047ce:	d904      	bls.n	80047da <_malloc_r+0x26>
 80047d0:	230c      	movs	r3, #12
 80047d2:	6033      	str	r3, [r6, #0]
 80047d4:	2000      	movs	r0, #0
 80047d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048b0 <_malloc_r+0xfc>
 80047de:	f000 f869 	bl	80048b4 <__malloc_lock>
 80047e2:	f8d8 3000 	ldr.w	r3, [r8]
 80047e6:	461c      	mov	r4, r3
 80047e8:	bb44      	cbnz	r4, 800483c <_malloc_r+0x88>
 80047ea:	4629      	mov	r1, r5
 80047ec:	4630      	mov	r0, r6
 80047ee:	f7ff ffbf 	bl	8004770 <sbrk_aligned>
 80047f2:	1c43      	adds	r3, r0, #1
 80047f4:	4604      	mov	r4, r0
 80047f6:	d158      	bne.n	80048aa <_malloc_r+0xf6>
 80047f8:	f8d8 4000 	ldr.w	r4, [r8]
 80047fc:	4627      	mov	r7, r4
 80047fe:	2f00      	cmp	r7, #0
 8004800:	d143      	bne.n	800488a <_malloc_r+0xd6>
 8004802:	2c00      	cmp	r4, #0
 8004804:	d04b      	beq.n	800489e <_malloc_r+0xea>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	4639      	mov	r1, r7
 800480a:	4630      	mov	r0, r6
 800480c:	eb04 0903 	add.w	r9, r4, r3
 8004810:	f000 fb5e 	bl	8004ed0 <_sbrk_r>
 8004814:	4581      	cmp	r9, r0
 8004816:	d142      	bne.n	800489e <_malloc_r+0xea>
 8004818:	6821      	ldr	r1, [r4, #0]
 800481a:	4630      	mov	r0, r6
 800481c:	1a6d      	subs	r5, r5, r1
 800481e:	4629      	mov	r1, r5
 8004820:	f7ff ffa6 	bl	8004770 <sbrk_aligned>
 8004824:	3001      	adds	r0, #1
 8004826:	d03a      	beq.n	800489e <_malloc_r+0xea>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	442b      	add	r3, r5
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	f8d8 3000 	ldr.w	r3, [r8]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	bb62      	cbnz	r2, 8004890 <_malloc_r+0xdc>
 8004836:	f8c8 7000 	str.w	r7, [r8]
 800483a:	e00f      	b.n	800485c <_malloc_r+0xa8>
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	1b52      	subs	r2, r2, r5
 8004840:	d420      	bmi.n	8004884 <_malloc_r+0xd0>
 8004842:	2a0b      	cmp	r2, #11
 8004844:	d917      	bls.n	8004876 <_malloc_r+0xc2>
 8004846:	1961      	adds	r1, r4, r5
 8004848:	42a3      	cmp	r3, r4
 800484a:	6025      	str	r5, [r4, #0]
 800484c:	bf18      	it	ne
 800484e:	6059      	strne	r1, [r3, #4]
 8004850:	6863      	ldr	r3, [r4, #4]
 8004852:	bf08      	it	eq
 8004854:	f8c8 1000 	streq.w	r1, [r8]
 8004858:	5162      	str	r2, [r4, r5]
 800485a:	604b      	str	r3, [r1, #4]
 800485c:	4630      	mov	r0, r6
 800485e:	f000 f82f 	bl	80048c0 <__malloc_unlock>
 8004862:	f104 000b 	add.w	r0, r4, #11
 8004866:	1d23      	adds	r3, r4, #4
 8004868:	f020 0007 	bic.w	r0, r0, #7
 800486c:	1ac2      	subs	r2, r0, r3
 800486e:	bf1c      	itt	ne
 8004870:	1a1b      	subne	r3, r3, r0
 8004872:	50a3      	strne	r3, [r4, r2]
 8004874:	e7af      	b.n	80047d6 <_malloc_r+0x22>
 8004876:	6862      	ldr	r2, [r4, #4]
 8004878:	42a3      	cmp	r3, r4
 800487a:	bf0c      	ite	eq
 800487c:	f8c8 2000 	streq.w	r2, [r8]
 8004880:	605a      	strne	r2, [r3, #4]
 8004882:	e7eb      	b.n	800485c <_malloc_r+0xa8>
 8004884:	4623      	mov	r3, r4
 8004886:	6864      	ldr	r4, [r4, #4]
 8004888:	e7ae      	b.n	80047e8 <_malloc_r+0x34>
 800488a:	463c      	mov	r4, r7
 800488c:	687f      	ldr	r7, [r7, #4]
 800488e:	e7b6      	b.n	80047fe <_malloc_r+0x4a>
 8004890:	461a      	mov	r2, r3
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	42a3      	cmp	r3, r4
 8004896:	d1fb      	bne.n	8004890 <_malloc_r+0xdc>
 8004898:	2300      	movs	r3, #0
 800489a:	6053      	str	r3, [r2, #4]
 800489c:	e7de      	b.n	800485c <_malloc_r+0xa8>
 800489e:	230c      	movs	r3, #12
 80048a0:	4630      	mov	r0, r6
 80048a2:	6033      	str	r3, [r6, #0]
 80048a4:	f000 f80c 	bl	80048c0 <__malloc_unlock>
 80048a8:	e794      	b.n	80047d4 <_malloc_r+0x20>
 80048aa:	6005      	str	r5, [r0, #0]
 80048ac:	e7d6      	b.n	800485c <_malloc_r+0xa8>
 80048ae:	bf00      	nop
 80048b0:	20001320 	.word	0x20001320

080048b4 <__malloc_lock>:
 80048b4:	4801      	ldr	r0, [pc, #4]	@ (80048bc <__malloc_lock+0x8>)
 80048b6:	f7ff bf03 	b.w	80046c0 <__retarget_lock_acquire_recursive>
 80048ba:	bf00      	nop
 80048bc:	20001318 	.word	0x20001318

080048c0 <__malloc_unlock>:
 80048c0:	4801      	ldr	r0, [pc, #4]	@ (80048c8 <__malloc_unlock+0x8>)
 80048c2:	f7ff befe 	b.w	80046c2 <__retarget_lock_release_recursive>
 80048c6:	bf00      	nop
 80048c8:	20001318 	.word	0x20001318

080048cc <__ssputs_r>:
 80048cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	461f      	mov	r7, r3
 80048d2:	688e      	ldr	r6, [r1, #8]
 80048d4:	4682      	mov	sl, r0
 80048d6:	42be      	cmp	r6, r7
 80048d8:	460c      	mov	r4, r1
 80048da:	4690      	mov	r8, r2
 80048dc:	680b      	ldr	r3, [r1, #0]
 80048de:	d82d      	bhi.n	800493c <__ssputs_r+0x70>
 80048e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048e8:	d026      	beq.n	8004938 <__ssputs_r+0x6c>
 80048ea:	6965      	ldr	r5, [r4, #20]
 80048ec:	6909      	ldr	r1, [r1, #16]
 80048ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048f2:	eba3 0901 	sub.w	r9, r3, r1
 80048f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048fa:	1c7b      	adds	r3, r7, #1
 80048fc:	444b      	add	r3, r9
 80048fe:	106d      	asrs	r5, r5, #1
 8004900:	429d      	cmp	r5, r3
 8004902:	bf38      	it	cc
 8004904:	461d      	movcc	r5, r3
 8004906:	0553      	lsls	r3, r2, #21
 8004908:	d527      	bpl.n	800495a <__ssputs_r+0x8e>
 800490a:	4629      	mov	r1, r5
 800490c:	f7ff ff52 	bl	80047b4 <_malloc_r>
 8004910:	4606      	mov	r6, r0
 8004912:	b360      	cbz	r0, 800496e <__ssputs_r+0xa2>
 8004914:	464a      	mov	r2, r9
 8004916:	6921      	ldr	r1, [r4, #16]
 8004918:	f7ff fed4 	bl	80046c4 <memcpy>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004926:	81a3      	strh	r3, [r4, #12]
 8004928:	6126      	str	r6, [r4, #16]
 800492a:	444e      	add	r6, r9
 800492c:	6026      	str	r6, [r4, #0]
 800492e:	463e      	mov	r6, r7
 8004930:	6165      	str	r5, [r4, #20]
 8004932:	eba5 0509 	sub.w	r5, r5, r9
 8004936:	60a5      	str	r5, [r4, #8]
 8004938:	42be      	cmp	r6, r7
 800493a:	d900      	bls.n	800493e <__ssputs_r+0x72>
 800493c:	463e      	mov	r6, r7
 800493e:	4632      	mov	r2, r6
 8004940:	4641      	mov	r1, r8
 8004942:	6820      	ldr	r0, [r4, #0]
 8004944:	f000 faaa 	bl	8004e9c <memmove>
 8004948:	2000      	movs	r0, #0
 800494a:	68a3      	ldr	r3, [r4, #8]
 800494c:	1b9b      	subs	r3, r3, r6
 800494e:	60a3      	str	r3, [r4, #8]
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	4433      	add	r3, r6
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495a:	462a      	mov	r2, r5
 800495c:	f000 fad6 	bl	8004f0c <_realloc_r>
 8004960:	4606      	mov	r6, r0
 8004962:	2800      	cmp	r0, #0
 8004964:	d1e0      	bne.n	8004928 <__ssputs_r+0x5c>
 8004966:	4650      	mov	r0, sl
 8004968:	6921      	ldr	r1, [r4, #16]
 800496a:	f7ff feb9 	bl	80046e0 <_free_r>
 800496e:	230c      	movs	r3, #12
 8004970:	f8ca 3000 	str.w	r3, [sl]
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	f04f 30ff 	mov.w	r0, #4294967295
 800497a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800497e:	81a3      	strh	r3, [r4, #12]
 8004980:	e7e9      	b.n	8004956 <__ssputs_r+0x8a>
	...

08004984 <_svfiprintf_r>:
 8004984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004988:	4698      	mov	r8, r3
 800498a:	898b      	ldrh	r3, [r1, #12]
 800498c:	4607      	mov	r7, r0
 800498e:	061b      	lsls	r3, r3, #24
 8004990:	460d      	mov	r5, r1
 8004992:	4614      	mov	r4, r2
 8004994:	b09d      	sub	sp, #116	@ 0x74
 8004996:	d510      	bpl.n	80049ba <_svfiprintf_r+0x36>
 8004998:	690b      	ldr	r3, [r1, #16]
 800499a:	b973      	cbnz	r3, 80049ba <_svfiprintf_r+0x36>
 800499c:	2140      	movs	r1, #64	@ 0x40
 800499e:	f7ff ff09 	bl	80047b4 <_malloc_r>
 80049a2:	6028      	str	r0, [r5, #0]
 80049a4:	6128      	str	r0, [r5, #16]
 80049a6:	b930      	cbnz	r0, 80049b6 <_svfiprintf_r+0x32>
 80049a8:	230c      	movs	r3, #12
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	b01d      	add	sp, #116	@ 0x74
 80049b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049b6:	2340      	movs	r3, #64	@ 0x40
 80049b8:	616b      	str	r3, [r5, #20]
 80049ba:	2300      	movs	r3, #0
 80049bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049be:	2320      	movs	r3, #32
 80049c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049c4:	2330      	movs	r3, #48	@ 0x30
 80049c6:	f04f 0901 	mov.w	r9, #1
 80049ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004b68 <_svfiprintf_r+0x1e4>
 80049d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049d6:	4623      	mov	r3, r4
 80049d8:	469a      	mov	sl, r3
 80049da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049de:	b10a      	cbz	r2, 80049e4 <_svfiprintf_r+0x60>
 80049e0:	2a25      	cmp	r2, #37	@ 0x25
 80049e2:	d1f9      	bne.n	80049d8 <_svfiprintf_r+0x54>
 80049e4:	ebba 0b04 	subs.w	fp, sl, r4
 80049e8:	d00b      	beq.n	8004a02 <_svfiprintf_r+0x7e>
 80049ea:	465b      	mov	r3, fp
 80049ec:	4622      	mov	r2, r4
 80049ee:	4629      	mov	r1, r5
 80049f0:	4638      	mov	r0, r7
 80049f2:	f7ff ff6b 	bl	80048cc <__ssputs_r>
 80049f6:	3001      	adds	r0, #1
 80049f8:	f000 80a7 	beq.w	8004b4a <_svfiprintf_r+0x1c6>
 80049fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049fe:	445a      	add	r2, fp
 8004a00:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a02:	f89a 3000 	ldrb.w	r3, [sl]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 809f 	beq.w	8004b4a <_svfiprintf_r+0x1c6>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a16:	f10a 0a01 	add.w	sl, sl, #1
 8004a1a:	9304      	str	r3, [sp, #16]
 8004a1c:	9307      	str	r3, [sp, #28]
 8004a1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a22:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a24:	4654      	mov	r4, sl
 8004a26:	2205      	movs	r2, #5
 8004a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a2c:	484e      	ldr	r0, [pc, #312]	@ (8004b68 <_svfiprintf_r+0x1e4>)
 8004a2e:	f000 fa5f 	bl	8004ef0 <memchr>
 8004a32:	9a04      	ldr	r2, [sp, #16]
 8004a34:	b9d8      	cbnz	r0, 8004a6e <_svfiprintf_r+0xea>
 8004a36:	06d0      	lsls	r0, r2, #27
 8004a38:	bf44      	itt	mi
 8004a3a:	2320      	movmi	r3, #32
 8004a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a40:	0711      	lsls	r1, r2, #28
 8004a42:	bf44      	itt	mi
 8004a44:	232b      	movmi	r3, #43	@ 0x2b
 8004a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a50:	d015      	beq.n	8004a7e <_svfiprintf_r+0xfa>
 8004a52:	4654      	mov	r4, sl
 8004a54:	2000      	movs	r0, #0
 8004a56:	f04f 0c0a 	mov.w	ip, #10
 8004a5a:	9a07      	ldr	r2, [sp, #28]
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a62:	3b30      	subs	r3, #48	@ 0x30
 8004a64:	2b09      	cmp	r3, #9
 8004a66:	d94b      	bls.n	8004b00 <_svfiprintf_r+0x17c>
 8004a68:	b1b0      	cbz	r0, 8004a98 <_svfiprintf_r+0x114>
 8004a6a:	9207      	str	r2, [sp, #28]
 8004a6c:	e014      	b.n	8004a98 <_svfiprintf_r+0x114>
 8004a6e:	eba0 0308 	sub.w	r3, r0, r8
 8004a72:	fa09 f303 	lsl.w	r3, r9, r3
 8004a76:	4313      	orrs	r3, r2
 8004a78:	46a2      	mov	sl, r4
 8004a7a:	9304      	str	r3, [sp, #16]
 8004a7c:	e7d2      	b.n	8004a24 <_svfiprintf_r+0xa0>
 8004a7e:	9b03      	ldr	r3, [sp, #12]
 8004a80:	1d19      	adds	r1, r3, #4
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	9103      	str	r1, [sp, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bfbb      	ittet	lt
 8004a8a:	425b      	neglt	r3, r3
 8004a8c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a90:	9307      	strge	r3, [sp, #28]
 8004a92:	9307      	strlt	r3, [sp, #28]
 8004a94:	bfb8      	it	lt
 8004a96:	9204      	strlt	r2, [sp, #16]
 8004a98:	7823      	ldrb	r3, [r4, #0]
 8004a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a9c:	d10a      	bne.n	8004ab4 <_svfiprintf_r+0x130>
 8004a9e:	7863      	ldrb	r3, [r4, #1]
 8004aa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004aa2:	d132      	bne.n	8004b0a <_svfiprintf_r+0x186>
 8004aa4:	9b03      	ldr	r3, [sp, #12]
 8004aa6:	3402      	adds	r4, #2
 8004aa8:	1d1a      	adds	r2, r3, #4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	9203      	str	r2, [sp, #12]
 8004aae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ab2:	9305      	str	r3, [sp, #20]
 8004ab4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004b6c <_svfiprintf_r+0x1e8>
 8004ab8:	2203      	movs	r2, #3
 8004aba:	4650      	mov	r0, sl
 8004abc:	7821      	ldrb	r1, [r4, #0]
 8004abe:	f000 fa17 	bl	8004ef0 <memchr>
 8004ac2:	b138      	cbz	r0, 8004ad4 <_svfiprintf_r+0x150>
 8004ac4:	2240      	movs	r2, #64	@ 0x40
 8004ac6:	9b04      	ldr	r3, [sp, #16]
 8004ac8:	eba0 000a 	sub.w	r0, r0, sl
 8004acc:	4082      	lsls	r2, r0
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	3401      	adds	r4, #1
 8004ad2:	9304      	str	r3, [sp, #16]
 8004ad4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad8:	2206      	movs	r2, #6
 8004ada:	4825      	ldr	r0, [pc, #148]	@ (8004b70 <_svfiprintf_r+0x1ec>)
 8004adc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ae0:	f000 fa06 	bl	8004ef0 <memchr>
 8004ae4:	2800      	cmp	r0, #0
 8004ae6:	d036      	beq.n	8004b56 <_svfiprintf_r+0x1d2>
 8004ae8:	4b22      	ldr	r3, [pc, #136]	@ (8004b74 <_svfiprintf_r+0x1f0>)
 8004aea:	bb1b      	cbnz	r3, 8004b34 <_svfiprintf_r+0x1b0>
 8004aec:	9b03      	ldr	r3, [sp, #12]
 8004aee:	3307      	adds	r3, #7
 8004af0:	f023 0307 	bic.w	r3, r3, #7
 8004af4:	3308      	adds	r3, #8
 8004af6:	9303      	str	r3, [sp, #12]
 8004af8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004afa:	4433      	add	r3, r6
 8004afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004afe:	e76a      	b.n	80049d6 <_svfiprintf_r+0x52>
 8004b00:	460c      	mov	r4, r1
 8004b02:	2001      	movs	r0, #1
 8004b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b08:	e7a8      	b.n	8004a5c <_svfiprintf_r+0xd8>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f04f 0c0a 	mov.w	ip, #10
 8004b10:	4619      	mov	r1, r3
 8004b12:	3401      	adds	r4, #1
 8004b14:	9305      	str	r3, [sp, #20]
 8004b16:	4620      	mov	r0, r4
 8004b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b1c:	3a30      	subs	r2, #48	@ 0x30
 8004b1e:	2a09      	cmp	r2, #9
 8004b20:	d903      	bls.n	8004b2a <_svfiprintf_r+0x1a6>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0c6      	beq.n	8004ab4 <_svfiprintf_r+0x130>
 8004b26:	9105      	str	r1, [sp, #20]
 8004b28:	e7c4      	b.n	8004ab4 <_svfiprintf_r+0x130>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b32:	e7f0      	b.n	8004b16 <_svfiprintf_r+0x192>
 8004b34:	ab03      	add	r3, sp, #12
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	462a      	mov	r2, r5
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004b78 <_svfiprintf_r+0x1f4>)
 8004b3e:	a904      	add	r1, sp, #16
 8004b40:	f3af 8000 	nop.w
 8004b44:	1c42      	adds	r2, r0, #1
 8004b46:	4606      	mov	r6, r0
 8004b48:	d1d6      	bne.n	8004af8 <_svfiprintf_r+0x174>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	065b      	lsls	r3, r3, #25
 8004b4e:	f53f af2d 	bmi.w	80049ac <_svfiprintf_r+0x28>
 8004b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b54:	e72c      	b.n	80049b0 <_svfiprintf_r+0x2c>
 8004b56:	ab03      	add	r3, sp, #12
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	462a      	mov	r2, r5
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <_svfiprintf_r+0x1f4>)
 8004b60:	a904      	add	r1, sp, #16
 8004b62:	f000 f87d 	bl	8004c60 <_printf_i>
 8004b66:	e7ed      	b.n	8004b44 <_svfiprintf_r+0x1c0>
 8004b68:	080050c6 	.word	0x080050c6
 8004b6c:	080050cc 	.word	0x080050cc
 8004b70:	080050d0 	.word	0x080050d0
 8004b74:	00000000 	.word	0x00000000
 8004b78:	080048cd 	.word	0x080048cd

08004b7c <_printf_common>:
 8004b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	4616      	mov	r6, r2
 8004b82:	4698      	mov	r8, r3
 8004b84:	688a      	ldr	r2, [r1, #8]
 8004b86:	690b      	ldr	r3, [r1, #16]
 8004b88:	4607      	mov	r7, r0
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	bfb8      	it	lt
 8004b8e:	4613      	movlt	r3, r2
 8004b90:	6033      	str	r3, [r6, #0]
 8004b92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b96:	460c      	mov	r4, r1
 8004b98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b9c:	b10a      	cbz	r2, 8004ba2 <_printf_common+0x26>
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	6033      	str	r3, [r6, #0]
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	0699      	lsls	r1, r3, #26
 8004ba6:	bf42      	ittt	mi
 8004ba8:	6833      	ldrmi	r3, [r6, #0]
 8004baa:	3302      	addmi	r3, #2
 8004bac:	6033      	strmi	r3, [r6, #0]
 8004bae:	6825      	ldr	r5, [r4, #0]
 8004bb0:	f015 0506 	ands.w	r5, r5, #6
 8004bb4:	d106      	bne.n	8004bc4 <_printf_common+0x48>
 8004bb6:	f104 0a19 	add.w	sl, r4, #25
 8004bba:	68e3      	ldr	r3, [r4, #12]
 8004bbc:	6832      	ldr	r2, [r6, #0]
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	42ab      	cmp	r3, r5
 8004bc2:	dc2b      	bgt.n	8004c1c <_printf_common+0xa0>
 8004bc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	3b00      	subs	r3, #0
 8004bcc:	bf18      	it	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	0692      	lsls	r2, r2, #26
 8004bd2:	d430      	bmi.n	8004c36 <_printf_common+0xba>
 8004bd4:	4641      	mov	r1, r8
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bdc:	47c8      	blx	r9
 8004bde:	3001      	adds	r0, #1
 8004be0:	d023      	beq.n	8004c2a <_printf_common+0xae>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	6922      	ldr	r2, [r4, #16]
 8004be6:	f003 0306 	and.w	r3, r3, #6
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	bf14      	ite	ne
 8004bee:	2500      	movne	r5, #0
 8004bf0:	6833      	ldreq	r3, [r6, #0]
 8004bf2:	f04f 0600 	mov.w	r6, #0
 8004bf6:	bf08      	it	eq
 8004bf8:	68e5      	ldreq	r5, [r4, #12]
 8004bfa:	f104 041a 	add.w	r4, r4, #26
 8004bfe:	bf08      	it	eq
 8004c00:	1aed      	subeq	r5, r5, r3
 8004c02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c06:	bf08      	it	eq
 8004c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	bfc4      	itt	gt
 8004c10:	1a9b      	subgt	r3, r3, r2
 8004c12:	18ed      	addgt	r5, r5, r3
 8004c14:	42b5      	cmp	r5, r6
 8004c16:	d11a      	bne.n	8004c4e <_printf_common+0xd2>
 8004c18:	2000      	movs	r0, #0
 8004c1a:	e008      	b.n	8004c2e <_printf_common+0xb2>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4652      	mov	r2, sl
 8004c20:	4641      	mov	r1, r8
 8004c22:	4638      	mov	r0, r7
 8004c24:	47c8      	blx	r9
 8004c26:	3001      	adds	r0, #1
 8004c28:	d103      	bne.n	8004c32 <_printf_common+0xb6>
 8004c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c32:	3501      	adds	r5, #1
 8004c34:	e7c1      	b.n	8004bba <_printf_common+0x3e>
 8004c36:	2030      	movs	r0, #48	@ 0x30
 8004c38:	18e1      	adds	r1, r4, r3
 8004c3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c44:	4422      	add	r2, r4
 8004c46:	3302      	adds	r3, #2
 8004c48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c4c:	e7c2      	b.n	8004bd4 <_printf_common+0x58>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4622      	mov	r2, r4
 8004c52:	4641      	mov	r1, r8
 8004c54:	4638      	mov	r0, r7
 8004c56:	47c8      	blx	r9
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d0e6      	beq.n	8004c2a <_printf_common+0xae>
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7d9      	b.n	8004c14 <_printf_common+0x98>

08004c60 <_printf_i>:
 8004c60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	7e0f      	ldrb	r7, [r1, #24]
 8004c66:	4691      	mov	r9, r2
 8004c68:	2f78      	cmp	r7, #120	@ 0x78
 8004c6a:	4680      	mov	r8, r0
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	469a      	mov	sl, r3
 8004c70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c76:	d807      	bhi.n	8004c88 <_printf_i+0x28>
 8004c78:	2f62      	cmp	r7, #98	@ 0x62
 8004c7a:	d80a      	bhi.n	8004c92 <_printf_i+0x32>
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	f000 80d1 	beq.w	8004e24 <_printf_i+0x1c4>
 8004c82:	2f58      	cmp	r7, #88	@ 0x58
 8004c84:	f000 80b8 	beq.w	8004df8 <_printf_i+0x198>
 8004c88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c90:	e03a      	b.n	8004d08 <_printf_i+0xa8>
 8004c92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c96:	2b15      	cmp	r3, #21
 8004c98:	d8f6      	bhi.n	8004c88 <_printf_i+0x28>
 8004c9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004ca0 <_printf_i+0x40>)
 8004c9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d0d 	.word	0x08004d0d
 8004ca8:	08004c89 	.word	0x08004c89
 8004cac:	08004c89 	.word	0x08004c89
 8004cb0:	08004c89 	.word	0x08004c89
 8004cb4:	08004c89 	.word	0x08004c89
 8004cb8:	08004d0d 	.word	0x08004d0d
 8004cbc:	08004c89 	.word	0x08004c89
 8004cc0:	08004c89 	.word	0x08004c89
 8004cc4:	08004c89 	.word	0x08004c89
 8004cc8:	08004c89 	.word	0x08004c89
 8004ccc:	08004e0b 	.word	0x08004e0b
 8004cd0:	08004d37 	.word	0x08004d37
 8004cd4:	08004dc5 	.word	0x08004dc5
 8004cd8:	08004c89 	.word	0x08004c89
 8004cdc:	08004c89 	.word	0x08004c89
 8004ce0:	08004e2d 	.word	0x08004e2d
 8004ce4:	08004c89 	.word	0x08004c89
 8004ce8:	08004d37 	.word	0x08004d37
 8004cec:	08004c89 	.word	0x08004c89
 8004cf0:	08004c89 	.word	0x08004c89
 8004cf4:	08004dcd 	.word	0x08004dcd
 8004cf8:	6833      	ldr	r3, [r6, #0]
 8004cfa:	1d1a      	adds	r2, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6032      	str	r2, [r6, #0]
 8004d00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e09c      	b.n	8004e46 <_printf_i+0x1e6>
 8004d0c:	6833      	ldr	r3, [r6, #0]
 8004d0e:	6820      	ldr	r0, [r4, #0]
 8004d10:	1d19      	adds	r1, r3, #4
 8004d12:	6031      	str	r1, [r6, #0]
 8004d14:	0606      	lsls	r6, r0, #24
 8004d16:	d501      	bpl.n	8004d1c <_printf_i+0xbc>
 8004d18:	681d      	ldr	r5, [r3, #0]
 8004d1a:	e003      	b.n	8004d24 <_printf_i+0xc4>
 8004d1c:	0645      	lsls	r5, r0, #25
 8004d1e:	d5fb      	bpl.n	8004d18 <_printf_i+0xb8>
 8004d20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d24:	2d00      	cmp	r5, #0
 8004d26:	da03      	bge.n	8004d30 <_printf_i+0xd0>
 8004d28:	232d      	movs	r3, #45	@ 0x2d
 8004d2a:	426d      	negs	r5, r5
 8004d2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d30:	230a      	movs	r3, #10
 8004d32:	4858      	ldr	r0, [pc, #352]	@ (8004e94 <_printf_i+0x234>)
 8004d34:	e011      	b.n	8004d5a <_printf_i+0xfa>
 8004d36:	6821      	ldr	r1, [r4, #0]
 8004d38:	6833      	ldr	r3, [r6, #0]
 8004d3a:	0608      	lsls	r0, r1, #24
 8004d3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d40:	d402      	bmi.n	8004d48 <_printf_i+0xe8>
 8004d42:	0649      	lsls	r1, r1, #25
 8004d44:	bf48      	it	mi
 8004d46:	b2ad      	uxthmi	r5, r5
 8004d48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d4a:	6033      	str	r3, [r6, #0]
 8004d4c:	bf14      	ite	ne
 8004d4e:	230a      	movne	r3, #10
 8004d50:	2308      	moveq	r3, #8
 8004d52:	4850      	ldr	r0, [pc, #320]	@ (8004e94 <_printf_i+0x234>)
 8004d54:	2100      	movs	r1, #0
 8004d56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d5a:	6866      	ldr	r6, [r4, #4]
 8004d5c:	2e00      	cmp	r6, #0
 8004d5e:	60a6      	str	r6, [r4, #8]
 8004d60:	db05      	blt.n	8004d6e <_printf_i+0x10e>
 8004d62:	6821      	ldr	r1, [r4, #0]
 8004d64:	432e      	orrs	r6, r5
 8004d66:	f021 0104 	bic.w	r1, r1, #4
 8004d6a:	6021      	str	r1, [r4, #0]
 8004d6c:	d04b      	beq.n	8004e06 <_printf_i+0x1a6>
 8004d6e:	4616      	mov	r6, r2
 8004d70:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d74:	fb03 5711 	mls	r7, r3, r1, r5
 8004d78:	5dc7      	ldrb	r7, [r0, r7]
 8004d7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d7e:	462f      	mov	r7, r5
 8004d80:	42bb      	cmp	r3, r7
 8004d82:	460d      	mov	r5, r1
 8004d84:	d9f4      	bls.n	8004d70 <_printf_i+0x110>
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d10b      	bne.n	8004da2 <_printf_i+0x142>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	07df      	lsls	r7, r3, #31
 8004d8e:	d508      	bpl.n	8004da2 <_printf_i+0x142>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	6861      	ldr	r1, [r4, #4]
 8004d94:	4299      	cmp	r1, r3
 8004d96:	bfde      	ittt	le
 8004d98:	2330      	movle	r3, #48	@ 0x30
 8004d9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004da2:	1b92      	subs	r2, r2, r6
 8004da4:	6122      	str	r2, [r4, #16]
 8004da6:	464b      	mov	r3, r9
 8004da8:	4621      	mov	r1, r4
 8004daa:	4640      	mov	r0, r8
 8004dac:	f8cd a000 	str.w	sl, [sp]
 8004db0:	aa03      	add	r2, sp, #12
 8004db2:	f7ff fee3 	bl	8004b7c <_printf_common>
 8004db6:	3001      	adds	r0, #1
 8004db8:	d14a      	bne.n	8004e50 <_printf_i+0x1f0>
 8004dba:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbe:	b004      	add	sp, #16
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	f043 0320 	orr.w	r3, r3, #32
 8004dca:	6023      	str	r3, [r4, #0]
 8004dcc:	2778      	movs	r7, #120	@ 0x78
 8004dce:	4832      	ldr	r0, [pc, #200]	@ (8004e98 <_printf_i+0x238>)
 8004dd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	6831      	ldr	r1, [r6, #0]
 8004dd8:	061f      	lsls	r7, r3, #24
 8004dda:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dde:	d402      	bmi.n	8004de6 <_printf_i+0x186>
 8004de0:	065f      	lsls	r7, r3, #25
 8004de2:	bf48      	it	mi
 8004de4:	b2ad      	uxthmi	r5, r5
 8004de6:	6031      	str	r1, [r6, #0]
 8004de8:	07d9      	lsls	r1, r3, #31
 8004dea:	bf44      	itt	mi
 8004dec:	f043 0320 	orrmi.w	r3, r3, #32
 8004df0:	6023      	strmi	r3, [r4, #0]
 8004df2:	b11d      	cbz	r5, 8004dfc <_printf_i+0x19c>
 8004df4:	2310      	movs	r3, #16
 8004df6:	e7ad      	b.n	8004d54 <_printf_i+0xf4>
 8004df8:	4826      	ldr	r0, [pc, #152]	@ (8004e94 <_printf_i+0x234>)
 8004dfa:	e7e9      	b.n	8004dd0 <_printf_i+0x170>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f023 0320 	bic.w	r3, r3, #32
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	e7f6      	b.n	8004df4 <_printf_i+0x194>
 8004e06:	4616      	mov	r6, r2
 8004e08:	e7bd      	b.n	8004d86 <_printf_i+0x126>
 8004e0a:	6833      	ldr	r3, [r6, #0]
 8004e0c:	6825      	ldr	r5, [r4, #0]
 8004e0e:	1d18      	adds	r0, r3, #4
 8004e10:	6961      	ldr	r1, [r4, #20]
 8004e12:	6030      	str	r0, [r6, #0]
 8004e14:	062e      	lsls	r6, r5, #24
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	d501      	bpl.n	8004e1e <_printf_i+0x1be>
 8004e1a:	6019      	str	r1, [r3, #0]
 8004e1c:	e002      	b.n	8004e24 <_printf_i+0x1c4>
 8004e1e:	0668      	lsls	r0, r5, #25
 8004e20:	d5fb      	bpl.n	8004e1a <_printf_i+0x1ba>
 8004e22:	8019      	strh	r1, [r3, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	4616      	mov	r6, r2
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	e7bc      	b.n	8004da6 <_printf_i+0x146>
 8004e2c:	6833      	ldr	r3, [r6, #0]
 8004e2e:	2100      	movs	r1, #0
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	6032      	str	r2, [r6, #0]
 8004e34:	681e      	ldr	r6, [r3, #0]
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 f859 	bl	8004ef0 <memchr>
 8004e3e:	b108      	cbz	r0, 8004e44 <_printf_i+0x1e4>
 8004e40:	1b80      	subs	r0, r0, r6
 8004e42:	6060      	str	r0, [r4, #4]
 8004e44:	6863      	ldr	r3, [r4, #4]
 8004e46:	6123      	str	r3, [r4, #16]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e4e:	e7aa      	b.n	8004da6 <_printf_i+0x146>
 8004e50:	4632      	mov	r2, r6
 8004e52:	4649      	mov	r1, r9
 8004e54:	4640      	mov	r0, r8
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	47d0      	blx	sl
 8004e5a:	3001      	adds	r0, #1
 8004e5c:	d0ad      	beq.n	8004dba <_printf_i+0x15a>
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	079b      	lsls	r3, r3, #30
 8004e62:	d413      	bmi.n	8004e8c <_printf_i+0x22c>
 8004e64:	68e0      	ldr	r0, [r4, #12]
 8004e66:	9b03      	ldr	r3, [sp, #12]
 8004e68:	4298      	cmp	r0, r3
 8004e6a:	bfb8      	it	lt
 8004e6c:	4618      	movlt	r0, r3
 8004e6e:	e7a6      	b.n	8004dbe <_printf_i+0x15e>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4632      	mov	r2, r6
 8004e74:	4649      	mov	r1, r9
 8004e76:	4640      	mov	r0, r8
 8004e78:	47d0      	blx	sl
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d09d      	beq.n	8004dba <_printf_i+0x15a>
 8004e7e:	3501      	adds	r5, #1
 8004e80:	68e3      	ldr	r3, [r4, #12]
 8004e82:	9903      	ldr	r1, [sp, #12]
 8004e84:	1a5b      	subs	r3, r3, r1
 8004e86:	42ab      	cmp	r3, r5
 8004e88:	dcf2      	bgt.n	8004e70 <_printf_i+0x210>
 8004e8a:	e7eb      	b.n	8004e64 <_printf_i+0x204>
 8004e8c:	2500      	movs	r5, #0
 8004e8e:	f104 0619 	add.w	r6, r4, #25
 8004e92:	e7f5      	b.n	8004e80 <_printf_i+0x220>
 8004e94:	080050d7 	.word	0x080050d7
 8004e98:	080050e8 	.word	0x080050e8

08004e9c <memmove>:
 8004e9c:	4288      	cmp	r0, r1
 8004e9e:	b510      	push	{r4, lr}
 8004ea0:	eb01 0402 	add.w	r4, r1, r2
 8004ea4:	d902      	bls.n	8004eac <memmove+0x10>
 8004ea6:	4284      	cmp	r4, r0
 8004ea8:	4623      	mov	r3, r4
 8004eaa:	d807      	bhi.n	8004ebc <memmove+0x20>
 8004eac:	1e43      	subs	r3, r0, #1
 8004eae:	42a1      	cmp	r1, r4
 8004eb0:	d008      	beq.n	8004ec4 <memmove+0x28>
 8004eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eba:	e7f8      	b.n	8004eae <memmove+0x12>
 8004ebc:	4601      	mov	r1, r0
 8004ebe:	4402      	add	r2, r0
 8004ec0:	428a      	cmp	r2, r1
 8004ec2:	d100      	bne.n	8004ec6 <memmove+0x2a>
 8004ec4:	bd10      	pop	{r4, pc}
 8004ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ece:	e7f7      	b.n	8004ec0 <memmove+0x24>

08004ed0 <_sbrk_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4d05      	ldr	r5, [pc, #20]	@ (8004eec <_sbrk_r+0x1c>)
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	602b      	str	r3, [r5, #0]
 8004edc:	f7fc f87a 	bl	8000fd4 <_sbrk>
 8004ee0:	1c43      	adds	r3, r0, #1
 8004ee2:	d102      	bne.n	8004eea <_sbrk_r+0x1a>
 8004ee4:	682b      	ldr	r3, [r5, #0]
 8004ee6:	b103      	cbz	r3, 8004eea <_sbrk_r+0x1a>
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	20001314 	.word	0x20001314

08004ef0 <memchr>:
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	b510      	push	{r4, lr}
 8004ef4:	b2c9      	uxtb	r1, r1
 8004ef6:	4402      	add	r2, r0
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	4618      	mov	r0, r3
 8004efc:	d101      	bne.n	8004f02 <memchr+0x12>
 8004efe:	2000      	movs	r0, #0
 8004f00:	e003      	b.n	8004f0a <memchr+0x1a>
 8004f02:	7804      	ldrb	r4, [r0, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	428c      	cmp	r4, r1
 8004f08:	d1f6      	bne.n	8004ef8 <memchr+0x8>
 8004f0a:	bd10      	pop	{r4, pc}

08004f0c <_realloc_r>:
 8004f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f10:	4607      	mov	r7, r0
 8004f12:	4614      	mov	r4, r2
 8004f14:	460d      	mov	r5, r1
 8004f16:	b921      	cbnz	r1, 8004f22 <_realloc_r+0x16>
 8004f18:	4611      	mov	r1, r2
 8004f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f1e:	f7ff bc49 	b.w	80047b4 <_malloc_r>
 8004f22:	b92a      	cbnz	r2, 8004f30 <_realloc_r+0x24>
 8004f24:	f7ff fbdc 	bl	80046e0 <_free_r>
 8004f28:	4625      	mov	r5, r4
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f30:	f000 f81a 	bl	8004f68 <_malloc_usable_size_r>
 8004f34:	4284      	cmp	r4, r0
 8004f36:	4606      	mov	r6, r0
 8004f38:	d802      	bhi.n	8004f40 <_realloc_r+0x34>
 8004f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f3e:	d8f4      	bhi.n	8004f2a <_realloc_r+0x1e>
 8004f40:	4621      	mov	r1, r4
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff fc36 	bl	80047b4 <_malloc_r>
 8004f48:	4680      	mov	r8, r0
 8004f4a:	b908      	cbnz	r0, 8004f50 <_realloc_r+0x44>
 8004f4c:	4645      	mov	r5, r8
 8004f4e:	e7ec      	b.n	8004f2a <_realloc_r+0x1e>
 8004f50:	42b4      	cmp	r4, r6
 8004f52:	4622      	mov	r2, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	bf28      	it	cs
 8004f58:	4632      	movcs	r2, r6
 8004f5a:	f7ff fbb3 	bl	80046c4 <memcpy>
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4638      	mov	r0, r7
 8004f62:	f7ff fbbd 	bl	80046e0 <_free_r>
 8004f66:	e7f1      	b.n	8004f4c <_realloc_r+0x40>

08004f68 <_malloc_usable_size_r>:
 8004f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6c:	1f18      	subs	r0, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bfbc      	itt	lt
 8004f72:	580b      	ldrlt	r3, [r1, r0]
 8004f74:	18c0      	addlt	r0, r0, r3
 8004f76:	4770      	bx	lr

08004f78 <_init>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr

08004f84 <_fini>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr

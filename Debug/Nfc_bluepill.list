
Nfc_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000416c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  08004278  08004278  00005278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c0  080048c0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000058c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080048c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  2000005c  08004924  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08004924  0000644c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c86d  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d43  00000000  00000000  000128f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00014638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097a  00000000  00000000  00015250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fc8  00000000  00000000  00015bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec5e  00000000  00000000  0002db92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087703  00000000  00000000  0003c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3ef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  000c3f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000c76c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004260 	.word	0x08004260

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004260 	.word	0x08004260

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08a      	sub	sp, #40	@ 0x28
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f001 fd23 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 fc03 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fd2f 	bl	8000bcc <MX_GPIO_Init>
  MX_I2C1_Init();
 800016e:	f000 fc3b 	bl	80009e8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000172:	f000 fc67 	bl	8000a44 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000176:	f000 fc93 	bl	8000aa0 <MX_SPI1_Init>
  MX_SPI2_Init();
 800017a:	f000 fcc7 	bl	8000b0c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800017e:	f000 fcfb 	bl	8000b78 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Send startup message
  sprintf(uart_buffer, "\r\n=== STM32 Blue Pill + PN532 NFC Reader ===\r\n");
 8000182:	499b      	ldr	r1, [pc, #620]	@ (80003f0 <main+0x294>)
 8000184:	489b      	ldr	r0, [pc, #620]	@ (80003f4 <main+0x298>)
 8000186:	f003 fbbb 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800018a:	489a      	ldr	r0, [pc, #616]	@ (80003f4 <main+0x298>)
 800018c:	f7ff ffde 	bl	800014c <strlen>
 8000190:	4603      	mov	r3, r0
 8000192:	b29a      	uxth	r2, r3
 8000194:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000198:	4996      	ldr	r1, [pc, #600]	@ (80003f4 <main+0x298>)
 800019a:	4897      	ldr	r0, [pc, #604]	@ (80003f8 <main+0x29c>)
 800019c:	f003 f9db 	bl	8003556 <HAL_UART_Transmit>

  sprintf(uart_buffer, "Initializing PN532...\r\n");
 80001a0:	4996      	ldr	r1, [pc, #600]	@ (80003fc <main+0x2a0>)
 80001a2:	4894      	ldr	r0, [pc, #592]	@ (80003f4 <main+0x298>)
 80001a4:	f003 fbac 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80001a8:	4892      	ldr	r0, [pc, #584]	@ (80003f4 <main+0x298>)
 80001aa:	f7ff ffcf 	bl	800014c <strlen>
 80001ae:	4603      	mov	r3, r0
 80001b0:	b29a      	uxth	r2, r3
 80001b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001b6:	498f      	ldr	r1, [pc, #572]	@ (80003f4 <main+0x298>)
 80001b8:	488f      	ldr	r0, [pc, #572]	@ (80003f8 <main+0x29c>)
 80001ba:	f003 f9cc 	bl	8003556 <HAL_UART_Transmit>

  // Step 1: Test basic SPI
  sprintf(uart_buffer, "Step 1: Testing SPI connection...\r\n");
 80001be:	4990      	ldr	r1, [pc, #576]	@ (8000400 <main+0x2a4>)
 80001c0:	488c      	ldr	r0, [pc, #560]	@ (80003f4 <main+0x298>)
 80001c2:	f003 fb9d 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80001c6:	488b      	ldr	r0, [pc, #556]	@ (80003f4 <main+0x298>)
 80001c8:	f7ff ffc0 	bl	800014c <strlen>
 80001cc:	4603      	mov	r3, r0
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d4:	4987      	ldr	r1, [pc, #540]	@ (80003f4 <main+0x298>)
 80001d6:	4888      	ldr	r0, [pc, #544]	@ (80003f8 <main+0x29c>)
 80001d8:	f003 f9bd 	bl	8003556 <HAL_UART_Transmit>
  Test_SPI_Connection();
 80001dc:	f000 fa44 	bl	8000668 <Test_SPI_Connection>

  HAL_Delay(1000);
 80001e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001e4:	f001 fd44 	bl	8001c70 <HAL_Delay>

  // Step 2: Test raw SPI communication
  sprintf(uart_buffer, "Step 2: Testing raw SPI communication...\r\n");
 80001e8:	4986      	ldr	r1, [pc, #536]	@ (8000404 <main+0x2a8>)
 80001ea:	4882      	ldr	r0, [pc, #520]	@ (80003f4 <main+0x298>)
 80001ec:	f003 fb88 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80001f0:	4880      	ldr	r0, [pc, #512]	@ (80003f4 <main+0x298>)
 80001f2:	f7ff ffab 	bl	800014c <strlen>
 80001f6:	4603      	mov	r3, r0
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001fe:	497d      	ldr	r1, [pc, #500]	@ (80003f4 <main+0x298>)
 8000200:	487d      	ldr	r0, [pc, #500]	@ (80003f8 <main+0x29c>)
 8000202:	f003 f9a8 	bl	8003556 <HAL_UART_Transmit>
  Test_Raw_SPI_Communication();
 8000206:	f000 fa99 	bl	800073c <Test_Raw_SPI_Communication>

  HAL_Delay(1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800020e:	f001 fd2f 	bl	8001c70 <HAL_Delay>

  // Step 3: Test PN532 wakeup
  sprintf(uart_buffer, "Step 3: Testing PN532 wakeup sequence...\r\n");
 8000212:	497d      	ldr	r1, [pc, #500]	@ (8000408 <main+0x2ac>)
 8000214:	4877      	ldr	r0, [pc, #476]	@ (80003f4 <main+0x298>)
 8000216:	f003 fb73 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800021a:	4876      	ldr	r0, [pc, #472]	@ (80003f4 <main+0x298>)
 800021c:	f7ff ff96 	bl	800014c <strlen>
 8000220:	4603      	mov	r3, r0
 8000222:	b29a      	uxth	r2, r3
 8000224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000228:	4972      	ldr	r1, [pc, #456]	@ (80003f4 <main+0x298>)
 800022a:	4873      	ldr	r0, [pc, #460]	@ (80003f8 <main+0x29c>)
 800022c:	f003 f993 	bl	8003556 <HAL_UART_Transmit>
  Test_PN532_Wakeup();
 8000230:	f000 faee 	bl	8000810 <Test_PN532_Wakeup>

  HAL_Delay(1000);
 8000234:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000238:	f001 fd1a 	bl	8001c70 <HAL_Delay>

  // Initialize PN532
  PN532_Init(&pn532);
 800023c:	4873      	ldr	r0, [pc, #460]	@ (800040c <main+0x2b0>)
 800023e:	f001 f8ef 	bl	8001420 <PN532_Init>

  HAL_Delay(1000);
 8000242:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000246:	f001 fd13 	bl	8001c70 <HAL_Delay>

  // Get firmware version
  uint8_t version[4];
  if (PN532_GetFirmwareVersion(&pn532, version) == PN532_STATUS_OK) {
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	4619      	mov	r1, r3
 8000250:	486e      	ldr	r0, [pc, #440]	@ (800040c <main+0x2b0>)
 8000252:	f001 f827 	bl	80012a4 <PN532_GetFirmwareVersion>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d124      	bne.n	80002a6 <main+0x14a>
    sprintf(uart_buffer, "PN532 Firmware Version: %d.%d\r\n", version[1], version[2]);
 800025c:	7c7b      	ldrb	r3, [r7, #17]
 800025e:	461a      	mov	r2, r3
 8000260:	7cbb      	ldrb	r3, [r7, #18]
 8000262:	496b      	ldr	r1, [pc, #428]	@ (8000410 <main+0x2b4>)
 8000264:	4863      	ldr	r0, [pc, #396]	@ (80003f4 <main+0x298>)
 8000266:	f003 fb4b 	bl	8003900 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800026a:	4862      	ldr	r0, [pc, #392]	@ (80003f4 <main+0x298>)
 800026c:	f7ff ff6e 	bl	800014c <strlen>
 8000270:	4603      	mov	r3, r0
 8000272:	b29a      	uxth	r2, r3
 8000274:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000278:	495e      	ldr	r1, [pc, #376]	@ (80003f4 <main+0x298>)
 800027a:	485f      	ldr	r0, [pc, #380]	@ (80003f8 <main+0x29c>)
 800027c:	f003 f96b 	bl	8003556 <HAL_UART_Transmit>
    sprintf(uart_buffer, "IC: PN5%02X, Support: 0x%02X\r\n", version[0], version[3]);
 8000280:	7c3b      	ldrb	r3, [r7, #16]
 8000282:	461a      	mov	r2, r3
 8000284:	7cfb      	ldrb	r3, [r7, #19]
 8000286:	4963      	ldr	r1, [pc, #396]	@ (8000414 <main+0x2b8>)
 8000288:	485a      	ldr	r0, [pc, #360]	@ (80003f4 <main+0x298>)
 800028a:	f003 fb39 	bl	8003900 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800028e:	4859      	ldr	r0, [pc, #356]	@ (80003f4 <main+0x298>)
 8000290:	f7ff ff5c 	bl	800014c <strlen>
 8000294:	4603      	mov	r3, r0
 8000296:	b29a      	uxth	r2, r3
 8000298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800029c:	4955      	ldr	r1, [pc, #340]	@ (80003f4 <main+0x298>)
 800029e:	4856      	ldr	r0, [pc, #344]	@ (80003f8 <main+0x29c>)
 80002a0:	f003 f959 	bl	8003556 <HAL_UART_Transmit>
 80002a4:	e01d      	b.n	80002e2 <main+0x186>
  } else {
    sprintf(uart_buffer, "ERROR: Failed to get firmware version!\r\n");
 80002a6:	495c      	ldr	r1, [pc, #368]	@ (8000418 <main+0x2bc>)
 80002a8:	4852      	ldr	r0, [pc, #328]	@ (80003f4 <main+0x298>)
 80002aa:	f003 fb29 	bl	8003900 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80002ae:	4851      	ldr	r0, [pc, #324]	@ (80003f4 <main+0x298>)
 80002b0:	f7ff ff4c 	bl	800014c <strlen>
 80002b4:	4603      	mov	r3, r0
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002bc:	494d      	ldr	r1, [pc, #308]	@ (80003f4 <main+0x298>)
 80002be:	484e      	ldr	r0, [pc, #312]	@ (80003f8 <main+0x29c>)
 80002c0:	f003 f949 	bl	8003556 <HAL_UART_Transmit>
    sprintf(uart_buffer, "Check connections and PN532 module!\r\n");
 80002c4:	4955      	ldr	r1, [pc, #340]	@ (800041c <main+0x2c0>)
 80002c6:	484b      	ldr	r0, [pc, #300]	@ (80003f4 <main+0x298>)
 80002c8:	f003 fb1a 	bl	8003900 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80002cc:	4849      	ldr	r0, [pc, #292]	@ (80003f4 <main+0x298>)
 80002ce:	f7ff ff3d 	bl	800014c <strlen>
 80002d2:	4603      	mov	r3, r0
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002da:	4946      	ldr	r1, [pc, #280]	@ (80003f4 <main+0x298>)
 80002dc:	4846      	ldr	r0, [pc, #280]	@ (80003f8 <main+0x29c>)
 80002de:	f003 f93a 	bl	8003556 <HAL_UART_Transmit>
    // You might want to continue anyway for debugging
    // while(1); // Uncomment to stop on error
  }

  // Configure SAM
  if (PN532_SamConfiguration(&pn532) == PN532_STATUS_OK) {
 80002e2:	484a      	ldr	r0, [pc, #296]	@ (800040c <main+0x2b0>)
 80002e4:	f001 f802 	bl	80012ec <PN532_SamConfiguration>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d10f      	bne.n	800030e <main+0x1b2>
    sprintf(uart_buffer, "SAM configuration successful!\r\n");
 80002ee:	494c      	ldr	r1, [pc, #304]	@ (8000420 <main+0x2c4>)
 80002f0:	4840      	ldr	r0, [pc, #256]	@ (80003f4 <main+0x298>)
 80002f2:	f003 fb05 	bl	8003900 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80002f6:	483f      	ldr	r0, [pc, #252]	@ (80003f4 <main+0x298>)
 80002f8:	f7ff ff28 	bl	800014c <strlen>
 80002fc:	4603      	mov	r3, r0
 80002fe:	b29a      	uxth	r2, r3
 8000300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000304:	493b      	ldr	r1, [pc, #236]	@ (80003f4 <main+0x298>)
 8000306:	483c      	ldr	r0, [pc, #240]	@ (80003f8 <main+0x29c>)
 8000308:	f003 f925 	bl	8003556 <HAL_UART_Transmit>
 800030c:	e00e      	b.n	800032c <main+0x1d0>
  } else {
    sprintf(uart_buffer, "Warning: SAM configuration failed!\r\n");
 800030e:	4945      	ldr	r1, [pc, #276]	@ (8000424 <main+0x2c8>)
 8000310:	4838      	ldr	r0, [pc, #224]	@ (80003f4 <main+0x298>)
 8000312:	f003 faf5 	bl	8003900 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000316:	4837      	ldr	r0, [pc, #220]	@ (80003f4 <main+0x298>)
 8000318:	f7ff ff18 	bl	800014c <strlen>
 800031c:	4603      	mov	r3, r0
 800031e:	b29a      	uxth	r2, r3
 8000320:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000324:	4933      	ldr	r1, [pc, #204]	@ (80003f4 <main+0x298>)
 8000326:	4834      	ldr	r0, [pc, #208]	@ (80003f8 <main+0x29c>)
 8000328:	f003 f915 	bl	8003556 <HAL_UART_Transmit>
  }

  sprintf(uart_buffer, "\r\nReady! Place an NFC card near the reader...\r\n");
 800032c:	493e      	ldr	r1, [pc, #248]	@ (8000428 <main+0x2cc>)
 800032e:	4831      	ldr	r0, [pc, #196]	@ (80003f4 <main+0x298>)
 8000330:	f003 fae6 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000334:	482f      	ldr	r0, [pc, #188]	@ (80003f4 <main+0x298>)
 8000336:	f7ff ff09 	bl	800014c <strlen>
 800033a:	4603      	mov	r3, r0
 800033c:	b29a      	uxth	r2, r3
 800033e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000342:	492c      	ldr	r1, [pc, #176]	@ (80003f4 <main+0x298>)
 8000344:	482c      	ldr	r0, [pc, #176]	@ (80003f8 <main+0x29c>)
 8000346:	f003 f906 	bl	8003556 <HAL_UART_Transmit>
  sprintf(uart_buffer, "==========================================\r\n");
 800034a:	4938      	ldr	r1, [pc, #224]	@ (800042c <main+0x2d0>)
 800034c:	4829      	ldr	r0, [pc, #164]	@ (80003f4 <main+0x298>)
 800034e:	f003 fad7 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000352:	4828      	ldr	r0, [pc, #160]	@ (80003f4 <main+0x298>)
 8000354:	f7ff fefa 	bl	800014c <strlen>
 8000358:	4603      	mov	r3, r0
 800035a:	b29a      	uxth	r2, r3
 800035c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000360:	4924      	ldr	r1, [pc, #144]	@ (80003f4 <main+0x298>)
 8000362:	4825      	ldr	r0, [pc, #148]	@ (80003f8 <main+0x29c>)
 8000364:	f003 f8f7 	bl	8003556 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Turn on the LED (active low, so set PC13 to RESET) */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800036e:	4830      	ldr	r0, [pc, #192]	@ (8000430 <main+0x2d4>)
 8000370:	f001 ff0a 	bl	8002188 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
    uint8_t uid[10]; // Buffer for UID (max 10 bytes for triple size UID)

    // Try to read a card
    int uid_length = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000374:	1d39      	adds	r1, r7, #4
 8000376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800037a:	2200      	movs	r2, #0
 800037c:	4823      	ldr	r0, [pc, #140]	@ (800040c <main+0x2b0>)
 800037e:	f000 ffd7 	bl	8001330 <PN532_ReadPassiveTarget>
 8000382:	6178      	str	r0, [r7, #20]

    if (uid_length > 0) {
 8000384:	697b      	ldr	r3, [r7, #20]
 8000386:	2b00      	cmp	r3, #0
 8000388:	f340 8132 	ble.w	80005f0 <main+0x494>
      // Card found!
      sprintf(uart_buffer, "*** NFC CARD DETECTED! ***\r\n");
 800038c:	4929      	ldr	r1, [pc, #164]	@ (8000434 <main+0x2d8>)
 800038e:	4819      	ldr	r0, [pc, #100]	@ (80003f4 <main+0x298>)
 8000390:	f003 fab6 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000394:	4817      	ldr	r0, [pc, #92]	@ (80003f4 <main+0x298>)
 8000396:	f7ff fed9 	bl	800014c <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	b29a      	uxth	r2, r3
 800039e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003a2:	4914      	ldr	r1, [pc, #80]	@ (80003f4 <main+0x298>)
 80003a4:	4814      	ldr	r0, [pc, #80]	@ (80003f8 <main+0x29c>)
 80003a6:	f003 f8d6 	bl	8003556 <HAL_UART_Transmit>

      sprintf(uart_buffer, "UID Length: %d bytes\r\n", uid_length);
 80003aa:	697a      	ldr	r2, [r7, #20]
 80003ac:	4922      	ldr	r1, [pc, #136]	@ (8000438 <main+0x2dc>)
 80003ae:	4811      	ldr	r0, [pc, #68]	@ (80003f4 <main+0x298>)
 80003b0:	f003 faa6 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80003b4:	480f      	ldr	r0, [pc, #60]	@ (80003f4 <main+0x298>)
 80003b6:	f7ff fec9 	bl	800014c <strlen>
 80003ba:	4603      	mov	r3, r0
 80003bc:	b29a      	uxth	r2, r3
 80003be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003c2:	490c      	ldr	r1, [pc, #48]	@ (80003f4 <main+0x298>)
 80003c4:	480c      	ldr	r0, [pc, #48]	@ (80003f8 <main+0x29c>)
 80003c6:	f003 f8c6 	bl	8003556 <HAL_UART_Transmit>

      sprintf(uart_buffer, "UID (Hex): ");
 80003ca:	491c      	ldr	r1, [pc, #112]	@ (800043c <main+0x2e0>)
 80003cc:	4809      	ldr	r0, [pc, #36]	@ (80003f4 <main+0x298>)
 80003ce:	f003 fa97 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80003d2:	4808      	ldr	r0, [pc, #32]	@ (80003f4 <main+0x298>)
 80003d4:	f7ff feba 	bl	800014c <strlen>
 80003d8:	4603      	mov	r3, r0
 80003da:	b29a      	uxth	r2, r3
 80003dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003e0:	4904      	ldr	r1, [pc, #16]	@ (80003f4 <main+0x298>)
 80003e2:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <main+0x29c>)
 80003e4:	f003 f8b7 	bl	8003556 <HAL_UART_Transmit>

      // Print UID in hexadecimal
      for (int i = 0; i < uid_length; i++) {
 80003e8:	2300      	movs	r3, #0
 80003ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80003ec:	e053      	b.n	8000496 <main+0x33a>
 80003ee:	bf00      	nop
 80003f0:	08004278 	.word	0x08004278
 80003f4:	20000230 	.word	0x20000230
 80003f8:	200001d0 	.word	0x200001d0
 80003fc:	080042a8 	.word	0x080042a8
 8000400:	080042c0 	.word	0x080042c0
 8000404:	080042e4 	.word	0x080042e4
 8000408:	08004310 	.word	0x08004310
 800040c:	20000218 	.word	0x20000218
 8000410:	0800433c 	.word	0x0800433c
 8000414:	0800435c 	.word	0x0800435c
 8000418:	0800437c 	.word	0x0800437c
 800041c:	080043a8 	.word	0x080043a8
 8000420:	080043d0 	.word	0x080043d0
 8000424:	080043f0 	.word	0x080043f0
 8000428:	08004418 	.word	0x08004418
 800042c:	08004448 	.word	0x08004448
 8000430:	40011000 	.word	0x40011000
 8000434:	08004478 	.word	0x08004478
 8000438:	08004498 	.word	0x08004498
 800043c:	080044b0 	.word	0x080044b0
        sprintf(uart_buffer, "%02X", uid[i]);
 8000440:	1d3a      	adds	r2, r7, #4
 8000442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000444:	4413      	add	r3, r2
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	497b      	ldr	r1, [pc, #492]	@ (8000638 <main+0x4dc>)
 800044c:	487b      	ldr	r0, [pc, #492]	@ (800063c <main+0x4e0>)
 800044e:	f003 fa57 	bl	8003900 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000452:	487a      	ldr	r0, [pc, #488]	@ (800063c <main+0x4e0>)
 8000454:	f7ff fe7a 	bl	800014c <strlen>
 8000458:	4603      	mov	r3, r0
 800045a:	b29a      	uxth	r2, r3
 800045c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000460:	4976      	ldr	r1, [pc, #472]	@ (800063c <main+0x4e0>)
 8000462:	4877      	ldr	r0, [pc, #476]	@ (8000640 <main+0x4e4>)
 8000464:	f003 f877 	bl	8003556 <HAL_UART_Transmit>
        if (i < uid_length - 1) {
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	3b01      	subs	r3, #1
 800046c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800046e:	429a      	cmp	r2, r3
 8000470:	da0e      	bge.n	8000490 <main+0x334>
          sprintf(uart_buffer, " ");
 8000472:	4974      	ldr	r1, [pc, #464]	@ (8000644 <main+0x4e8>)
 8000474:	4871      	ldr	r0, [pc, #452]	@ (800063c <main+0x4e0>)
 8000476:	f003 fa43 	bl	8003900 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800047a:	4870      	ldr	r0, [pc, #448]	@ (800063c <main+0x4e0>)
 800047c:	f7ff fe66 	bl	800014c <strlen>
 8000480:	4603      	mov	r3, r0
 8000482:	b29a      	uxth	r2, r3
 8000484:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000488:	496c      	ldr	r1, [pc, #432]	@ (800063c <main+0x4e0>)
 800048a:	486d      	ldr	r0, [pc, #436]	@ (8000640 <main+0x4e4>)
 800048c:	f003 f863 	bl	8003556 <HAL_UART_Transmit>
      for (int i = 0; i < uid_length; i++) {
 8000490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000492:	3301      	adds	r3, #1
 8000494:	627b      	str	r3, [r7, #36]	@ 0x24
 8000496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	429a      	cmp	r2, r3
 800049c:	dbd0      	blt.n	8000440 <main+0x2e4>
        }
      }
      sprintf(uart_buffer, "\r\n");
 800049e:	496a      	ldr	r1, [pc, #424]	@ (8000648 <main+0x4ec>)
 80004a0:	4866      	ldr	r0, [pc, #408]	@ (800063c <main+0x4e0>)
 80004a2:	f003 fa2d 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80004a6:	4865      	ldr	r0, [pc, #404]	@ (800063c <main+0x4e0>)
 80004a8:	f7ff fe50 	bl	800014c <strlen>
 80004ac:	4603      	mov	r3, r0
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004b4:	4961      	ldr	r1, [pc, #388]	@ (800063c <main+0x4e0>)
 80004b6:	4862      	ldr	r0, [pc, #392]	@ (8000640 <main+0x4e4>)
 80004b8:	f003 f84d 	bl	8003556 <HAL_UART_Transmit>

      // Print UID in decimal
      sprintf(uart_buffer, "UID (Dec): ");
 80004bc:	4963      	ldr	r1, [pc, #396]	@ (800064c <main+0x4f0>)
 80004be:	485f      	ldr	r0, [pc, #380]	@ (800063c <main+0x4e0>)
 80004c0:	f003 fa1e 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80004c4:	485d      	ldr	r0, [pc, #372]	@ (800063c <main+0x4e0>)
 80004c6:	f7ff fe41 	bl	800014c <strlen>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004d2:	495a      	ldr	r1, [pc, #360]	@ (800063c <main+0x4e0>)
 80004d4:	485a      	ldr	r0, [pc, #360]	@ (8000640 <main+0x4e4>)
 80004d6:	f003 f83e 	bl	8003556 <HAL_UART_Transmit>

      for (int i = 0; i < uid_length; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
 80004de:	e02a      	b.n	8000536 <main+0x3da>
        sprintf(uart_buffer, "%d", uid[i]);
 80004e0:	1d3a      	adds	r2, r7, #4
 80004e2:	6a3b      	ldr	r3, [r7, #32]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4959      	ldr	r1, [pc, #356]	@ (8000650 <main+0x4f4>)
 80004ec:	4853      	ldr	r0, [pc, #332]	@ (800063c <main+0x4e0>)
 80004ee:	f003 fa07 	bl	8003900 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80004f2:	4852      	ldr	r0, [pc, #328]	@ (800063c <main+0x4e0>)
 80004f4:	f7ff fe2a 	bl	800014c <strlen>
 80004f8:	4603      	mov	r3, r0
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000500:	494e      	ldr	r1, [pc, #312]	@ (800063c <main+0x4e0>)
 8000502:	484f      	ldr	r0, [pc, #316]	@ (8000640 <main+0x4e4>)
 8000504:	f003 f827 	bl	8003556 <HAL_UART_Transmit>
        if (i < uid_length - 1) {
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	3b01      	subs	r3, #1
 800050c:	6a3a      	ldr	r2, [r7, #32]
 800050e:	429a      	cmp	r2, r3
 8000510:	da0e      	bge.n	8000530 <main+0x3d4>
          sprintf(uart_buffer, " ");
 8000512:	494c      	ldr	r1, [pc, #304]	@ (8000644 <main+0x4e8>)
 8000514:	4849      	ldr	r0, [pc, #292]	@ (800063c <main+0x4e0>)
 8000516:	f003 f9f3 	bl	8003900 <siprintf>
          HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800051a:	4848      	ldr	r0, [pc, #288]	@ (800063c <main+0x4e0>)
 800051c:	f7ff fe16 	bl	800014c <strlen>
 8000520:	4603      	mov	r3, r0
 8000522:	b29a      	uxth	r2, r3
 8000524:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000528:	4944      	ldr	r1, [pc, #272]	@ (800063c <main+0x4e0>)
 800052a:	4845      	ldr	r0, [pc, #276]	@ (8000640 <main+0x4e4>)
 800052c:	f003 f813 	bl	8003556 <HAL_UART_Transmit>
      for (int i = 0; i < uid_length; i++) {
 8000530:	6a3b      	ldr	r3, [r7, #32]
 8000532:	3301      	adds	r3, #1
 8000534:	623b      	str	r3, [r7, #32]
 8000536:	6a3a      	ldr	r2, [r7, #32]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	429a      	cmp	r2, r3
 800053c:	dbd0      	blt.n	80004e0 <main+0x384>
        }
      }
      sprintf(uart_buffer, "\r\n");
 800053e:	4942      	ldr	r1, [pc, #264]	@ (8000648 <main+0x4ec>)
 8000540:	483e      	ldr	r0, [pc, #248]	@ (800063c <main+0x4e0>)
 8000542:	f003 f9dd 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000546:	483d      	ldr	r0, [pc, #244]	@ (800063c <main+0x4e0>)
 8000548:	f7ff fe00 	bl	800014c <strlen>
 800054c:	4603      	mov	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000554:	4939      	ldr	r1, [pc, #228]	@ (800063c <main+0x4e0>)
 8000556:	483a      	ldr	r0, [pc, #232]	@ (8000640 <main+0x4e4>)
 8000558:	f002 fffd 	bl	8003556 <HAL_UART_Transmit>

      // Calculate and display UID as a single number (for shorter UIDs)
      if (uid_length <= 4) {
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	2b04      	cmp	r3, #4
 8000560:	dc23      	bgt.n	80005aa <main+0x44e>
        uint32_t uid_number = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < uid_length; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	61bb      	str	r3, [r7, #24]
 800056a:	e00a      	b.n	8000582 <main+0x426>
          uid_number = (uid_number << 8) | uid[i];
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	021b      	lsls	r3, r3, #8
 8000570:	1d39      	adds	r1, r7, #4
 8000572:	69ba      	ldr	r2, [r7, #24]
 8000574:	440a      	add	r2, r1
 8000576:	7812      	ldrb	r2, [r2, #0]
 8000578:	4313      	orrs	r3, r2
 800057a:	61fb      	str	r3, [r7, #28]
        for (int i = 0; i < uid_length; i++) {
 800057c:	69bb      	ldr	r3, [r7, #24]
 800057e:	3301      	adds	r3, #1
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	69ba      	ldr	r2, [r7, #24]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	429a      	cmp	r2, r3
 8000588:	dbf0      	blt.n	800056c <main+0x410>
        }
        sprintf(uart_buffer, "UID (Number): %lu\r\n", uid_number);
 800058a:	69fa      	ldr	r2, [r7, #28]
 800058c:	4931      	ldr	r1, [pc, #196]	@ (8000654 <main+0x4f8>)
 800058e:	482b      	ldr	r0, [pc, #172]	@ (800063c <main+0x4e0>)
 8000590:	f003 f9b6 	bl	8003900 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000594:	4829      	ldr	r0, [pc, #164]	@ (800063c <main+0x4e0>)
 8000596:	f7ff fdd9 	bl	800014c <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a2:	4926      	ldr	r1, [pc, #152]	@ (800063c <main+0x4e0>)
 80005a4:	4826      	ldr	r0, [pc, #152]	@ (8000640 <main+0x4e4>)
 80005a6:	f002 ffd6 	bl	8003556 <HAL_UART_Transmit>
      }

      sprintf(uart_buffer, "==========================================\r\n");
 80005aa:	492b      	ldr	r1, [pc, #172]	@ (8000658 <main+0x4fc>)
 80005ac:	4823      	ldr	r0, [pc, #140]	@ (800063c <main+0x4e0>)
 80005ae:	f003 f9a7 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80005b2:	4822      	ldr	r0, [pc, #136]	@ (800063c <main+0x4e0>)
 80005b4:	f7ff fdca 	bl	800014c <strlen>
 80005b8:	4603      	mov	r3, r0
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c0:	491e      	ldr	r1, [pc, #120]	@ (800063c <main+0x4e0>)
 80005c2:	481f      	ldr	r0, [pc, #124]	@ (8000640 <main+0x4e4>)
 80005c4:	f002 ffc7 	bl	8003556 <HAL_UART_Transmit>

      // Wait before next read to avoid spamming
      HAL_Delay(2000);
 80005c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005cc:	f001 fb50 	bl	8001c70 <HAL_Delay>

      sprintf(uart_buffer, "Remove card and place another one...\r\n");
 80005d0:	4922      	ldr	r1, [pc, #136]	@ (800065c <main+0x500>)
 80005d2:	481a      	ldr	r0, [pc, #104]	@ (800063c <main+0x4e0>)
 80005d4:	f003 f994 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80005d8:	4818      	ldr	r0, [pc, #96]	@ (800063c <main+0x4e0>)
 80005da:	f7ff fdb7 	bl	800014c <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005e6:	4915      	ldr	r1, [pc, #84]	@ (800063c <main+0x4e0>)
 80005e8:	4815      	ldr	r0, [pc, #84]	@ (8000640 <main+0x4e4>)
 80005ea:	f002 ffb4 	bl	8003556 <HAL_UART_Transmit>
 80005ee:	e01d      	b.n	800062c <main+0x4d0>

    } else {
      // No card found or error
      // Only print error message occasionally to avoid spam
      static uint32_t last_no_card_message = 0;
      if (HAL_GetTick() - last_no_card_message > 5000) { // Every 5 seconds
 80005f0:	f001 fb34 	bl	8001c5c <HAL_GetTick>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <main+0x504>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000600:	4293      	cmp	r3, r2
 8000602:	d913      	bls.n	800062c <main+0x4d0>
        sprintf(uart_buffer, "Scanning for NFC cards...\r\n");
 8000604:	4917      	ldr	r1, [pc, #92]	@ (8000664 <main+0x508>)
 8000606:	480d      	ldr	r0, [pc, #52]	@ (800063c <main+0x4e0>)
 8000608:	f003 f97a 	bl	8003900 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800060c:	480b      	ldr	r0, [pc, #44]	@ (800063c <main+0x4e0>)
 800060e:	f7ff fd9d 	bl	800014c <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29a      	uxth	r2, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800061a:	4908      	ldr	r1, [pc, #32]	@ (800063c <main+0x4e0>)
 800061c:	4808      	ldr	r0, [pc, #32]	@ (8000640 <main+0x4e4>)
 800061e:	f002 ff9a 	bl	8003556 <HAL_UART_Transmit>
        last_no_card_message = HAL_GetTick();
 8000622:	f001 fb1b 	bl	8001c5c <HAL_GetTick>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0d      	ldr	r2, [pc, #52]	@ (8000660 <main+0x504>)
 800062a:	6013      	str	r3, [r2, #0]
      }
    }

    // Small delay between scans
    HAL_Delay(500);
 800062c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000630:	f001 fb1e 	bl	8001c70 <HAL_Delay>
  {
 8000634:	e698      	b.n	8000368 <main+0x20c>
 8000636:	bf00      	nop
 8000638:	080044bc 	.word	0x080044bc
 800063c:	20000230 	.word	0x20000230
 8000640:	200001d0 	.word	0x200001d0
 8000644:	080044c4 	.word	0x080044c4
 8000648:	080044c8 	.word	0x080044c8
 800064c:	080044cc 	.word	0x080044cc
 8000650:	080044d8 	.word	0x080044d8
 8000654:	080044dc 	.word	0x080044dc
 8000658:	08004448 	.word	0x08004448
 800065c:	080044f0 	.word	0x080044f0
 8000660:	200002f8 	.word	0x200002f8
 8000664:	08004518 	.word	0x08004518

08000668 <Test_SPI_Connection>:
}

/* USER CODE BEGIN 4 */
/* Diagnostic Functions */

void Test_SPI_Connection(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af02      	add	r7, sp, #8
  // Test basic SPI functionality
  uint8_t test_data = 0xAA;
 800066e:	23aa      	movs	r3, #170	@ 0xaa
 8000670:	71fb      	strb	r3, [r7, #7]
  uint8_t received_data = 0x00;
 8000672:	2300      	movs	r3, #0
 8000674:	71bb      	strb	r3, [r7, #6]

  sprintf(uart_buffer, "  - CS pin test (PA4)...\r\n");
 8000676:	492a      	ldr	r1, [pc, #168]	@ (8000720 <Test_SPI_Connection+0xb8>)
 8000678:	482a      	ldr	r0, [pc, #168]	@ (8000724 <Test_SPI_Connection+0xbc>)
 800067a:	f003 f941 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800067e:	4829      	ldr	r0, [pc, #164]	@ (8000724 <Test_SPI_Connection+0xbc>)
 8000680:	f7ff fd64 	bl	800014c <strlen>
 8000684:	4603      	mov	r3, r0
 8000686:	b29a      	uxth	r2, r3
 8000688:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800068c:	4925      	ldr	r1, [pc, #148]	@ (8000724 <Test_SPI_Connection+0xbc>)
 800068e:	4826      	ldr	r0, [pc, #152]	@ (8000728 <Test_SPI_Connection+0xc0>)
 8000690:	f002 ff61 	bl	8003556 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2110      	movs	r1, #16
 8000698:	4824      	ldr	r0, [pc, #144]	@ (800072c <Test_SPI_Connection+0xc4>)
 800069a:	f001 fd75 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800069e:	200a      	movs	r0, #10
 80006a0:	f001 fae6 	bl	8001c70 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2110      	movs	r1, #16
 80006a8:	4820      	ldr	r0, [pc, #128]	@ (800072c <Test_SPI_Connection+0xc4>)
 80006aa:	f001 fd6d 	bl	8002188 <HAL_GPIO_WritePin>

  sprintf(uart_buffer, "  - SPI loopback test...\r\n");
 80006ae:	4920      	ldr	r1, [pc, #128]	@ (8000730 <Test_SPI_Connection+0xc8>)
 80006b0:	481c      	ldr	r0, [pc, #112]	@ (8000724 <Test_SPI_Connection+0xbc>)
 80006b2:	f003 f925 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80006b6:	481b      	ldr	r0, [pc, #108]	@ (8000724 <Test_SPI_Connection+0xbc>)
 80006b8:	f7ff fd48 	bl	800014c <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c4:	4917      	ldr	r1, [pc, #92]	@ (8000724 <Test_SPI_Connection+0xbc>)
 80006c6:	4818      	ldr	r0, [pc, #96]	@ (8000728 <Test_SPI_Connection+0xc0>)
 80006c8:	f002 ff45 	bl	8003556 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2110      	movs	r1, #16
 80006d0:	4816      	ldr	r0, [pc, #88]	@ (800072c <Test_SPI_Connection+0xc4>)
 80006d2:	f001 fd59 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &test_data, &received_data, 1, 1000);
 80006d6:	1dba      	adds	r2, r7, #6
 80006d8:	1df9      	adds	r1, r7, #7
 80006da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	4814      	ldr	r0, [pc, #80]	@ (8000734 <Test_SPI_Connection+0xcc>)
 80006e4:	f002 fc84 	bl	8002ff0 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2110      	movs	r1, #16
 80006ec:	480f      	ldr	r0, [pc, #60]	@ (800072c <Test_SPI_Connection+0xc4>)
 80006ee:	f001 fd4b 	bl	8002188 <HAL_GPIO_WritePin>

  sprintf(uart_buffer, "  - Sent: 0x%02X, Received: 0x%02X\r\n", test_data, received_data);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	461a      	mov	r2, r3
 80006f6:	79bb      	ldrb	r3, [r7, #6]
 80006f8:	490f      	ldr	r1, [pc, #60]	@ (8000738 <Test_SPI_Connection+0xd0>)
 80006fa:	480a      	ldr	r0, [pc, #40]	@ (8000724 <Test_SPI_Connection+0xbc>)
 80006fc:	f003 f900 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000700:	4808      	ldr	r0, [pc, #32]	@ (8000724 <Test_SPI_Connection+0xbc>)
 8000702:	f7ff fd23 	bl	800014c <strlen>
 8000706:	4603      	mov	r3, r0
 8000708:	b29a      	uxth	r2, r3
 800070a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800070e:	4905      	ldr	r1, [pc, #20]	@ (8000724 <Test_SPI_Connection+0xbc>)
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <Test_SPI_Connection+0xc0>)
 8000712:	f002 ff20 	bl	8003556 <HAL_UART_Transmit>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	08004534 	.word	0x08004534
 8000724:	20000230 	.word	0x20000230
 8000728:	200001d0 	.word	0x200001d0
 800072c:	40010800 	.word	0x40010800
 8000730:	08004550 	.word	0x08004550
 8000734:	20000120 	.word	0x20000120
 8000738:	0800456c 	.word	0x0800456c

0800073c <Test_Raw_SPI_Communication>:

void Test_Raw_SPI_Communication(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af02      	add	r7, sp, #8
  // Test raw PN532 SPI commands
  uint8_t status_cmd[2] = {0x02, 0x00}; // Status read command
 8000742:	2302      	movs	r3, #2
 8000744:	80bb      	strh	r3, [r7, #4]

  sprintf(uart_buffer, "  - Sending status read command...\r\n");
 8000746:	492a      	ldr	r1, [pc, #168]	@ (80007f0 <Test_Raw_SPI_Communication+0xb4>)
 8000748:	482a      	ldr	r0, [pc, #168]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 800074a:	f003 f8d9 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800074e:	4829      	ldr	r0, [pc, #164]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 8000750:	f7ff fcfc 	bl	800014c <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075c:	4925      	ldr	r1, [pc, #148]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 800075e:	4826      	ldr	r0, [pc, #152]	@ (80007f8 <Test_Raw_SPI_Communication+0xbc>)
 8000760:	f002 fef9 	bl	8003556 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2110      	movs	r1, #16
 8000768:	4824      	ldr	r0, [pc, #144]	@ (80007fc <Test_Raw_SPI_Communication+0xc0>)
 800076a:	f001 fd0d 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800076e:	2001      	movs	r0, #1
 8000770:	f001 fa7e 	bl	8001c70 <HAL_Delay>
  HAL_SPI_TransmitReceive(&hspi1, status_cmd, status_cmd, 2, 1000);
 8000774:	1d3a      	adds	r2, r7, #4
 8000776:	1d39      	adds	r1, r7, #4
 8000778:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2302      	movs	r3, #2
 8000780:	481f      	ldr	r0, [pc, #124]	@ (8000800 <Test_Raw_SPI_Communication+0xc4>)
 8000782:	f002 fc35 	bl	8002ff0 <HAL_SPI_TransmitReceive>
  HAL_Delay(1);
 8000786:	2001      	movs	r0, #1
 8000788:	f001 fa72 	bl	8001c70 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2110      	movs	r1, #16
 8000790:	481a      	ldr	r0, [pc, #104]	@ (80007fc <Test_Raw_SPI_Communication+0xc0>)
 8000792:	f001 fcf9 	bl	8002188 <HAL_GPIO_WritePin>

  sprintf(uart_buffer, "  - Status response: 0x%02X 0x%02X\r\n", status_cmd[0], status_cmd[1]);
 8000796:	793b      	ldrb	r3, [r7, #4]
 8000798:	461a      	mov	r2, r3
 800079a:	797b      	ldrb	r3, [r7, #5]
 800079c:	4919      	ldr	r1, [pc, #100]	@ (8000804 <Test_Raw_SPI_Communication+0xc8>)
 800079e:	4815      	ldr	r0, [pc, #84]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 80007a0:	f003 f8ae 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80007a4:	4813      	ldr	r0, [pc, #76]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 80007a6:	f7ff fcd1 	bl	800014c <strlen>
 80007aa:	4603      	mov	r3, r0
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b2:	4910      	ldr	r1, [pc, #64]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <Test_Raw_SPI_Communication+0xbc>)
 80007b6:	f002 fece 	bl	8003556 <HAL_UART_Transmit>

  if (status_cmd[1] == 0x01) {
 80007ba:	797b      	ldrb	r3, [r7, #5]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d104      	bne.n	80007ca <Test_Raw_SPI_Communication+0x8e>
    sprintf(uart_buffer, "  - PN532 appears to be ready!\r\n");
 80007c0:	4911      	ldr	r1, [pc, #68]	@ (8000808 <Test_Raw_SPI_Communication+0xcc>)
 80007c2:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 80007c4:	f003 f89c 	bl	8003900 <siprintf>
 80007c8:	e003      	b.n	80007d2 <Test_Raw_SPI_Communication+0x96>
  } else {
    sprintf(uart_buffer, "  - PN532 not ready or not connected\r\n");
 80007ca:	4910      	ldr	r1, [pc, #64]	@ (800080c <Test_Raw_SPI_Communication+0xd0>)
 80007cc:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 80007ce:	f003 f897 	bl	8003900 <siprintf>
  }
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80007d2:	4808      	ldr	r0, [pc, #32]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 80007d4:	f7ff fcba 	bl	800014c <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007e0:	4904      	ldr	r1, [pc, #16]	@ (80007f4 <Test_Raw_SPI_Communication+0xb8>)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <Test_Raw_SPI_Communication+0xbc>)
 80007e4:	f002 feb7 	bl	8003556 <HAL_UART_Transmit>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	08004594 	.word	0x08004594
 80007f4:	20000230 	.word	0x20000230
 80007f8:	200001d0 	.word	0x200001d0
 80007fc:	40010800 	.word	0x40010800
 8000800:	20000120 	.word	0x20000120
 8000804:	080045bc 	.word	0x080045bc
 8000808:	080045e4 	.word	0x080045e4
 800080c:	08004608 	.word	0x08004608

08000810 <Test_PN532_Wakeup>:

void Test_PN532_Wakeup(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af02      	add	r7, sp, #8
  sprintf(uart_buffer, "  - Enhanced wakeup sequence...\r\n");
 8000816:	494e      	ldr	r1, [pc, #312]	@ (8000950 <Test_PN532_Wakeup+0x140>)
 8000818:	484e      	ldr	r0, [pc, #312]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 800081a:	f003 f871 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 800081e:	484d      	ldr	r0, [pc, #308]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 8000820:	f7ff fc94 	bl	800014c <strlen>
 8000824:	4603      	mov	r3, r0
 8000826:	b29a      	uxth	r2, r3
 8000828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082c:	4949      	ldr	r1, [pc, #292]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 800082e:	484a      	ldr	r0, [pc, #296]	@ (8000958 <Test_PN532_Wakeup+0x148>)
 8000830:	f002 fe91 	bl	8003556 <HAL_UART_Transmit>

  // Step 1: Long reset pulse
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2110      	movs	r1, #16
 8000838:	4848      	ldr	r0, [pc, #288]	@ (800095c <Test_PN532_Wakeup+0x14c>)
 800083a:	f001 fca5 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_Delay(100);  // Hold CS low longer
 800083e:	2064      	movs	r0, #100	@ 0x64
 8000840:	f001 fa16 	bl	8001c70 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	2110      	movs	r1, #16
 8000848:	4844      	ldr	r0, [pc, #272]	@ (800095c <Test_PN532_Wakeup+0x14c>)
 800084a:	f001 fc9d 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_Delay(100);  // Wait for stabilization
 800084e:	2064      	movs	r0, #100	@ 0x64
 8000850:	f001 fa0e 	bl	8001c70 <HAL_Delay>

  // Step 2: Send proper wakeup command
  uint8_t wakeup_data = 0x55;  // PN532 wakeup command
 8000854:	2355      	movs	r3, #85	@ 0x55
 8000856:	70fb      	strb	r3, [r7, #3]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2110      	movs	r1, #16
 800085c:	483f      	ldr	r0, [pc, #252]	@ (800095c <Test_PN532_Wakeup+0x14c>)
 800085e:	f001 fc93 	bl	8002188 <HAL_GPIO_WritePin>
  HAL_Delay(10);  // Longer setup time
 8000862:	200a      	movs	r0, #10
 8000864:	f001 fa04 	bl	8001c70 <HAL_Delay>
  HAL_SPI_Transmit(&hspi1, &wakeup_data, 1, 1000);
 8000868:	1cf9      	adds	r1, r7, #3
 800086a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800086e:	2201      	movs	r2, #1
 8000870:	483b      	ldr	r0, [pc, #236]	@ (8000960 <Test_PN532_Wakeup+0x150>)
 8000872:	f002 fa79 	bl	8002d68 <HAL_SPI_Transmit>
  HAL_Delay(10);  // Longer hold time
 8000876:	200a      	movs	r0, #10
 8000878:	f001 f9fa 	bl	8001c70 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2110      	movs	r1, #16
 8000880:	4836      	ldr	r0, [pc, #216]	@ (800095c <Test_PN532_Wakeup+0x14c>)
 8000882:	f001 fc81 	bl	8002188 <HAL_GPIO_WritePin>

  HAL_Delay(1000);  // Wait much longer for PN532 to wake up
 8000886:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800088a:	f001 f9f1 	bl	8001c70 <HAL_Delay>

  // Step 3: Multiple status checks
  for (int attempt = 1; attempt <= 5; attempt++) {
 800088e:	2301      	movs	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	e048      	b.n	8000926 <Test_PN532_Wakeup+0x116>
    uint8_t status_cmd[2] = {0x02, 0x00};
 8000894:	2302      	movs	r3, #2
 8000896:	803b      	strh	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2110      	movs	r1, #16
 800089c:	482f      	ldr	r0, [pc, #188]	@ (800095c <Test_PN532_Wakeup+0x14c>)
 800089e:	f001 fc73 	bl	8002188 <HAL_GPIO_WritePin>
    HAL_Delay(5);  // Longer setup
 80008a2:	2005      	movs	r0, #5
 80008a4:	f001 f9e4 	bl	8001c70 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, status_cmd, status_cmd, 2, 1000);
 80008a8:	463a      	mov	r2, r7
 80008aa:	4639      	mov	r1, r7
 80008ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b0:	9300      	str	r3, [sp, #0]
 80008b2:	2302      	movs	r3, #2
 80008b4:	482a      	ldr	r0, [pc, #168]	@ (8000960 <Test_PN532_Wakeup+0x150>)
 80008b6:	f002 fb9b 	bl	8002ff0 <HAL_SPI_TransmitReceive>
    HAL_Delay(5);  // Longer hold
 80008ba:	2005      	movs	r0, #5
 80008bc:	f001 f9d8 	bl	8001c70 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	4825      	ldr	r0, [pc, #148]	@ (800095c <Test_PN532_Wakeup+0x14c>)
 80008c6:	f001 fc5f 	bl	8002188 <HAL_GPIO_WritePin>

    sprintf(uart_buffer, "  - Attempt %d - Status: 0x%02X 0x%02X\r\n", attempt, status_cmd[0], status_cmd[1]);
 80008ca:	783b      	ldrb	r3, [r7, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	787b      	ldrb	r3, [r7, #1]
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	4613      	mov	r3, r2
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	4923      	ldr	r1, [pc, #140]	@ (8000964 <Test_PN532_Wakeup+0x154>)
 80008d8:	481e      	ldr	r0, [pc, #120]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 80008da:	f003 f811 	bl	8003900 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 80008de:	481d      	ldr	r0, [pc, #116]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 80008e0:	f7ff fc34 	bl	800014c <strlen>
 80008e4:	4603      	mov	r3, r0
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ec:	4919      	ldr	r1, [pc, #100]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 80008ee:	481a      	ldr	r0, [pc, #104]	@ (8000958 <Test_PN532_Wakeup+0x148>)
 80008f0:	f002 fe31 	bl	8003556 <HAL_UART_Transmit>

    if (status_cmd[1] == 0x01) {
 80008f4:	787b      	ldrb	r3, [r7, #1]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d10f      	bne.n	800091a <Test_PN532_Wakeup+0x10a>
      sprintf(uart_buffer, "  - PN532 is READY!\r\n");
 80008fa:	491b      	ldr	r1, [pc, #108]	@ (8000968 <Test_PN532_Wakeup+0x158>)
 80008fc:	4815      	ldr	r0, [pc, #84]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 80008fe:	f002 ffff 	bl	8003900 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000902:	4814      	ldr	r0, [pc, #80]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 8000904:	f7ff fc22 	bl	800014c <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	b29a      	uxth	r2, r3
 800090c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000910:	4910      	ldr	r1, [pc, #64]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 8000912:	4811      	ldr	r0, [pc, #68]	@ (8000958 <Test_PN532_Wakeup+0x148>)
 8000914:	f002 fe1f 	bl	8003556 <HAL_UART_Transmit>
 8000918:	e017      	b.n	800094a <Test_PN532_Wakeup+0x13a>
      return;
    }

    HAL_Delay(200);  // Wait between attempts
 800091a:	20c8      	movs	r0, #200	@ 0xc8
 800091c:	f001 f9a8 	bl	8001c70 <HAL_Delay>
  for (int attempt = 1; attempt <= 5; attempt++) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b05      	cmp	r3, #5
 800092a:	ddb3      	ble.n	8000894 <Test_PN532_Wakeup+0x84>
  }

  sprintf(uart_buffer, "  - PN532 did not become ready after 5 attempts\r\n");
 800092c:	490f      	ldr	r1, [pc, #60]	@ (800096c <Test_PN532_Wakeup+0x15c>)
 800092e:	4809      	ldr	r0, [pc, #36]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 8000930:	f002 ffe6 	bl	8003900 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), 1000);
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 8000936:	f7ff fc09 	bl	800014c <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29a      	uxth	r2, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	4904      	ldr	r1, [pc, #16]	@ (8000954 <Test_PN532_Wakeup+0x144>)
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <Test_PN532_Wakeup+0x148>)
 8000946:	f002 fe06 	bl	8003556 <HAL_UART_Transmit>
}
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08004630 	.word	0x08004630
 8000954:	20000230 	.word	0x20000230
 8000958:	200001d0 	.word	0x200001d0
 800095c:	40010800 	.word	0x40010800
 8000960:	20000120 	.word	0x20000120
 8000964:	08004654 	.word	0x08004654
 8000968:	08004680 	.word	0x08004680
 800096c:	08004698 	.word	0x08004698

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b090      	sub	sp, #64	@ 0x40
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0318 	add.w	r3, r7, #24
 800097a:	2228      	movs	r2, #40	@ 0x28
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f002 ffe0 	bl	8003944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000992:	2302      	movs	r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000996:	2301      	movs	r3, #1
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099a:	2310      	movs	r3, #16
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a2:	f107 0318 	add.w	r3, r7, #24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fd4a 	bl	8002440 <HAL_RCC_OscConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009b2:	f000 f979 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	230f      	movs	r3, #15
 80009b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 ffb8 	bl	8002944 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009da:	f000 f965 	bl	8000ca8 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3740      	adds	r7, #64	@ 0x40
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	@ (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f001 fbc7 	bl	80021b8 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a30:	f000 f93a 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000078 	.word	0x20000078
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	000186a0 	.word	0x000186a0

08000a44 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a4a:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <MX_I2C2_Init+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a50:	4a12      	ldr	r2, [pc, #72]	@ (8000a9c <MX_I2C2_Init+0x58>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a66:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_I2C2_Init+0x50>)
 8000a82:	f001 fb99 	bl	80021b8 <HAL_I2C_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a8c:	f000 f90c 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000cc 	.word	0x200000cc
 8000a98:	40005800 	.word	0x40005800
 8000a9c:	000186a0 	.word	0x000186a0

08000aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	@ (8000b08 <MX_SPI1_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000aac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000ad4:	2230      	movs	r2, #48	@ 0x30
 8000ad6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_SPI1_Init+0x64>)
 8000af2:	f002 f8b5 	bl	8002c60 <HAL_SPI_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 f8d4 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000120 	.word	0x20000120
 8000b08:	40013000 	.word	0x40013000

08000b0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b12:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <MX_SPI2_Init+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b56:	220a      	movs	r2, #10
 8000b58:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_SPI2_Init+0x64>)
 8000b5c:	f002 f880 	bl	8002c60 <HAL_SPI_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_SPI2_Init+0x5e>
  {
    Error_Handler();
 8000b66:	f000 f89f 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000178 	.word	0x20000178
 8000b74:	40003800 	.word	0x40003800

08000b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <MX_USART1_UART_Init+0x50>)
 8000b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	@ (8000bc4 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f002 fc81 	bl	80034b6 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bba:	f000 f875 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200001d0 	.word	0x200001d0
 8000bc8:	40013800 	.word	0x40013800

08000bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a2d      	ldr	r2, [pc, #180]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b2b      	ldr	r3, [pc, #172]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf8:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a27      	ldr	r2, [pc, #156]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000bfe:	f043 0320 	orr.w	r3, r3, #32
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b25      	ldr	r3, [pc, #148]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0320 	and.w	r3, r3, #32
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <MX_GPIO_Init+0xd0>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c46:	4816      	ldr	r0, [pc, #88]	@ (8000ca0 <MX_GPIO_Init+0xd4>)
 8000c48:	f001 fa9e 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000c52:	4814      	ldr	r0, [pc, #80]	@ (8000ca4 <MX_GPIO_Init+0xd8>)
 8000c54:	f001 fa98 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <MX_GPIO_Init+0xd4>)
 8000c72:	f001 f905 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8000c76:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_GPIO_Init+0xd8>)
 8000c90:	f001 f8f6 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	40010800 	.word	0x40010800

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <Error_Handler+0x8>

08000cb4 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0c8      	sub	sp, #288	@ 0x120
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000cbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cc2:	6018      	str	r0, [r3, #0]
 8000cc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000cc8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000ccc:	6019      	str	r1, [r3, #0]
 8000cce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000cd2:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000cd6:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000cd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000cdc:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	2bff      	cmp	r3, #255	@ 0xff
 8000ce4:	d806      	bhi.n	8000cf4 <PN532_WriteFrame+0x40>
 8000ce6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000cea:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	e0aa      	b.n	8000e50 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    frame[0] = PN532_PREAMBLE;
 8000d00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000d0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d14:	2200      	movs	r2, #0
 8000d16:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000d18:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d20:	22ff      	movs	r2, #255	@ 0xff
 8000d22:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000d2a:	e010      	b.n	8000d4e <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000d2c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000d30:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000d34:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000d38:	5cd2      	ldrb	r2, [r2, r3]
 8000d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000d3e:	4413      	add	r3, r2
 8000d40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8000d44:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8000d4e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d9ea      	bls.n	8000d2c <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8000d56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d5a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d6a:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000d6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d70:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	425b      	negs	r3, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d84:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000d8c:	e023      	b.n	8000dd6 <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000d8e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000d92:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000d96:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000d9a:	6812      	ldr	r2, [r2, #0]
 8000d9c:	441a      	add	r2, r3
 8000d9e:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000da2:	3305      	adds	r3, #5
 8000da4:	7811      	ldrb	r1, [r2, #0]
 8000da6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000daa:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000dae:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000db0:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000db4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000db8:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000dc6:	4413      	add	r3, r2
 8000dc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000dcc:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000dd6:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000de0:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000de4:	8812      	ldrh	r2, [r2, #0]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d8d1      	bhi.n	8000d8e <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000dea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dee:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	3305      	adds	r3, #5
 8000df6:	f897 211f 	ldrb.w	r2, [r7, #287]	@ 0x11f
 8000dfa:	43d2      	mvns	r2, r2
 8000dfc:	b2d1      	uxtb	r1, r2
 8000dfe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e02:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e06:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000e08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e0c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	3306      	adds	r3, #6
 8000e14:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e18:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000e20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e30:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	3207      	adds	r2, #7
 8000e38:	b291      	uxth	r1, r2
 8000e3a:	f107 0214 	add.w	r2, r7, #20
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4798      	blx	r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	e000      	b.n	8000e50 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0c8      	sub	sp, #288	@ 0x120
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e6a:	6018      	str	r0, [r3, #0]
 8000e6c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e70:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e74:	6019      	str	r1, [r3, #0]
 8000e76:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e7a:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000e7e:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000e86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e8a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000e96:	f5a2 728d 	sub.w	r2, r2, #282	@ 0x11a
 8000e9a:	8812      	ldrh	r2, [r2, #0]
 8000e9c:	3207      	adds	r2, #7
 8000e9e:	b291      	uxth	r1, r2
 8000ea0:	f107 0214 	add.w	r2, r7, #20
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    while (buff[offset] == 0x00) {
 8000eae:	e019      	b.n	8000ee4 <PN532_ReadFrame+0x88>
        offset += 1;
 8000eb0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
        if (offset >= length + 8){
 8000eba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ebe:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	1dda      	adds	r2, r3, #7
 8000ec6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	da0a      	bge.n	8000ee4 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000ece:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ed2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	485b      	ldr	r0, [pc, #364]	@ (8001048 <PN532_ReadFrame+0x1ec>)
 8000edc:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e0ab      	b.n	800103c <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000ee4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000ee8:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000eec:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000ef0:	5cd3      	ldrb	r3, [r2, r3]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0dc      	beq.n	8000eb0 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000ef6:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000efa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000efe:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	2bff      	cmp	r3, #255	@ 0xff
 8000f06:	d00a      	beq.n	8000f1e <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000f08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	484c      	ldr	r0, [pc, #304]	@ (8001048 <PN532_ReadFrame+0x1ec>)
 8000f16:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1c:	e08e      	b.n	800103c <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8000f1e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000f22:	3301      	adds	r3, #1
 8000f24:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    if (offset >= length + 8) {
 8000f28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f2c:	f5a3 738d 	sub.w	r3, r3, #282	@ 0x11a
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	1dda      	adds	r2, r3, #7
 8000f34:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	da0a      	bge.n	8000f52 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000f3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4840      	ldr	r0, [pc, #256]	@ (800104c <PN532_ReadFrame+0x1f0>)
 8000f4a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e074      	b.n	800103c <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000f52:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000f56:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000f5a:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000f64:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000f68:	3301      	adds	r3, #1
 8000f6a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000f6e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000f72:	5cd2      	ldrb	r2, [r2, r3]
 8000f74:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8000f78:	4413      	add	r3, r2
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00a      	beq.n	8000f96 <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000f80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f84:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	4830      	ldr	r0, [pc, #192]	@ (8001050 <PN532_ReadFrame+0x1f4>)
 8000f8e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	e052      	b.n	800103c <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000f9c:	e014      	b.n	8000fc8 <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000f9e:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000fa2:	1c9a      	adds	r2, r3, #2
 8000fa4:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000fa8:	4413      	add	r3, r2
 8000faa:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000fae:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000fb2:	5cd2      	ldrb	r2, [r2, r3]
 8000fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000fb8:	4413      	add	r3, r2
 8000fba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000fbe:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
 8000fc8:	f897 211b 	ldrb.w	r2, [r7, #283]	@ 0x11b
 8000fcc:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d2e4      	bcs.n	8000f9e <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00a      	beq.n	8000ff2 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000fdc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000fe0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	481a      	ldr	r0, [pc, #104]	@ (8001054 <PN532_ReadFrame+0x1f8>)
 8000fea:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff0:	e024      	b.n	800103c <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 8000ff8:	e018      	b.n	800102c <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000ffa:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8000ffe:	1c9a      	adds	r2, r3, #2
 8001000:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8001004:	441a      	add	r2, r3
 8001006:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800100a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800100e:	f5a1 718c 	sub.w	r1, r1, #280	@ 0x118
 8001012:	6809      	ldr	r1, [r1, #0]
 8001014:	440b      	add	r3, r1
 8001016:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800101a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800101e:	5c8a      	ldrb	r2, [r1, r2]
 8001020:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8001022:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8001026:	3301      	adds	r3, #1
 8001028:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 800102c:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8001030:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8001034:	429a      	cmp	r2, r3
 8001036:	d3e0      	bcc.n	8000ffa <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8001038:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
}
 800103c:	4618      	mov	r0, r3
 800103e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	080046cc 	.word	0x080046cc
 800104c:	08004700 	.word	0x08004700
 8001050:	0800471c 	.word	0x0800471c
 8001054:	0800474c 	.word	0x0800474c

08001058 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b0c7      	sub	sp, #284	@ 0x11c
 800105c:	af00      	add	r7, sp, #0
 800105e:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8001062:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8001066:	6020      	str	r0, [r4, #0]
 8001068:	4608      	mov	r0, r1
 800106a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800106e:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8001072:	600a      	str	r2, [r1, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800107a:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800107e:	4602      	mov	r2, r0
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001086:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800108a:	460a      	mov	r2, r1
 800108c:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 800108e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001096:	22d4      	movs	r2, #212	@ 0xd4
 8001098:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 800109a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800109e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80010a2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80010a6:	f2a2 120d 	subw	r2, r2, #269	@ 0x10d
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80010b4:	e012      	b.n	80010dc <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 80010b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80010ba:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80010be:	441a      	add	r2, r3
 80010c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80010c4:	3302      	adds	r3, #2
 80010c6:	7811      	ldrb	r1, [r2, #0]
 80010c8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80010cc:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80010d0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 80010d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80010d6:	3301      	adds	r3, #1
 80010d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
 80010dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	f8b7 212c 	ldrh.w	r2, [r7, #300]	@ 0x12c
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d8e5      	bhi.n	80010b6 <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 80010ea:	f8b7 312c 	ldrh.w	r3, [r7, #300]	@ 0x12c
 80010ee:	3302      	adds	r3, #2
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f107 0110 	add.w	r1, r7, #16
 80010f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f7ff fdd8 	bl	8000cb4 <PN532_WriteFrame>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d011      	beq.n	800112e <PN532_CallFunction+0xd6>
        pn532->wakeup();
 800110a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800110e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8001118:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800111c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	485b      	ldr	r0, [pc, #364]	@ (8001294 <PN532_CallFunction+0x23c>)
 8001126:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	e0ac      	b.n	8001288 <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 800112e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001132:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800113e:	4798      	blx	r3
 8001140:	4603      	mov	r3, r0
 8001142:	f083 0301 	eor.w	r3, r3, #1
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	e09a      	b.n	8001288 <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8001152:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001156:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f107 0210 	add.w	r2, r7, #16
 8001162:	2106      	movs	r1, #6
 8001164:	4610      	mov	r0, r2
 8001166:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800116e:	e01c      	b.n	80011aa <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8001170:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8001174:	4a48      	ldr	r2, [pc, #288]	@ (8001298 <PN532_CallFunction+0x240>)
 8001176:	5cd2      	ldrb	r2, [r2, r3]
 8001178:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800117c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001180:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8001184:	5ccb      	ldrb	r3, [r1, r3]
 8001186:	429a      	cmp	r2, r3
 8001188:	d00a      	beq.n	80011a0 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 800118a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800118e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4841      	ldr	r0, [pc, #260]	@ (800129c <PN532_CallFunction+0x244>)
 8001198:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e073      	b.n	8001288 <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80011a0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80011a4:	3301      	adds	r3, #1
 80011a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80011aa:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80011ae:	2b05      	cmp	r3, #5
 80011b0:	d9de      	bls.n	8001170 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 80011b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 80011c2:	4798      	blx	r3
 80011c4:	4603      	mov	r3, r0
 80011c6:	f083 0301 	eor.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	e058      	b.n	8001288 <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 80011d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011da:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	3302      	adds	r3, #2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0110 	add.w	r1, r7, #16
 80011e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f7ff fe33 	bl	8000e5c <PN532_ReadFrame>
 80011f6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 80011fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2bd5      	cmp	r3, #213	@ 0xd5
 8001206:	d10d      	bne.n	8001224 <PN532_CallFunction+0x1cc>
 8001208:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800120c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001210:	785b      	ldrb	r3, [r3, #1]
 8001212:	461a      	mov	r2, r3
 8001214:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001218:	f2a3 130d 	subw	r3, r3, #269	@ 0x10d
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	429a      	cmp	r2, r3
 8001222:	d00a      	beq.n	800123a <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8001224:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001228:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	481b      	ldr	r0, [pc, #108]	@ (80012a0 <PN532_CallFunction+0x248>)
 8001232:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	e026      	b.n	8001288 <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 8001240:	e015      	b.n	800126e <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8001242:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001246:	1c9a      	adds	r2, r3, #2
 8001248:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800124c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8001250:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8001254:	6809      	ldr	r1, [r1, #0]
 8001256:	440b      	add	r3, r1
 8001258:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800125c:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8001260:	5c8a      	ldrb	r2, [r1, r2]
 8001262:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8001264:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001268:	3301      	adds	r3, #1
 800126a:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
 800126e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001272:	b29b      	uxth	r3, r3
 8001274:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001278:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800127c:	8812      	ldrh	r2, [r2, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d8df      	bhi.n	8001242 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8001282:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001286:	3b02      	subs	r3, #2
}
 8001288:	4618      	mov	r0, r3
 800128a:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800128e:	46bd      	mov	sp, r7
 8001290:	bd90      	pop	{r4, r7, pc}
 8001292:	bf00      	nop
 8001294:	08004780 	.word	0x08004780
 8001298:	08004850 	.word	0x08004850
 800129c:	08004794 	.word	0x08004794
 80012a0:	080047c0 	.word	0x080047c0

080012a4 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af04      	add	r7, sp, #16
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 80012ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012b2:	9302      	str	r3, [sp, #8]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	2300      	movs	r3, #0
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2304      	movs	r3, #4
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	2102      	movs	r1, #2
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fec8 	bl	8001058 <PN532_CallFunction>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ce:	d106      	bne.n	80012de <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <PN532_GetFirmwareVersion+0x44>)
 80012d6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	e000      	b.n	80012e0 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	080047e8 	.word	0x080047e8

080012ec <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af04      	add	r7, sp, #16
 80012f2:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 80012f4:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <PN532_SamConfiguration+0x40>)
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	4611      	mov	r1, r2
 80012fe:	8019      	strh	r1, [r3, #0]
 8001300:	3302      	adds	r3, #2
 8001302:	0c12      	lsrs	r2, r2, #16
 8001304:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2303      	movs	r3, #3
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	2200      	movs	r2, #0
 800131a:	2114      	movs	r1, #20
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fe9b 	bl	8001058 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	08004804 	.word	0x08004804

08001330 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b090      	sub	sp, #64	@ 0x40
 8001334:	af04      	add	r7, sp, #16
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	4613      	mov	r3, r2
 800133e:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8001340:	2301      	movs	r3, #1
 8001342:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 800134c:	f107 0210 	add.w	r2, r7, #16
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2302      	movs	r3, #2
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2313      	movs	r3, #19
 8001360:	214a      	movs	r1, #74	@ 0x4a
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f7ff fe78 	bl	8001058 <PN532_CallFunction>
 8001368:	62b8      	str	r0, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 800136a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800136c:	2b00      	cmp	r3, #0
 800136e:	da02      	bge.n	8001376 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	e02e      	b.n	80013d4 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8001376:	7c3b      	ldrb	r3, [r7, #16]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d006      	beq.n	800138a <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	4816      	ldr	r0, [pc, #88]	@ (80013dc <PN532_ReadPassiveTarget+0xac>)
 8001382:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	e024      	b.n	80013d4 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 800138a:	7d7b      	ldrb	r3, [r7, #21]
 800138c:	2b07      	cmp	r3, #7
 800138e:	d906      	bls.n	800139e <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	4812      	ldr	r0, [pc, #72]	@ (80013e0 <PN532_ReadPassiveTarget+0xb0>)
 8001396:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	e01a      	b.n	80013d4 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013a4:	e010      	b.n	80013c8 <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 80013a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013aa:	1d9a      	adds	r2, r3, #6
 80013ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	440b      	add	r3, r1
 80013b4:	3230      	adds	r2, #48	@ 0x30
 80013b6:	443a      	add	r2, r7
 80013b8:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 80013bc:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 80013be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013c2:	3301      	adds	r3, #1
 80013c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013c8:	7d7b      	ldrb	r3, [r7, #21]
 80013ca:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3e9      	bcc.n	80013a6 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 80013d2:	7d7b      	ldrb	r3, [r7, #21]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3730      	adds	r7, #48	@ 0x30
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	08004808 	.word	0x08004808
 80013e0:	08004828 	.word	0x08004828

080013e4 <PN532_Reset>:
extern UART_HandleTypeDef huart1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
//    HAL_Delay(100);
//    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
//    HAL_Delay(500);
//    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
//    HAL_Delay(100);
    return PN532_STATUS_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
	...

080013f4 <PN532_Log>:

void PN532_Log(const char* log) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)log, strlen(log), 1000);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7fe fea5 	bl	800014c <strlen>
 8001402:	4603      	mov	r3, r0
 8001404:	b29a      	uxth	r2, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4803      	ldr	r0, [pc, #12]	@ (800141c <PN532_Log+0x28>)
 800140e:	f002 f8a2 	bl	8003556 <HAL_UART_Transmit>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200001d0 	.word	0x200001d0

08001420 <PN532_Init>:

void PN532_Init(PN532* pn532) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
    PN532_SPI_Init(pn532);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f997 	bl	800175c <PN532_SPI_Init>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <reverse_bit>:
 * End: Reset and Log implements
 **************************************************************************/
/**************************************************************************
 * SPI
 **************************************************************************/
uint8_t reverse_bit(uint8_t num) {
 8001436:	b480      	push	{r7}
 8001438:	b085      	sub	sp, #20
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 8; i++) {
 8001444:	2300      	movs	r3, #0
 8001446:	73bb      	strb	r3, [r7, #14]
 8001448:	e00f      	b.n	800146a <reverse_bit+0x34>
        result <<= 1;
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
        result += (num & 1);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	4413      	add	r3, r2
 800145c:	73fb      	strb	r3, [r7, #15]
        num >>= 1;
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	3301      	adds	r3, #1
 8001468:	73bb      	strb	r3, [r7, #14]
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	2b07      	cmp	r3, #7
 800146e:	d9ec      	bls.n	800144a <reverse_bit+0x14>
    }
    return result;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <spi_rw>:

void spi_rw(uint8_t* data, uint8_t count) {
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b087      	sub	sp, #28
 8001480:	af02      	add	r7, sp, #8
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
    // CS Low (PA4)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2110      	movs	r1, #16
 800148c:	4823      	ldr	r0, [pc, #140]	@ (800151c <spi_rw+0xa0>)
 800148e:	f000 fe7b 	bl	8002188 <HAL_GPIO_WritePin>
    HAL_Delay(5);  // Longer setup time for PHASE_2EDGE
 8001492:	2005      	movs	r0, #5
 8001494:	f000 fbec 	bl	8001c70 <HAL_Delay>

#ifdef _SPI_HARDWARE_LSB
    // If your hardware requires bit reversal
    for (uint8_t i = 0; i < count; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e00e      	b.n	80014bc <spi_rw+0x40>
        data[i] = reverse_bit(data[i]);
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	7819      	ldrb	r1, [r3, #0]
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	18d4      	adds	r4, r2, r3
 80014ac:	4608      	mov	r0, r1
 80014ae:	f7ff ffc2 	bl	8001436 <reverse_bit>
 80014b2:	4603      	mov	r3, r0
 80014b4:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < count; i++) {
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3301      	adds	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3ec      	bcc.n	800149e <spi_rw+0x22>
    }
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, 1000);
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014cc:	9200      	str	r2, [sp, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4813      	ldr	r0, [pc, #76]	@ (8001520 <spi_rw+0xa4>)
 80014d4:	f001 fd8c 	bl	8002ff0 <HAL_SPI_TransmitReceive>
    for (uint8_t i = 0; i < count; i++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	73bb      	strb	r3, [r7, #14]
 80014dc:	e00e      	b.n	80014fc <spi_rw+0x80>
        data[i] = reverse_bit(data[i]);
 80014de:	7bbb      	ldrb	r3, [r7, #14]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	7819      	ldrb	r1, [r3, #0]
 80014e6:	7bbb      	ldrb	r3, [r7, #14]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	18d4      	adds	r4, r2, r3
 80014ec:	4608      	mov	r0, r1
 80014ee:	f7ff ffa2 	bl	8001436 <reverse_bit>
 80014f2:	4603      	mov	r3, r0
 80014f4:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < count; i++) {
 80014f6:	7bbb      	ldrb	r3, [r7, #14]
 80014f8:	3301      	adds	r3, #1
 80014fa:	73bb      	strb	r3, [r7, #14]
 80014fc:	7bba      	ldrb	r2, [r7, #14]
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3ec      	bcc.n	80014de <spi_rw+0x62>
#else
    // Standard SPI communication (MSB first)
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, 1000);
#endif

    HAL_Delay(5);  // Longer hold time for PHASE_2EDGE
 8001504:	2005      	movs	r0, #5
 8001506:	f000 fbb3 	bl	8001c70 <HAL_Delay>
    // CS High (PA4)
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	2110      	movs	r1, #16
 800150e:	4803      	ldr	r0, [pc, #12]	@ (800151c <spi_rw+0xa0>)
 8001510:	f000 fe3a 	bl	8002188 <HAL_GPIO_WritePin>
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	40010800 	.word	0x40010800
 8001520:	20000120 	.word	0x20000120

08001524 <PN532_SPI_ReadData>:
int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8001524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001528:	b087      	sub	sp, #28
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	460b      	mov	r3, r1
 8001530:	807b      	strh	r3, [r7, #2]
 8001532:	466b      	mov	r3, sp
 8001534:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	1c59      	adds	r1, r3, #1
 800153a:	1e4b      	subs	r3, r1, #1
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	460a      	mov	r2, r1
 8001540:	2300      	movs	r3, #0
 8001542:	4690      	mov	r8, r2
 8001544:	4699      	mov	r9, r3
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800155a:	460a      	mov	r2, r1
 800155c:	2300      	movs	r3, #0
 800155e:	4614      	mov	r4, r2
 8001560:	461d      	mov	r5, r3
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	00eb      	lsls	r3, r5, #3
 800156c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001570:	00e2      	lsls	r2, r4, #3
 8001572:	460b      	mov	r3, r1
 8001574:	3307      	adds	r3, #7
 8001576:	08db      	lsrs	r3, r3, #3
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	ebad 0d03 	sub.w	sp, sp, r3
 800157e:	466b      	mov	r3, sp
 8001580:	3300      	adds	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2203      	movs	r2, #3
 8001588:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 800158a:	2005      	movs	r0, #5
 800158c:	f000 fb70 	bl	8001c70 <HAL_Delay>
    spi_rw(frame, count + 1);
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	3301      	adds	r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff ff6e 	bl	800147c <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	75fb      	strb	r3, [r7, #23]
 80015a4:	e00a      	b.n	80015bc <PN532_SPI_ReadData+0x98>
        data[i] = frame[i + 1];
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	440b      	add	r3, r1
 80015b0:	68f9      	ldr	r1, [r7, #12]
 80015b2:	5c8a      	ldrb	r2, [r1, r2]
 80015b4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	3301      	adds	r3, #1
 80015ba:	75fb      	strb	r3, [r7, #23]
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	887a      	ldrh	r2, [r7, #2]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d8ef      	bhi.n	80015a6 <PN532_SPI_ReadData+0x82>
    }
    return PN532_STATUS_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	46b5      	mov	sp, r6
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	371c      	adds	r7, #28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015d4 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 80015d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015d8:	b087      	sub	sp, #28
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]
 80015e2:	466b      	mov	r3, sp
 80015e4:	461e      	mov	r6, r3
    uint8_t frame[count + 1];
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	1c59      	adds	r1, r3, #1
 80015ea:	1e4b      	subs	r3, r1, #1
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	460a      	mov	r2, r1
 80015f0:	2300      	movs	r3, #0
 80015f2:	4690      	mov	r8, r2
 80015f4:	4699      	mov	r9, r3
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800160a:	460a      	mov	r2, r1
 800160c:	2300      	movs	r3, #0
 800160e:	4614      	mov	r4, r2
 8001610:	461d      	mov	r5, r3
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	00eb      	lsls	r3, r5, #3
 800161c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001620:	00e2      	lsls	r2, r4, #3
 8001622:	460b      	mov	r3, r1
 8001624:	3307      	adds	r3, #7
 8001626:	08db      	lsrs	r3, r3, #3
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	ebad 0d03 	sub.w	sp, sp, r3
 800162e:	466b      	mov	r3, sp
 8001630:	3300      	adds	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2201      	movs	r2, #1
 8001638:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	75fb      	strb	r3, [r7, #23]
 800163e:	e00a      	b.n	8001656 <PN532_SPI_WriteData+0x82>
        frame[i + 1] = data[i];
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	441a      	add	r2, r3
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	3301      	adds	r3, #1
 800164a:	7811      	ldrb	r1, [r2, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	3301      	adds	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	b29b      	uxth	r3, r3
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	429a      	cmp	r2, r3
 800165e:	d8ef      	bhi.n	8001640 <PN532_SPI_WriteData+0x6c>
    }
    spi_rw(frame, count + 1);
 8001660:	887b      	ldrh	r3, [r7, #2]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	3301      	adds	r3, #1
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4619      	mov	r1, r3
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff ff06 	bl	800147c <spi_rw>
    return PN532_STATUS_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	46b5      	mov	sp, r6
}
 8001674:	4618      	mov	r0, r3
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800167e <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8001686:	2302      	movs	r3, #2
 8001688:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 800168a:	f000 fae7 	bl	8001c5c <HAL_GetTick>
 800168e:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001690:	e010      	b.n	80016b4 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 8001692:	200a      	movs	r0, #10
 8001694:	f000 faec 	bl	8001c70 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	2102      	movs	r1, #2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff feec 	bl	800147c <spi_rw>
        if (status[1] == _SPI_READY) {
 80016a4:	7a7b      	ldrb	r3, [r7, #9]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <PN532_SPI_WaitReady+0x30>
            return true;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00b      	b.n	80016c6 <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 80016ae:	2005      	movs	r0, #5
 80016b0:	f000 fade 	bl	8001c70 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 80016b4:	f000 fad2 	bl	8001c5c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8e6      	bhi.n	8001692 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
    // Enhanced wakeup sequence for better reliability with PHASE_2EDGE

    // Step 1: Extended reset sequence
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2110      	movs	r1, #16
 80016da:	481e      	ldr	r0, [pc, #120]	@ (8001754 <PN532_SPI_Wakeup+0x84>)
 80016dc:	f000 fd54 	bl	8002188 <HAL_GPIO_WritePin>
    HAL_Delay(200);  // Much longer reset
 80016e0:	20c8      	movs	r0, #200	@ 0xc8
 80016e2:	f000 fac5 	bl	8001c70 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2110      	movs	r1, #16
 80016ea:	481a      	ldr	r0, [pc, #104]	@ (8001754 <PN532_SPI_Wakeup+0x84>)
 80016ec:	f000 fd4c 	bl	8002188 <HAL_GPIO_WritePin>
    HAL_Delay(200);  // Stabilization time
 80016f0:	20c8      	movs	r0, #200	@ 0xc8
 80016f2:	f000 fabd 	bl	8001c70 <HAL_Delay>

    // Step 2: Send wakeup command multiple times
    uint8_t wakeup_cmd = 0x55;
 80016f6:	2355      	movs	r3, #85	@ 0x55
 80016f8:	70fb      	strb	r3, [r7, #3]

    for (int i = 0; i < 3; i++) {  // Try multiple times
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	e01c      	b.n	800173a <PN532_SPI_Wakeup+0x6a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2110      	movs	r1, #16
 8001704:	4813      	ldr	r0, [pc, #76]	@ (8001754 <PN532_SPI_Wakeup+0x84>)
 8001706:	f000 fd3f 	bl	8002188 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800170a:	200a      	movs	r0, #10
 800170c:	f000 fab0 	bl	8001c70 <HAL_Delay>
        HAL_SPI_Transmit(&hspi1, &wakeup_cmd, 1, 1000);
 8001710:	1cf9      	adds	r1, r7, #3
 8001712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001716:	2201      	movs	r2, #1
 8001718:	480f      	ldr	r0, [pc, #60]	@ (8001758 <PN532_SPI_Wakeup+0x88>)
 800171a:	f001 fb25 	bl	8002d68 <HAL_SPI_Transmit>
        HAL_Delay(10);
 800171e:	200a      	movs	r0, #10
 8001720:	f000 faa6 	bl	8001c70 <HAL_Delay>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	2110      	movs	r1, #16
 8001728:	480a      	ldr	r0, [pc, #40]	@ (8001754 <PN532_SPI_Wakeup+0x84>)
 800172a:	f000 fd2d 	bl	8002188 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800172e:	2064      	movs	r0, #100	@ 0x64
 8001730:	f000 fa9e 	bl	8001c70 <HAL_Delay>
    for (int i = 0; i < 3; i++) {  // Try multiple times
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b02      	cmp	r3, #2
 800173e:	dddf      	ble.n	8001700 <PN532_SPI_Wakeup+0x30>
    }

    // Step 3: Long stabilization wait
    HAL_Delay(1500);  // Wait 1.5 seconds for full initialization
 8001740:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001744:	f000 fa94 	bl	8001c70 <HAL_Delay>

    return PN532_STATUS_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40010800 	.word	0x40010800
 8001758:	20000120 	.word	0x20000120

0800175c <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <PN532_SPI_Init+0x3c>)
 8001768:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <PN532_SPI_Init+0x40>)
 800176e:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a0b      	ldr	r2, [pc, #44]	@ (80017a0 <PN532_SPI_Init+0x44>)
 8001774:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <PN532_SPI_Init+0x48>)
 800177a:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <PN532_SPI_Init+0x4c>)
 8001780:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <PN532_SPI_Init+0x50>)
 8001786:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	4798      	blx	r3
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	080013e5 	.word	0x080013e5
 800179c:	08001525 	.word	0x08001525
 80017a0:	080015d5 	.word	0x080015d5
 80017a4:	0800167f 	.word	0x0800167f
 80017a8:	080016d1 	.word	0x080016d1
 80017ac:	080013f5 	.word	0x080013f5

080017b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_MspInit+0x5c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4a14      	ldr	r2, [pc, #80]	@ (800180c <HAL_MspInit+0x5c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6193      	str	r3, [r2, #24]
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_MspInit+0x5c>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <HAL_MspInit+0x5c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <HAL_MspInit+0x5c>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]
 80017da:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <HAL_MspInit+0x5c>)
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <HAL_MspInit+0x60>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	4a04      	ldr	r2, [pc, #16]	@ (8001810 <HAL_MspInit+0x60>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40021000 	.word	0x40021000
 8001810:	40010000 	.word	0x40010000

08001814 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2b      	ldr	r2, [pc, #172]	@ (80018dc <HAL_I2C_MspInit+0xc8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d124      	bne.n	800187e <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4a29      	ldr	r2, [pc, #164]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	6193      	str	r3, [r2, #24]
 8001840:	4b27      	ldr	r3, [pc, #156]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800184c:	23c0      	movs	r3, #192	@ 0xc0
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001850:	2312      	movs	r3, #18
 8001852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001854:	2303      	movs	r3, #3
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	4619      	mov	r1, r3
 800185e:	4821      	ldr	r0, [pc, #132]	@ (80018e4 <HAL_I2C_MspInit+0xd0>)
 8001860:	f000 fb0e 	bl	8001e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001864:	4b1e      	ldr	r3, [pc, #120]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4a1d      	ldr	r2, [pc, #116]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 800186a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800186e:	61d3      	str	r3, [r2, #28]
 8001870:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800187c:	e029      	b.n	80018d2 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a19      	ldr	r2, [pc, #100]	@ (80018e8 <HAL_I2C_MspInit+0xd4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d124      	bne.n	80018d2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a14      	ldr	r2, [pc, #80]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a6:	2312      	movs	r3, #18
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	4619      	mov	r1, r3
 80018b4:	480b      	ldr	r0, [pc, #44]	@ (80018e4 <HAL_I2C_MspInit+0xd0>)
 80018b6:	f000 fae3 	bl	8001e80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018ba:	4b09      	ldr	r3, [pc, #36]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a08      	ldr	r2, [pc, #32]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 80018c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018c4:	61d3      	str	r3, [r2, #28]
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_I2C_MspInit+0xcc>)
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	@ 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40005400 	.word	0x40005400
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	40005800 	.word	0x40005800

080018ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	@ 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a37      	ldr	r2, [pc, #220]	@ (80019e4 <HAL_SPI_MspInit+0xf8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d130      	bne.n	800196e <HAL_SPI_MspInit+0x82>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190c:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a35      	ldr	r2, [pc, #212]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 8001912:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b30      	ldr	r3, [pc, #192]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a2f      	ldr	r2, [pc, #188]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800193c:	23a0      	movs	r3, #160	@ 0xa0
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	2302      	movs	r3, #2
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 0318 	add.w	r3, r7, #24
 800194c:	4619      	mov	r1, r3
 800194e:	4827      	ldr	r0, [pc, #156]	@ (80019ec <HAL_SPI_MspInit+0x100>)
 8001950:	f000 fa96 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001954:	2340      	movs	r3, #64	@ 0x40
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	4619      	mov	r1, r3
 8001966:	4821      	ldr	r0, [pc, #132]	@ (80019ec <HAL_SPI_MspInit+0x100>)
 8001968:	f000 fa8a 	bl	8001e80 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 800196c:	e036      	b.n	80019dc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1f      	ldr	r2, [pc, #124]	@ (80019f0 <HAL_SPI_MspInit+0x104>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d131      	bne.n	80019dc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	4a1a      	ldr	r2, [pc, #104]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 800197e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001982:	61d3      	str	r3, [r2, #28]
 8001984:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6193      	str	r3, [r2, #24]
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_SPI_MspInit+0xfc>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80019a8:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 0318 	add.w	r3, r7, #24
 80019ba:	4619      	mov	r1, r3
 80019bc:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <HAL_SPI_MspInit+0x108>)
 80019be:	f000 fa5f 	bl	8001e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019c2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	4619      	mov	r1, r3
 80019d6:	4807      	ldr	r0, [pc, #28]	@ (80019f4 <HAL_SPI_MspInit+0x108>)
 80019d8:	f000 fa52 	bl	8001e80 <HAL_GPIO_Init>
}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	@ 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40013000 	.word	0x40013000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40003800 	.word	0x40003800
 80019f4:	40010c00 	.word	0x40010c00

080019f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1c      	ldr	r2, [pc, #112]	@ (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d131      	bne.n	8001a7c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a18:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_UART_MspInit+0x90>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001a88 <HAL_UART_MspInit+0x90>)
 8001a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_UART_MspInit+0x90>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <HAL_UART_MspInit+0x90>)
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	4a14      	ldr	r2, [pc, #80]	@ (8001a88 <HAL_UART_MspInit+0x90>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6193      	str	r3, [r2, #24]
 8001a3c:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_UART_MspInit+0x90>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a52:	2303      	movs	r3, #3
 8001a54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480b      	ldr	r0, [pc, #44]	@ (8001a8c <HAL_UART_MspInit+0x94>)
 8001a5e:	f000 fa0f 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 0310 	add.w	r3, r7, #16
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <HAL_UART_MspInit+0x94>)
 8001a78:	f000 fa02 	bl	8001e80 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3720      	adds	r7, #32
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40013800 	.word	0x40013800
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010800 	.word	0x40010800

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 f8aa 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	@ (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f001 ff1c 	bl	8003954 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20005000 	.word	0x20005000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	200002fc 	.word	0x200002fc
 8001b50:	20000450 	.word	0x20000450

08001b54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b60:	f7ff fff8 	bl	8001b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b64:	480b      	ldr	r0, [pc, #44]	@ (8001b94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b66:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b68:	4a0c      	ldr	r2, [pc, #48]	@ (8001b9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b7c:	4c09      	ldr	r4, [pc, #36]	@ (8001ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f001 fee9 	bl	8003960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b8e:	f7fe fae5 	bl	800015c <main>
  bx lr
 8001b92:	4770      	bx	lr
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b9c:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8001ba0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ba4:	2000044c 	.word	0x2000044c

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <HAL_Init+0x28>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <HAL_Init+0x28>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	f000 f92b 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc2:	200f      	movs	r0, #15
 8001bc4:	f000 f808 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc8:	f7ff fdf2 	bl	80017b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40022000 	.word	0x40022000

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f935 	bl	8001e66 <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f90b 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	@ (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_IncTick+0x1c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_IncTick+0x20>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a03      	ldr	r2, [pc, #12]	@ (8001c58 <HAL_IncTick+0x20>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000300 	.word	0x20000300

08001c5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b02      	ldr	r3, [pc, #8]	@ (8001c6c <HAL_GetTick+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr
 8001c6c:	20000300 	.word	0x20000300

08001c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff fff0 	bl	8001c5c <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffe0 	bl	8001c5c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008

08001cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cea:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <__NVIC_SetPriorityGrouping+0x44>)
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	60d3      	str	r3, [r2, #12]
}
 8001cf0:	bf00      	nop
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b04      	ldr	r3, [pc, #16]	@ (8001d18 <__NVIC_GetPriorityGrouping+0x18>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	f003 0307 	and.w	r3, r3, #7
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff90 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff49 	bl	8001cb8 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff5e 	bl	8001d00 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff90 	bl	8001d70 <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5f 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffb0 	bl	8001dd4 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b08b      	sub	sp, #44	@ 0x2c
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e92:	e169      	b.n	8002168 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e94:	2201      	movs	r2, #1
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f040 8158 	bne.w	8002162 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4a9a      	ldr	r2, [pc, #616]	@ (8002120 <HAL_GPIO_Init+0x2a0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d05e      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ebc:	4a98      	ldr	r2, [pc, #608]	@ (8002120 <HAL_GPIO_Init+0x2a0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d875      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ec2:	4a98      	ldr	r2, [pc, #608]	@ (8002124 <HAL_GPIO_Init+0x2a4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d058      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ec8:	4a96      	ldr	r2, [pc, #600]	@ (8002124 <HAL_GPIO_Init+0x2a4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d86f      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ece:	4a96      	ldr	r2, [pc, #600]	@ (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d052      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ed4:	4a94      	ldr	r2, [pc, #592]	@ (8002128 <HAL_GPIO_Init+0x2a8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d869      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001eda:	4a94      	ldr	r2, [pc, #592]	@ (800212c <HAL_GPIO_Init+0x2ac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d04c      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001ee0:	4a92      	ldr	r2, [pc, #584]	@ (800212c <HAL_GPIO_Init+0x2ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d863      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ee6:	4a92      	ldr	r2, [pc, #584]	@ (8002130 <HAL_GPIO_Init+0x2b0>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d046      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
 8001eec:	4a90      	ldr	r2, [pc, #576]	@ (8002130 <HAL_GPIO_Init+0x2b0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d85d      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001ef2:	2b12      	cmp	r3, #18
 8001ef4:	d82a      	bhi.n	8001f4c <HAL_GPIO_Init+0xcc>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d859      	bhi.n	8001fae <HAL_GPIO_Init+0x12e>
 8001efa:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <HAL_GPIO_Init+0x80>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08001f67 	.word	0x08001f67
 8001f0c:	08001fa9 	.word	0x08001fa9
 8001f10:	08001faf 	.word	0x08001faf
 8001f14:	08001faf 	.word	0x08001faf
 8001f18:	08001faf 	.word	0x08001faf
 8001f1c:	08001faf 	.word	0x08001faf
 8001f20:	08001faf 	.word	0x08001faf
 8001f24:	08001faf 	.word	0x08001faf
 8001f28:	08001faf 	.word	0x08001faf
 8001f2c:	08001faf 	.word	0x08001faf
 8001f30:	08001faf 	.word	0x08001faf
 8001f34:	08001faf 	.word	0x08001faf
 8001f38:	08001faf 	.word	0x08001faf
 8001f3c:	08001faf 	.word	0x08001faf
 8001f40:	08001faf 	.word	0x08001faf
 8001f44:	08001f5d 	.word	0x08001f5d
 8001f48:	08001f71 	.word	0x08001f71
 8001f4c:	4a79      	ldr	r2, [pc, #484]	@ (8002134 <HAL_GPIO_Init+0x2b4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f52:	e02c      	b.n	8001fae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e029      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e024      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e01f      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	330c      	adds	r3, #12
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e01a      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f82:	2304      	movs	r3, #4
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e013      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	611a      	str	r2, [r3, #16]
          break;
 8001f9a:	e009      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	615a      	str	r2, [r3, #20]
          break;
 8001fa6:	e003      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x130>
          break;
 8001fae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2bff      	cmp	r3, #255	@ 0xff
 8001fb4:	d801      	bhi.n	8001fba <HAL_GPIO_Init+0x13a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_Init+0x13e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2bff      	cmp	r3, #255	@ 0xff
 8001fc4:	d802      	bhi.n	8001fcc <HAL_GPIO_Init+0x14c>
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	e002      	b.n	8001fd2 <HAL_GPIO_Init+0x152>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	3b08      	subs	r3, #8
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	210f      	movs	r1, #15
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	6a39      	ldr	r1, [r7, #32]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	431a      	orrs	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80b1 	beq.w	8002162 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002000:	4b4d      	ldr	r3, [pc, #308]	@ (8002138 <HAL_GPIO_Init+0x2b8>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a4c      	ldr	r2, [pc, #304]	@ (8002138 <HAL_GPIO_Init+0x2b8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b4a      	ldr	r3, [pc, #296]	@ (8002138 <HAL_GPIO_Init+0x2b8>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002018:	4a48      	ldr	r2, [pc, #288]	@ (800213c <HAL_GPIO_Init+0x2bc>)
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	089b      	lsrs	r3, r3, #2
 800201e:	3302      	adds	r3, #2
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a40      	ldr	r2, [pc, #256]	@ (8002140 <HAL_GPIO_Init+0x2c0>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <HAL_GPIO_Init+0x1ec>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3f      	ldr	r2, [pc, #252]	@ (8002144 <HAL_GPIO_Init+0x2c4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00d      	beq.n	8002068 <HAL_GPIO_Init+0x1e8>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3e      	ldr	r2, [pc, #248]	@ (8002148 <HAL_GPIO_Init+0x2c8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0x1e4>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3d      	ldr	r2, [pc, #244]	@ (800214c <HAL_GPIO_Init+0x2cc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d101      	bne.n	8002060 <HAL_GPIO_Init+0x1e0>
 800205c:	2303      	movs	r3, #3
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002060:	2304      	movs	r3, #4
 8002062:	e004      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002064:	2302      	movs	r3, #2
 8002066:	e002      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_GPIO_Init+0x1ee>
 800206c:	2300      	movs	r3, #0
 800206e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002070:	f002 0203 	and.w	r2, r2, #3
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	4093      	lsls	r3, r2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207e:	492f      	ldr	r1, [pc, #188]	@ (800213c <HAL_GPIO_Init+0x2bc>)
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d006      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	492c      	ldr	r1, [pc, #176]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
 80020a4:	e006      	b.n	80020b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4928      	ldr	r1, [pc, #160]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d006      	beq.n	80020ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c0:	4b23      	ldr	r3, [pc, #140]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	4922      	ldr	r1, [pc, #136]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020ce:	4b20      	ldr	r3, [pc, #128]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	491e      	ldr	r1, [pc, #120]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d006      	beq.n	80020f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020e8:	4b19      	ldr	r3, [pc, #100]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4918      	ldr	r1, [pc, #96]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
 80020f4:	e006      	b.n	8002104 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020f6:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4914      	ldr	r1, [pc, #80]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 8002100:	4013      	ands	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d021      	beq.n	8002154 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002110:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	490e      	ldr	r1, [pc, #56]	@ (8002150 <HAL_GPIO_Init+0x2d0>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e021      	b.n	8002162 <HAL_GPIO_Init+0x2e2>
 800211e:	bf00      	nop
 8002120:	10320000 	.word	0x10320000
 8002124:	10310000 	.word	0x10310000
 8002128:	10220000 	.word	0x10220000
 800212c:	10210000 	.word	0x10210000
 8002130:	10120000 	.word	0x10120000
 8002134:	10110000 	.word	0x10110000
 8002138:	40021000 	.word	0x40021000
 800213c:	40010000 	.word	0x40010000
 8002140:	40010800 	.word	0x40010800
 8002144:	40010c00 	.word	0x40010c00
 8002148:	40011000 	.word	0x40011000
 800214c:	40011400 	.word	0x40011400
 8002150:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_GPIO_Init+0x304>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	43db      	mvns	r3, r3
 800215c:	4909      	ldr	r1, [pc, #36]	@ (8002184 <HAL_GPIO_Init+0x304>)
 800215e:	4013      	ands	r3, r2
 8002160:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	3301      	adds	r3, #1
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f ae8e 	bne.w	8001e94 <HAL_GPIO_Init+0x14>
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	372c      	adds	r7, #44	@ 0x2c
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	611a      	str	r2, [r3, #16]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e12b      	b.n	8002422 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fb18 	bl	8001814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	@ 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800220a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800221a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800221c:	f000 fcda 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 8002220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a81      	ldr	r2, [pc, #516]	@ (800242c <HAL_I2C_Init+0x274>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d807      	bhi.n	800223c <HAL_I2C_Init+0x84>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a80      	ldr	r2, [pc, #512]	@ (8002430 <HAL_I2C_Init+0x278>)
 8002230:	4293      	cmp	r3, r2
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e006      	b.n	800224a <HAL_I2C_Init+0x92>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a7d      	ldr	r2, [pc, #500]	@ (8002434 <HAL_I2C_Init+0x27c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0e7      	b.n	8002422 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a78      	ldr	r2, [pc, #480]	@ (8002438 <HAL_I2C_Init+0x280>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a6a      	ldr	r2, [pc, #424]	@ (800242c <HAL_I2C_Init+0x274>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d802      	bhi.n	800228c <HAL_I2C_Init+0xd4>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3301      	adds	r3, #1
 800228a:	e009      	b.n	80022a0 <HAL_I2C_Init+0xe8>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	4a69      	ldr	r2, [pc, #420]	@ (800243c <HAL_I2C_Init+0x284>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	3301      	adds	r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	495c      	ldr	r1, [pc, #368]	@ (800242c <HAL_I2C_Init+0x274>)
 80022bc:	428b      	cmp	r3, r1
 80022be:	d819      	bhi.n	80022f4 <HAL_I2C_Init+0x13c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e59      	subs	r1, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ce:	1c59      	adds	r1, r3, #1
 80022d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022d4:	400b      	ands	r3, r1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_I2C_Init+0x138>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e59      	subs	r1, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ee:	e051      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 80022f0:	2304      	movs	r3, #4
 80022f2:	e04f      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d111      	bne.n	8002320 <HAL_I2C_Init+0x168>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e012      	b.n	8002346 <HAL_I2C_Init+0x18e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Init+0x196>
 800234a:	2301      	movs	r3, #1
 800234c:	e022      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10e      	bne.n	8002374 <HAL_I2C_Init+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e58      	subs	r0, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	440b      	add	r3, r1
 8002364:	fbb0 f3f3 	udiv	r3, r0, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002372:	e00f      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	0099      	lsls	r1, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	6809      	ldr	r1, [r1, #0]
 8002398:	4313      	orrs	r3, r2
 800239a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6911      	ldr	r1, [r2, #16]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68d2      	ldr	r2, [r2, #12]
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	000186a0 	.word	0x000186a0
 8002430:	001e847f 	.word	0x001e847f
 8002434:	003d08ff 	.word	0x003d08ff
 8002438:	431bde83 	.word	0x431bde83
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e272      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8087 	beq.w	800256e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002460:	4b92      	ldr	r3, [pc, #584]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b04      	cmp	r3, #4
 800246a:	d00c      	beq.n	8002486 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800246c:	4b8f      	ldr	r3, [pc, #572]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d112      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
 8002478:	4b8c      	ldr	r3, [pc, #560]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d10b      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002486:	4b89      	ldr	r3, [pc, #548]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06c      	beq.n	800256c <HAL_RCC_OscConfig+0x12c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d168      	bne.n	800256c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e24c      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x76>
 80024a8:	4b80      	ldr	r3, [pc, #512]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a7f      	ldr	r2, [pc, #508]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e02e      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b7b      	ldr	r3, [pc, #492]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7a      	ldr	r2, [pc, #488]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b78      	ldr	r3, [pc, #480]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a77      	ldr	r2, [pc, #476]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0xbc>
 80024e2:	4b72      	ldr	r3, [pc, #456]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a71      	ldr	r2, [pc, #452]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6f      	ldr	r3, [pc, #444]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6e      	ldr	r2, [pc, #440]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024fc:	4b6b      	ldr	r3, [pc, #428]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6a      	ldr	r2, [pc, #424]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b68      	ldr	r3, [pc, #416]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a67      	ldr	r2, [pc, #412]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fb9e 	bl	8001c5c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff fb9a 	bl	8001c5c <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e200      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5d      	ldr	r3, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xe4>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fb8a 	bl	8001c5c <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff fb86 	bl	8001c5c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1ec      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x10c>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b4c      	ldr	r3, [pc, #304]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002586:	4b49      	ldr	r3, [pc, #292]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
 8002592:	4b46      	ldr	r3, [pc, #280]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b43      	ldr	r3, [pc, #268]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1c0      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4939      	ldr	r1, [pc, #228]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff fb3f 	bl	8001c5c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff fb3b 	bl	8001c5c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1a1      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4927      	ldr	r1, [pc, #156]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b26      	ldr	r3, [pc, #152]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff fb1e 	bl	8001c5c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7ff fb1a 	bl	8001c5c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e180      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03a      	beq.n	80026c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d019      	beq.n	800268a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7ff fafe 	bl	8001c5c <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7ff fafa 	bl	8001c5c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e160      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 face 	bl	8002c24 <RCC_Delay>
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7ff fae4 	bl	8001c5c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002696:	e00f      	b.n	80026b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff fae0 	bl	8001c5c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d908      	bls.n	80026b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e146      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	42420000 	.word	0x42420000
 80026b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b92      	ldr	r3, [pc, #584]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e9      	bne.n	8002698 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80a6 	beq.w	800281e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b88      	ldr	r3, [pc, #544]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a87      	ldr	r2, [pc, #540]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b85      	ldr	r3, [pc, #532]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7e      	ldr	r2, [pc, #504]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7ff faa1 	bl	8001c5c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7ff fa9d 	bl	8001c5c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	@ 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e103      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b75      	ldr	r3, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x312>
 8002744:	4b6f      	ldr	r3, [pc, #444]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a6e      	ldr	r2, [pc, #440]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e02d      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x334>
 800275a:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a69      	ldr	r2, [pc, #420]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4b67      	ldr	r3, [pc, #412]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a66      	ldr	r2, [pc, #408]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x356>
 800277c:	4b61      	ldr	r3, [pc, #388]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a60      	ldr	r2, [pc, #384]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	4b5e      	ldr	r3, [pc, #376]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a5d      	ldr	r2, [pc, #372]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002796:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a5a      	ldr	r2, [pc, #360]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b58      	ldr	r3, [pc, #352]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a57      	ldr	r2, [pc, #348]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7ff fa51 	bl	8001c5c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7ff fa4d 	bl	8001c5c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0b1      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x37e>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7ff fa3b 	bl	8001c5c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7ff fa37 	bl	8001c5c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e09b      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b40      	ldr	r3, [pc, #256]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b3c      	ldr	r3, [pc, #240]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a3b      	ldr	r2, [pc, #236]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002828:	4b36      	ldr	r3, [pc, #216]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d061      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d146      	bne.n	80028ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b33      	ldr	r3, [pc, #204]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7ff fa0b 	bl	8001c5c <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7ff fa07 	bl	8001c5c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e06d      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d108      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002872:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4921      	ldr	r1, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002884:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a19      	ldr	r1, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	430b      	orrs	r3, r1
 8002896:	491b      	ldr	r1, [pc, #108]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7ff f9db 	bl	8001c5c <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7ff f9d7 	bl	8001c5c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e03d      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x46a>
 80028c8:	e035      	b.n	8002936 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff f9c4 	bl	8001c5c <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7ff f9c0 	bl	8001c5c <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e026      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x498>
 80028f6:	e01e      	b.n	8002936 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e019      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x500>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d0      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b6a      	ldr	r3, [pc, #424]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b67      	ldr	r3, [pc, #412]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	4965      	ldr	r1, [pc, #404]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0b8      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a0:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b8:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b50      	ldr	r3, [pc, #320]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	494d      	ldr	r1, [pc, #308]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d040      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d115      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e073      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06b      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4936      	ldr	r1, [pc, #216]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7ff f912 	bl	8001c5c <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7ff f90e 	bl	8001c5c <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e053      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d210      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4922      	ldr	r1, [pc, #136]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e032      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4916      	ldr	r1, [pc, #88]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	490e      	ldr	r1, [pc, #56]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad2:	f000 f821 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	490a      	ldr	r1, [pc, #40]	@ (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	5ccb      	ldrb	r3, [r1, r3]
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1cc>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCC_ClockConfig+0x1d0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f870 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08004858 	.word	0x08004858
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000004 	.word	0x20000004

08002b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x94>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d002      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x30>
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x36>
 8002b46:	e027      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	e027      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0c9b      	lsrs	r3, r3, #18
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x94>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0c5b      	lsrs	r3, r3, #17
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7a:	fb03 f202 	mul.w	r2, r3, r2
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e004      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	613b      	str	r3, [r7, #16]
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b9a:	613b      	str	r3, [r7, #16]
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	693b      	ldr	r3, [r7, #16]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	08004870 	.word	0x08004870
 8002bb8:	08004880 	.word	0x08004880
 8002bbc:	003d0900 	.word	0x003d0900

08002bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	@ (8002bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000000 	.word	0x20000000

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bd8:	f7ff fff2 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4903      	ldr	r1, [pc, #12]	@ (8002bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08004868 	.word	0x08004868

08002bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c00:	f7ff ffde 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0adb      	lsrs	r3, r3, #11
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	4903      	ldr	r1, [pc, #12]	@ (8002c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c12:	5ccb      	ldrb	r3, [r1, r3]
 8002c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08004868 	.word	0x08004868

08002c24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <RCC_Delay+0x34>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <RCC_Delay+0x38>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0a5b      	lsrs	r3, r3, #9
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c40:	bf00      	nop
  }
  while (Delay --);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	60fa      	str	r2, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f9      	bne.n	8002c40 <RCC_Delay+0x1c>
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e076      	b.n	8002d60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c82:	d009      	beq.n	8002c98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
 8002c8a:	e005      	b.n	8002c98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe fe1a 	bl	80018ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1c:	ea42 0103 	orr.w	r1, r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	0c1a      	lsrs	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f002 0204 	and.w	r2, r2, #4
 8002d3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d78:	f7fe ff70 	bl	8001c5c <HAL_GetTick>
 8002d7c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e12a      	b.n	8002fe8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_SPI_Transmit+0x36>
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e122      	b.n	8002fe8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_SPI_Transmit+0x48>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e11b      	b.n	8002fe8 <HAL_SPI_Transmit+0x280>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dfe:	d10f      	bne.n	8002e20 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2a:	2b40      	cmp	r3, #64	@ 0x40
 8002e2c:	d007      	beq.n	8002e3e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e46:	d152      	bne.n	8002eee <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d002      	beq.n	8002e56 <HAL_SPI_Transmit+0xee>
 8002e50:	8b7b      	ldrh	r3, [r7, #26]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d145      	bne.n	8002ee2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	881a      	ldrh	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	1c9a      	adds	r2, r3, #2
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e7a:	e032      	b.n	8002ee2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d112      	bne.n	8002eb0 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	881a      	ldrh	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	1c9a      	adds	r2, r3, #2
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002eae:	e018      	b.n	8002ee2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb0:	f7fe fed4 	bl	8001c5c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d803      	bhi.n	8002ec8 <HAL_SPI_Transmit+0x160>
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d102      	bne.n	8002ece <HAL_SPI_Transmit+0x166>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e082      	b.n	8002fe8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1c7      	bne.n	8002e7c <HAL_SPI_Transmit+0x114>
 8002eec:	e053      	b.n	8002f96 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_SPI_Transmit+0x194>
 8002ef6:	8b7b      	ldrh	r3, [r7, #26]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d147      	bne.n	8002f8c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	7812      	ldrb	r2, [r2, #0]
 8002f08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f22:	e033      	b.n	8002f8c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d113      	bne.n	8002f5a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f58:	e018      	b.n	8002f8c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f5a:	f7fe fe7f 	bl	8001c5c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d803      	bhi.n	8002f72 <HAL_SPI_Transmit+0x20a>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d102      	bne.n	8002f78 <HAL_SPI_Transmit+0x210>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e02d      	b.n	8002fe8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1c6      	bne.n	8002f24 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	6839      	ldr	r1, [r7, #0]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa5a 	bl	8003454 <SPI_EndRxTxTransaction>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10a      	bne.n	8002fca <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	@ 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002ffe:	2301      	movs	r3, #1
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003002:	f7fe fe2b 	bl	8001c5c <HAL_GetTick>
 8003006:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800300e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003016:	887b      	ldrh	r3, [r7, #2]
 8003018:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800301a:	7ffb      	ldrb	r3, [r7, #31]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d00c      	beq.n	800303a <HAL_SPI_TransmitReceive+0x4a>
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003026:	d106      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x46>
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	2b04      	cmp	r3, #4
 8003034:	d001      	beq.n	800303a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	e17f      	b.n	800333a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_SPI_TransmitReceive+0x5c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_SPI_TransmitReceive+0x5c>
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e174      	b.n	800333a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_SPI_TransmitReceive+0x6e>
 800305a:	2302      	movs	r3, #2
 800305c:	e16d      	b.n	800333a <HAL_SPI_TransmitReceive+0x34a>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b04      	cmp	r3, #4
 8003070:	d003      	beq.n	800307a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2205      	movs	r2, #5
 8003076:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	887a      	ldrh	r2, [r7, #2]
 800308a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	887a      	ldrh	r2, [r7, #2]
 80030a2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d007      	beq.n	80030ce <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030d6:	d17e      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_TransmitReceive+0xf6>
 80030e0:	8afb      	ldrh	r3, [r7, #22]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d16c      	bne.n	80031c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	881a      	ldrh	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f6:	1c9a      	adds	r2, r3, #2
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800310a:	e059      	b.n	80031c0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d11b      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x162>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d016      	beq.n	8003152 <HAL_SPI_TransmitReceive+0x162>
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	2b01      	cmp	r3, #1
 8003128:	d113      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	1c9a      	adds	r2, r3, #2
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d119      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x1a4>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d014      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	b292      	uxth	r2, r2
 8003176:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317c:	1c9a      	adds	r2, r3, #2
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003194:	f7fe fd62 	bl	8001c5c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d80d      	bhi.n	80031c0 <HAL_SPI_TransmitReceive+0x1d0>
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d009      	beq.n	80031c0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0bc      	b.n	800333a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1a0      	bne.n	800310c <HAL_SPI_TransmitReceive+0x11c>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d19b      	bne.n	800310c <HAL_SPI_TransmitReceive+0x11c>
 80031d4:	e082      	b.n	80032dc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x1f4>
 80031de:	8afb      	ldrh	r3, [r7, #22]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d171      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	330c      	adds	r3, #12
 80031ee:	7812      	ldrb	r2, [r2, #0]
 80031f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800320a:	e05d      	b.n	80032c8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	d11c      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x264>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d017      	beq.n	8003254 <HAL_SPI_TransmitReceive+0x264>
 8003224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003226:	2b01      	cmp	r3, #1
 8003228:	d114      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b01      	cmp	r3, #1
 8003260:	d119      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x2a6>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d014      	beq.n	8003296 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003292:	2301      	movs	r3, #1
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003296:	f7fe fce1 	bl	8001c5c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d803      	bhi.n	80032ae <HAL_SPI_TransmitReceive+0x2be>
 80032a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d102      	bne.n	80032b4 <HAL_SPI_TransmitReceive+0x2c4>
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e038      	b.n	800333a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d19c      	bne.n	800320c <HAL_SPI_TransmitReceive+0x21c>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d197      	bne.n	800320c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f8b7 	bl	8003454 <SPI_EndRxTxTransaction>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e01d      	b.n	800333a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003338:	2300      	movs	r3, #0
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3728      	adds	r7, #40	@ 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003354:	f7fe fc82 	bl	8001c5c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	4413      	add	r3, r2
 8003362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003364:	f7fe fc7a 	bl	8001c5c <HAL_GetTick>
 8003368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800336a:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	015b      	lsls	r3, r3, #5
 8003370:	0d1b      	lsrs	r3, r3, #20
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	fb02 f303 	mul.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800337a:	e054      	b.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d050      	beq.n	8003426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003384:	f7fe fc6a 	bl	8001c5c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	d902      	bls.n	800339a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d13d      	bne.n	8003416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033b2:	d111      	bne.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033bc:	d004      	beq.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c6:	d107      	bne.n	80033d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e0:	d10f      	bne.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e017      	b.n	8003446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3b01      	subs	r3, #1
 8003424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	429a      	cmp	r2, r3
 8003442:	d19b      	bne.n	800337c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000000 	.word	0x20000000

08003454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2201      	movs	r2, #1
 8003468:	2102      	movs	r1, #2
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff ff6a 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d007      	beq.n	8003486 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e013      	b.n	80034ae <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	2180      	movs	r1, #128	@ 0x80
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f7ff ff57 	bl	8003344 <SPI_WaitFlagStateUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e000      	b.n	80034ae <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e042      	b.n	800354e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7fe fa8b 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2224      	movs	r2, #36	@ 0x24
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f972 	bl	80037e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800350e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800351e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800352e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b08a      	sub	sp, #40	@ 0x28
 800355a:	af02      	add	r7, sp, #8
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b20      	cmp	r3, #32
 8003574:	d175      	bne.n	8003662 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_UART_Transmit+0x2c>
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06e      	b.n	8003664 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2221      	movs	r2, #33	@ 0x21
 8003590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003594:	f7fe fb62 	bl	8001c5c <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	88fa      	ldrh	r2, [r7, #6]
 800359e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ae:	d108      	bne.n	80035c2 <HAL_UART_Transmit+0x6c>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	e003      	b.n	80035ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035ca:	e02e      	b.n	800362a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2180      	movs	r1, #128	@ 0x80
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f848 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e03a      	b.n	8003664 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10b      	bne.n	800360c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003602:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	3302      	adds	r3, #2
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	e007      	b.n	800361c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	781a      	ldrb	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1cb      	bne.n	80035cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	2140      	movs	r1, #64	@ 0x40
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f814 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e006      	b.n	8003664 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e000      	b.n	8003664 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	4613      	mov	r3, r2
 800367a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367c:	e03b      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003684:	d037      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fe fae9 	bl	8001c5c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	6a3a      	ldr	r2, [r7, #32]
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <UART_WaitOnFlagUntilTimeout+0x30>
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e03a      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d023      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b80      	cmp	r3, #128	@ 0x80
 80036b2:	d020      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b40      	cmp	r3, #64	@ 0x40
 80036b8:	d01d      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d116      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f81d 	bl	800371e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2208      	movs	r2, #8
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00f      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	429a      	cmp	r2, r3
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	429a      	cmp	r2, r3
 8003712:	d0b4      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800371e:	b480      	push	{r7}
 8003720:	b095      	sub	sp, #84	@ 0x54
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003730:	e853 3f00 	ldrex	r3, [r3]
 8003734:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800373c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003746:	643a      	str	r2, [r7, #64]	@ 0x40
 8003748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800374c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e5      	bne.n	8003726 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	61fb      	str	r3, [r7, #28]
   return(result);
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f023 0301 	bic.w	r3, r3, #1
 8003770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	3314      	adds	r3, #20
 8003778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800377a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1e5      	bne.n	800375a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	2b01      	cmp	r3, #1
 8003794:	d119      	bne.n	80037ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f023 0310 	bic.w	r3, r3, #16
 80037ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037b6:	61ba      	str	r2, [r7, #24]
 80037b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6979      	ldr	r1, [r7, #20]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	613b      	str	r3, [r7, #16]
   return(result);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e5      	bne.n	8003796 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037d8:	bf00      	nop
 80037da:	3754      	adds	r7, #84	@ 0x54
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
	...

080037e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68da      	ldr	r2, [r3, #12]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800381e:	f023 030c 	bic.w	r3, r3, #12
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6812      	ldr	r2, [r2, #0]
 8003826:	68b9      	ldr	r1, [r7, #8]
 8003828:	430b      	orrs	r3, r1
 800382a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a2c      	ldr	r2, [pc, #176]	@ (80038f8 <UART_SetConfig+0x114>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d103      	bne.n	8003854 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800384c:	f7ff f9d6 	bl	8002bfc <HAL_RCC_GetPCLK2Freq>
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	e002      	b.n	800385a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003854:	f7ff f9be 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 8003858:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	4a22      	ldr	r2, [pc, #136]	@ (80038fc <UART_SetConfig+0x118>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	0119      	lsls	r1, r3, #4
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009a      	lsls	r2, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003890:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <UART_SetConfig+0x118>)
 8003892:	fba3 0302 	umull	r0, r3, r3, r2
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2064      	movs	r0, #100	@ 0x64
 800389a:	fb00 f303 	mul.w	r3, r0, r3
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	3332      	adds	r3, #50	@ 0x32
 80038a4:	4a15      	ldr	r2, [pc, #84]	@ (80038fc <UART_SetConfig+0x118>)
 80038a6:	fba2 2303 	umull	r2, r3, r2, r3
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038b0:	4419      	add	r1, r3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009a      	lsls	r2, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c8:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <UART_SetConfig+0x118>)
 80038ca:	fba3 0302 	umull	r0, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2064      	movs	r0, #100	@ 0x64
 80038d2:	fb00 f303 	mul.w	r3, r0, r3
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	3332      	adds	r3, #50	@ 0x32
 80038dc:	4a07      	ldr	r2, [pc, #28]	@ (80038fc <UART_SetConfig+0x118>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	f003 020f 	and.w	r2, r3, #15
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	440a      	add	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038f0:	bf00      	nop
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40013800 	.word	0x40013800
 80038fc:	51eb851f 	.word	0x51eb851f

08003900 <siprintf>:
 8003900:	b40e      	push	{r1, r2, r3}
 8003902:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003906:	b510      	push	{r4, lr}
 8003908:	2400      	movs	r4, #0
 800390a:	b09d      	sub	sp, #116	@ 0x74
 800390c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800390e:	9002      	str	r0, [sp, #8]
 8003910:	9006      	str	r0, [sp, #24]
 8003912:	9107      	str	r1, [sp, #28]
 8003914:	9104      	str	r1, [sp, #16]
 8003916:	4809      	ldr	r0, [pc, #36]	@ (800393c <siprintf+0x3c>)
 8003918:	4909      	ldr	r1, [pc, #36]	@ (8003940 <siprintf+0x40>)
 800391a:	f853 2b04 	ldr.w	r2, [r3], #4
 800391e:	9105      	str	r1, [sp, #20]
 8003920:	6800      	ldr	r0, [r0, #0]
 8003922:	a902      	add	r1, sp, #8
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003928:	f000 f992 	bl	8003c50 <_svfiprintf_r>
 800392c:	9b02      	ldr	r3, [sp, #8]
 800392e:	701c      	strb	r4, [r3, #0]
 8003930:	b01d      	add	sp, #116	@ 0x74
 8003932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003936:	b003      	add	sp, #12
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	2000000c 	.word	0x2000000c
 8003940:	ffff0208 	.word	0xffff0208

08003944 <memset>:
 8003944:	4603      	mov	r3, r0
 8003946:	4402      	add	r2, r0
 8003948:	4293      	cmp	r3, r2
 800394a:	d100      	bne.n	800394e <memset+0xa>
 800394c:	4770      	bx	lr
 800394e:	f803 1b01 	strb.w	r1, [r3], #1
 8003952:	e7f9      	b.n	8003948 <memset+0x4>

08003954 <__errno>:
 8003954:	4b01      	ldr	r3, [pc, #4]	@ (800395c <__errno+0x8>)
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	2000000c 	.word	0x2000000c

08003960 <__libc_init_array>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	2600      	movs	r6, #0
 8003964:	4d0c      	ldr	r5, [pc, #48]	@ (8003998 <__libc_init_array+0x38>)
 8003966:	4c0d      	ldr	r4, [pc, #52]	@ (800399c <__libc_init_array+0x3c>)
 8003968:	1b64      	subs	r4, r4, r5
 800396a:	10a4      	asrs	r4, r4, #2
 800396c:	42a6      	cmp	r6, r4
 800396e:	d109      	bne.n	8003984 <__libc_init_array+0x24>
 8003970:	f000 fc76 	bl	8004260 <_init>
 8003974:	2600      	movs	r6, #0
 8003976:	4d0a      	ldr	r5, [pc, #40]	@ (80039a0 <__libc_init_array+0x40>)
 8003978:	4c0a      	ldr	r4, [pc, #40]	@ (80039a4 <__libc_init_array+0x44>)
 800397a:	1b64      	subs	r4, r4, r5
 800397c:	10a4      	asrs	r4, r4, #2
 800397e:	42a6      	cmp	r6, r4
 8003980:	d105      	bne.n	800398e <__libc_init_array+0x2e>
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	f855 3b04 	ldr.w	r3, [r5], #4
 8003988:	4798      	blx	r3
 800398a:	3601      	adds	r6, #1
 800398c:	e7ee      	b.n	800396c <__libc_init_array+0xc>
 800398e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003992:	4798      	blx	r3
 8003994:	3601      	adds	r6, #1
 8003996:	e7f2      	b.n	800397e <__libc_init_array+0x1e>
 8003998:	080048c0 	.word	0x080048c0
 800399c:	080048c0 	.word	0x080048c0
 80039a0:	080048c0 	.word	0x080048c0
 80039a4:	080048c4 	.word	0x080048c4

080039a8 <__retarget_lock_acquire_recursive>:
 80039a8:	4770      	bx	lr

080039aa <__retarget_lock_release_recursive>:
 80039aa:	4770      	bx	lr

080039ac <_free_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4605      	mov	r5, r0
 80039b0:	2900      	cmp	r1, #0
 80039b2:	d040      	beq.n	8003a36 <_free_r+0x8a>
 80039b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039b8:	1f0c      	subs	r4, r1, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bfb8      	it	lt
 80039be:	18e4      	addlt	r4, r4, r3
 80039c0:	f000 f8de 	bl	8003b80 <__malloc_lock>
 80039c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a38 <_free_r+0x8c>)
 80039c6:	6813      	ldr	r3, [r2, #0]
 80039c8:	b933      	cbnz	r3, 80039d8 <_free_r+0x2c>
 80039ca:	6063      	str	r3, [r4, #4]
 80039cc:	6014      	str	r4, [r2, #0]
 80039ce:	4628      	mov	r0, r5
 80039d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039d4:	f000 b8da 	b.w	8003b8c <__malloc_unlock>
 80039d8:	42a3      	cmp	r3, r4
 80039da:	d908      	bls.n	80039ee <_free_r+0x42>
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	1821      	adds	r1, r4, r0
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf01      	itttt	eq
 80039e4:	6819      	ldreq	r1, [r3, #0]
 80039e6:	685b      	ldreq	r3, [r3, #4]
 80039e8:	1809      	addeq	r1, r1, r0
 80039ea:	6021      	streq	r1, [r4, #0]
 80039ec:	e7ed      	b.n	80039ca <_free_r+0x1e>
 80039ee:	461a      	mov	r2, r3
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b10b      	cbz	r3, 80039f8 <_free_r+0x4c>
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	d9fa      	bls.n	80039ee <_free_r+0x42>
 80039f8:	6811      	ldr	r1, [r2, #0]
 80039fa:	1850      	adds	r0, r2, r1
 80039fc:	42a0      	cmp	r0, r4
 80039fe:	d10b      	bne.n	8003a18 <_free_r+0x6c>
 8003a00:	6820      	ldr	r0, [r4, #0]
 8003a02:	4401      	add	r1, r0
 8003a04:	1850      	adds	r0, r2, r1
 8003a06:	4283      	cmp	r3, r0
 8003a08:	6011      	str	r1, [r2, #0]
 8003a0a:	d1e0      	bne.n	80039ce <_free_r+0x22>
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4408      	add	r0, r1
 8003a12:	6010      	str	r0, [r2, #0]
 8003a14:	6053      	str	r3, [r2, #4]
 8003a16:	e7da      	b.n	80039ce <_free_r+0x22>
 8003a18:	d902      	bls.n	8003a20 <_free_r+0x74>
 8003a1a:	230c      	movs	r3, #12
 8003a1c:	602b      	str	r3, [r5, #0]
 8003a1e:	e7d6      	b.n	80039ce <_free_r+0x22>
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	1821      	adds	r1, r4, r0
 8003a24:	428b      	cmp	r3, r1
 8003a26:	bf01      	itttt	eq
 8003a28:	6819      	ldreq	r1, [r3, #0]
 8003a2a:	685b      	ldreq	r3, [r3, #4]
 8003a2c:	1809      	addeq	r1, r1, r0
 8003a2e:	6021      	streq	r1, [r4, #0]
 8003a30:	6063      	str	r3, [r4, #4]
 8003a32:	6054      	str	r4, [r2, #4]
 8003a34:	e7cb      	b.n	80039ce <_free_r+0x22>
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
 8003a38:	20000448 	.word	0x20000448

08003a3c <sbrk_aligned>:
 8003a3c:	b570      	push	{r4, r5, r6, lr}
 8003a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8003a7c <sbrk_aligned+0x40>)
 8003a40:	460c      	mov	r4, r1
 8003a42:	6831      	ldr	r1, [r6, #0]
 8003a44:	4605      	mov	r5, r0
 8003a46:	b911      	cbnz	r1, 8003a4e <sbrk_aligned+0x12>
 8003a48:	f000 fba8 	bl	800419c <_sbrk_r>
 8003a4c:	6030      	str	r0, [r6, #0]
 8003a4e:	4621      	mov	r1, r4
 8003a50:	4628      	mov	r0, r5
 8003a52:	f000 fba3 	bl	800419c <_sbrk_r>
 8003a56:	1c43      	adds	r3, r0, #1
 8003a58:	d103      	bne.n	8003a62 <sbrk_aligned+0x26>
 8003a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8003a5e:	4620      	mov	r0, r4
 8003a60:	bd70      	pop	{r4, r5, r6, pc}
 8003a62:	1cc4      	adds	r4, r0, #3
 8003a64:	f024 0403 	bic.w	r4, r4, #3
 8003a68:	42a0      	cmp	r0, r4
 8003a6a:	d0f8      	beq.n	8003a5e <sbrk_aligned+0x22>
 8003a6c:	1a21      	subs	r1, r4, r0
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f000 fb94 	bl	800419c <_sbrk_r>
 8003a74:	3001      	adds	r0, #1
 8003a76:	d1f2      	bne.n	8003a5e <sbrk_aligned+0x22>
 8003a78:	e7ef      	b.n	8003a5a <sbrk_aligned+0x1e>
 8003a7a:	bf00      	nop
 8003a7c:	20000444 	.word	0x20000444

08003a80 <_malloc_r>:
 8003a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a84:	1ccd      	adds	r5, r1, #3
 8003a86:	f025 0503 	bic.w	r5, r5, #3
 8003a8a:	3508      	adds	r5, #8
 8003a8c:	2d0c      	cmp	r5, #12
 8003a8e:	bf38      	it	cc
 8003a90:	250c      	movcc	r5, #12
 8003a92:	2d00      	cmp	r5, #0
 8003a94:	4606      	mov	r6, r0
 8003a96:	db01      	blt.n	8003a9c <_malloc_r+0x1c>
 8003a98:	42a9      	cmp	r1, r5
 8003a9a:	d904      	bls.n	8003aa6 <_malloc_r+0x26>
 8003a9c:	230c      	movs	r3, #12
 8003a9e:	6033      	str	r3, [r6, #0]
 8003aa0:	2000      	movs	r0, #0
 8003aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b7c <_malloc_r+0xfc>
 8003aaa:	f000 f869 	bl	8003b80 <__malloc_lock>
 8003aae:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	bb44      	cbnz	r4, 8003b08 <_malloc_r+0x88>
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f7ff ffbf 	bl	8003a3c <sbrk_aligned>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	d158      	bne.n	8003b76 <_malloc_r+0xf6>
 8003ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8003ac8:	4627      	mov	r7, r4
 8003aca:	2f00      	cmp	r7, #0
 8003acc:	d143      	bne.n	8003b56 <_malloc_r+0xd6>
 8003ace:	2c00      	cmp	r4, #0
 8003ad0:	d04b      	beq.n	8003b6a <_malloc_r+0xea>
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	4639      	mov	r1, r7
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	eb04 0903 	add.w	r9, r4, r3
 8003adc:	f000 fb5e 	bl	800419c <_sbrk_r>
 8003ae0:	4581      	cmp	r9, r0
 8003ae2:	d142      	bne.n	8003b6a <_malloc_r+0xea>
 8003ae4:	6821      	ldr	r1, [r4, #0]
 8003ae6:	4630      	mov	r0, r6
 8003ae8:	1a6d      	subs	r5, r5, r1
 8003aea:	4629      	mov	r1, r5
 8003aec:	f7ff ffa6 	bl	8003a3c <sbrk_aligned>
 8003af0:	3001      	adds	r0, #1
 8003af2:	d03a      	beq.n	8003b6a <_malloc_r+0xea>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	442b      	add	r3, r5
 8003af8:	6023      	str	r3, [r4, #0]
 8003afa:	f8d8 3000 	ldr.w	r3, [r8]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	bb62      	cbnz	r2, 8003b5c <_malloc_r+0xdc>
 8003b02:	f8c8 7000 	str.w	r7, [r8]
 8003b06:	e00f      	b.n	8003b28 <_malloc_r+0xa8>
 8003b08:	6822      	ldr	r2, [r4, #0]
 8003b0a:	1b52      	subs	r2, r2, r5
 8003b0c:	d420      	bmi.n	8003b50 <_malloc_r+0xd0>
 8003b0e:	2a0b      	cmp	r2, #11
 8003b10:	d917      	bls.n	8003b42 <_malloc_r+0xc2>
 8003b12:	1961      	adds	r1, r4, r5
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	6025      	str	r5, [r4, #0]
 8003b18:	bf18      	it	ne
 8003b1a:	6059      	strne	r1, [r3, #4]
 8003b1c:	6863      	ldr	r3, [r4, #4]
 8003b1e:	bf08      	it	eq
 8003b20:	f8c8 1000 	streq.w	r1, [r8]
 8003b24:	5162      	str	r2, [r4, r5]
 8003b26:	604b      	str	r3, [r1, #4]
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f000 f82f 	bl	8003b8c <__malloc_unlock>
 8003b2e:	f104 000b 	add.w	r0, r4, #11
 8003b32:	1d23      	adds	r3, r4, #4
 8003b34:	f020 0007 	bic.w	r0, r0, #7
 8003b38:	1ac2      	subs	r2, r0, r3
 8003b3a:	bf1c      	itt	ne
 8003b3c:	1a1b      	subne	r3, r3, r0
 8003b3e:	50a3      	strne	r3, [r4, r2]
 8003b40:	e7af      	b.n	8003aa2 <_malloc_r+0x22>
 8003b42:	6862      	ldr	r2, [r4, #4]
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	bf0c      	ite	eq
 8003b48:	f8c8 2000 	streq.w	r2, [r8]
 8003b4c:	605a      	strne	r2, [r3, #4]
 8003b4e:	e7eb      	b.n	8003b28 <_malloc_r+0xa8>
 8003b50:	4623      	mov	r3, r4
 8003b52:	6864      	ldr	r4, [r4, #4]
 8003b54:	e7ae      	b.n	8003ab4 <_malloc_r+0x34>
 8003b56:	463c      	mov	r4, r7
 8003b58:	687f      	ldr	r7, [r7, #4]
 8003b5a:	e7b6      	b.n	8003aca <_malloc_r+0x4a>
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	42a3      	cmp	r3, r4
 8003b62:	d1fb      	bne.n	8003b5c <_malloc_r+0xdc>
 8003b64:	2300      	movs	r3, #0
 8003b66:	6053      	str	r3, [r2, #4]
 8003b68:	e7de      	b.n	8003b28 <_malloc_r+0xa8>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	6033      	str	r3, [r6, #0]
 8003b70:	f000 f80c 	bl	8003b8c <__malloc_unlock>
 8003b74:	e794      	b.n	8003aa0 <_malloc_r+0x20>
 8003b76:	6005      	str	r5, [r0, #0]
 8003b78:	e7d6      	b.n	8003b28 <_malloc_r+0xa8>
 8003b7a:	bf00      	nop
 8003b7c:	20000448 	.word	0x20000448

08003b80 <__malloc_lock>:
 8003b80:	4801      	ldr	r0, [pc, #4]	@ (8003b88 <__malloc_lock+0x8>)
 8003b82:	f7ff bf11 	b.w	80039a8 <__retarget_lock_acquire_recursive>
 8003b86:	bf00      	nop
 8003b88:	20000440 	.word	0x20000440

08003b8c <__malloc_unlock>:
 8003b8c:	4801      	ldr	r0, [pc, #4]	@ (8003b94 <__malloc_unlock+0x8>)
 8003b8e:	f7ff bf0c 	b.w	80039aa <__retarget_lock_release_recursive>
 8003b92:	bf00      	nop
 8003b94:	20000440 	.word	0x20000440

08003b98 <__ssputs_r>:
 8003b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b9c:	461f      	mov	r7, r3
 8003b9e:	688e      	ldr	r6, [r1, #8]
 8003ba0:	4682      	mov	sl, r0
 8003ba2:	42be      	cmp	r6, r7
 8003ba4:	460c      	mov	r4, r1
 8003ba6:	4690      	mov	r8, r2
 8003ba8:	680b      	ldr	r3, [r1, #0]
 8003baa:	d82d      	bhi.n	8003c08 <__ssputs_r+0x70>
 8003bac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bb0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003bb4:	d026      	beq.n	8003c04 <__ssputs_r+0x6c>
 8003bb6:	6965      	ldr	r5, [r4, #20]
 8003bb8:	6909      	ldr	r1, [r1, #16]
 8003bba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bbe:	eba3 0901 	sub.w	r9, r3, r1
 8003bc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bc6:	1c7b      	adds	r3, r7, #1
 8003bc8:	444b      	add	r3, r9
 8003bca:	106d      	asrs	r5, r5, #1
 8003bcc:	429d      	cmp	r5, r3
 8003bce:	bf38      	it	cc
 8003bd0:	461d      	movcc	r5, r3
 8003bd2:	0553      	lsls	r3, r2, #21
 8003bd4:	d527      	bpl.n	8003c26 <__ssputs_r+0x8e>
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	f7ff ff52 	bl	8003a80 <_malloc_r>
 8003bdc:	4606      	mov	r6, r0
 8003bde:	b360      	cbz	r0, 8003c3a <__ssputs_r+0xa2>
 8003be0:	464a      	mov	r2, r9
 8003be2:	6921      	ldr	r1, [r4, #16]
 8003be4:	f000 faf8 	bl	80041d8 <memcpy>
 8003be8:	89a3      	ldrh	r3, [r4, #12]
 8003bea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf2:	81a3      	strh	r3, [r4, #12]
 8003bf4:	6126      	str	r6, [r4, #16]
 8003bf6:	444e      	add	r6, r9
 8003bf8:	6026      	str	r6, [r4, #0]
 8003bfa:	463e      	mov	r6, r7
 8003bfc:	6165      	str	r5, [r4, #20]
 8003bfe:	eba5 0509 	sub.w	r5, r5, r9
 8003c02:	60a5      	str	r5, [r4, #8]
 8003c04:	42be      	cmp	r6, r7
 8003c06:	d900      	bls.n	8003c0a <__ssputs_r+0x72>
 8003c08:	463e      	mov	r6, r7
 8003c0a:	4632      	mov	r2, r6
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	6820      	ldr	r0, [r4, #0]
 8003c10:	f000 faaa 	bl	8004168 <memmove>
 8003c14:	2000      	movs	r0, #0
 8003c16:	68a3      	ldr	r3, [r4, #8]
 8003c18:	1b9b      	subs	r3, r3, r6
 8003c1a:	60a3      	str	r3, [r4, #8]
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	4433      	add	r3, r6
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c26:	462a      	mov	r2, r5
 8003c28:	f000 fae4 	bl	80041f4 <_realloc_r>
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d1e0      	bne.n	8003bf4 <__ssputs_r+0x5c>
 8003c32:	4650      	mov	r0, sl
 8003c34:	6921      	ldr	r1, [r4, #16]
 8003c36:	f7ff feb9 	bl	80039ac <_free_r>
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	f8ca 3000 	str.w	r3, [sl]
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	f04f 30ff 	mov.w	r0, #4294967295
 8003c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c4a:	81a3      	strh	r3, [r4, #12]
 8003c4c:	e7e9      	b.n	8003c22 <__ssputs_r+0x8a>
	...

08003c50 <_svfiprintf_r>:
 8003c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c54:	4698      	mov	r8, r3
 8003c56:	898b      	ldrh	r3, [r1, #12]
 8003c58:	4607      	mov	r7, r0
 8003c5a:	061b      	lsls	r3, r3, #24
 8003c5c:	460d      	mov	r5, r1
 8003c5e:	4614      	mov	r4, r2
 8003c60:	b09d      	sub	sp, #116	@ 0x74
 8003c62:	d510      	bpl.n	8003c86 <_svfiprintf_r+0x36>
 8003c64:	690b      	ldr	r3, [r1, #16]
 8003c66:	b973      	cbnz	r3, 8003c86 <_svfiprintf_r+0x36>
 8003c68:	2140      	movs	r1, #64	@ 0x40
 8003c6a:	f7ff ff09 	bl	8003a80 <_malloc_r>
 8003c6e:	6028      	str	r0, [r5, #0]
 8003c70:	6128      	str	r0, [r5, #16]
 8003c72:	b930      	cbnz	r0, 8003c82 <_svfiprintf_r+0x32>
 8003c74:	230c      	movs	r3, #12
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	b01d      	add	sp, #116	@ 0x74
 8003c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c82:	2340      	movs	r3, #64	@ 0x40
 8003c84:	616b      	str	r3, [r5, #20]
 8003c86:	2300      	movs	r3, #0
 8003c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c90:	2330      	movs	r3, #48	@ 0x30
 8003c92:	f04f 0901 	mov.w	r9, #1
 8003c96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c9a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003e34 <_svfiprintf_r+0x1e4>
 8003c9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	469a      	mov	sl, r3
 8003ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003caa:	b10a      	cbz	r2, 8003cb0 <_svfiprintf_r+0x60>
 8003cac:	2a25      	cmp	r2, #37	@ 0x25
 8003cae:	d1f9      	bne.n	8003ca4 <_svfiprintf_r+0x54>
 8003cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8003cb4:	d00b      	beq.n	8003cce <_svfiprintf_r+0x7e>
 8003cb6:	465b      	mov	r3, fp
 8003cb8:	4622      	mov	r2, r4
 8003cba:	4629      	mov	r1, r5
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	f7ff ff6b 	bl	8003b98 <__ssputs_r>
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	f000 80a7 	beq.w	8003e16 <_svfiprintf_r+0x1c6>
 8003cc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003cca:	445a      	add	r2, fp
 8003ccc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cce:	f89a 3000 	ldrb.w	r3, [sl]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 809f 	beq.w	8003e16 <_svfiprintf_r+0x1c6>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295
 8003cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ce2:	f10a 0a01 	add.w	sl, sl, #1
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	9307      	str	r3, [sp, #28]
 8003cea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003cee:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cf0:	4654      	mov	r4, sl
 8003cf2:	2205      	movs	r2, #5
 8003cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cf8:	484e      	ldr	r0, [pc, #312]	@ (8003e34 <_svfiprintf_r+0x1e4>)
 8003cfa:	f000 fa5f 	bl	80041bc <memchr>
 8003cfe:	9a04      	ldr	r2, [sp, #16]
 8003d00:	b9d8      	cbnz	r0, 8003d3a <_svfiprintf_r+0xea>
 8003d02:	06d0      	lsls	r0, r2, #27
 8003d04:	bf44      	itt	mi
 8003d06:	2320      	movmi	r3, #32
 8003d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d0c:	0711      	lsls	r1, r2, #28
 8003d0e:	bf44      	itt	mi
 8003d10:	232b      	movmi	r3, #43	@ 0x2b
 8003d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d16:	f89a 3000 	ldrb.w	r3, [sl]
 8003d1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d1c:	d015      	beq.n	8003d4a <_svfiprintf_r+0xfa>
 8003d1e:	4654      	mov	r4, sl
 8003d20:	2000      	movs	r0, #0
 8003d22:	f04f 0c0a 	mov.w	ip, #10
 8003d26:	9a07      	ldr	r2, [sp, #28]
 8003d28:	4621      	mov	r1, r4
 8003d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d2e:	3b30      	subs	r3, #48	@ 0x30
 8003d30:	2b09      	cmp	r3, #9
 8003d32:	d94b      	bls.n	8003dcc <_svfiprintf_r+0x17c>
 8003d34:	b1b0      	cbz	r0, 8003d64 <_svfiprintf_r+0x114>
 8003d36:	9207      	str	r2, [sp, #28]
 8003d38:	e014      	b.n	8003d64 <_svfiprintf_r+0x114>
 8003d3a:	eba0 0308 	sub.w	r3, r0, r8
 8003d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d42:	4313      	orrs	r3, r2
 8003d44:	46a2      	mov	sl, r4
 8003d46:	9304      	str	r3, [sp, #16]
 8003d48:	e7d2      	b.n	8003cf0 <_svfiprintf_r+0xa0>
 8003d4a:	9b03      	ldr	r3, [sp, #12]
 8003d4c:	1d19      	adds	r1, r3, #4
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	9103      	str	r1, [sp, #12]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfbb      	ittet	lt
 8003d56:	425b      	neglt	r3, r3
 8003d58:	f042 0202 	orrlt.w	r2, r2, #2
 8003d5c:	9307      	strge	r3, [sp, #28]
 8003d5e:	9307      	strlt	r3, [sp, #28]
 8003d60:	bfb8      	it	lt
 8003d62:	9204      	strlt	r2, [sp, #16]
 8003d64:	7823      	ldrb	r3, [r4, #0]
 8003d66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d68:	d10a      	bne.n	8003d80 <_svfiprintf_r+0x130>
 8003d6a:	7863      	ldrb	r3, [r4, #1]
 8003d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d6e:	d132      	bne.n	8003dd6 <_svfiprintf_r+0x186>
 8003d70:	9b03      	ldr	r3, [sp, #12]
 8003d72:	3402      	adds	r4, #2
 8003d74:	1d1a      	adds	r2, r3, #4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	9203      	str	r2, [sp, #12]
 8003d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d7e:	9305      	str	r3, [sp, #20]
 8003d80:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003e38 <_svfiprintf_r+0x1e8>
 8003d84:	2203      	movs	r2, #3
 8003d86:	4650      	mov	r0, sl
 8003d88:	7821      	ldrb	r1, [r4, #0]
 8003d8a:	f000 fa17 	bl	80041bc <memchr>
 8003d8e:	b138      	cbz	r0, 8003da0 <_svfiprintf_r+0x150>
 8003d90:	2240      	movs	r2, #64	@ 0x40
 8003d92:	9b04      	ldr	r3, [sp, #16]
 8003d94:	eba0 000a 	sub.w	r0, r0, sl
 8003d98:	4082      	lsls	r2, r0
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	3401      	adds	r4, #1
 8003d9e:	9304      	str	r3, [sp, #16]
 8003da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da4:	2206      	movs	r2, #6
 8003da6:	4825      	ldr	r0, [pc, #148]	@ (8003e3c <_svfiprintf_r+0x1ec>)
 8003da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dac:	f000 fa06 	bl	80041bc <memchr>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d036      	beq.n	8003e22 <_svfiprintf_r+0x1d2>
 8003db4:	4b22      	ldr	r3, [pc, #136]	@ (8003e40 <_svfiprintf_r+0x1f0>)
 8003db6:	bb1b      	cbnz	r3, 8003e00 <_svfiprintf_r+0x1b0>
 8003db8:	9b03      	ldr	r3, [sp, #12]
 8003dba:	3307      	adds	r3, #7
 8003dbc:	f023 0307 	bic.w	r3, r3, #7
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	9303      	str	r3, [sp, #12]
 8003dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dc6:	4433      	add	r3, r6
 8003dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dca:	e76a      	b.n	8003ca2 <_svfiprintf_r+0x52>
 8003dcc:	460c      	mov	r4, r1
 8003dce:	2001      	movs	r0, #1
 8003dd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dd4:	e7a8      	b.n	8003d28 <_svfiprintf_r+0xd8>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f04f 0c0a 	mov.w	ip, #10
 8003ddc:	4619      	mov	r1, r3
 8003dde:	3401      	adds	r4, #1
 8003de0:	9305      	str	r3, [sp, #20]
 8003de2:	4620      	mov	r0, r4
 8003de4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003de8:	3a30      	subs	r2, #48	@ 0x30
 8003dea:	2a09      	cmp	r2, #9
 8003dec:	d903      	bls.n	8003df6 <_svfiprintf_r+0x1a6>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0c6      	beq.n	8003d80 <_svfiprintf_r+0x130>
 8003df2:	9105      	str	r1, [sp, #20]
 8003df4:	e7c4      	b.n	8003d80 <_svfiprintf_r+0x130>
 8003df6:	4604      	mov	r4, r0
 8003df8:	2301      	movs	r3, #1
 8003dfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dfe:	e7f0      	b.n	8003de2 <_svfiprintf_r+0x192>
 8003e00:	ab03      	add	r3, sp, #12
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	462a      	mov	r2, r5
 8003e06:	4638      	mov	r0, r7
 8003e08:	4b0e      	ldr	r3, [pc, #56]	@ (8003e44 <_svfiprintf_r+0x1f4>)
 8003e0a:	a904      	add	r1, sp, #16
 8003e0c:	f3af 8000 	nop.w
 8003e10:	1c42      	adds	r2, r0, #1
 8003e12:	4606      	mov	r6, r0
 8003e14:	d1d6      	bne.n	8003dc4 <_svfiprintf_r+0x174>
 8003e16:	89ab      	ldrh	r3, [r5, #12]
 8003e18:	065b      	lsls	r3, r3, #25
 8003e1a:	f53f af2d 	bmi.w	8003c78 <_svfiprintf_r+0x28>
 8003e1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e20:	e72c      	b.n	8003c7c <_svfiprintf_r+0x2c>
 8003e22:	ab03      	add	r3, sp, #12
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	462a      	mov	r2, r5
 8003e28:	4638      	mov	r0, r7
 8003e2a:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <_svfiprintf_r+0x1f4>)
 8003e2c:	a904      	add	r1, sp, #16
 8003e2e:	f000 f87d 	bl	8003f2c <_printf_i>
 8003e32:	e7ed      	b.n	8003e10 <_svfiprintf_r+0x1c0>
 8003e34:	08004882 	.word	0x08004882
 8003e38:	08004888 	.word	0x08004888
 8003e3c:	0800488c 	.word	0x0800488c
 8003e40:	00000000 	.word	0x00000000
 8003e44:	08003b99 	.word	0x08003b99

08003e48 <_printf_common>:
 8003e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	4698      	mov	r8, r3
 8003e50:	688a      	ldr	r2, [r1, #8]
 8003e52:	690b      	ldr	r3, [r1, #16]
 8003e54:	4607      	mov	r7, r0
 8003e56:	4293      	cmp	r3, r2
 8003e58:	bfb8      	it	lt
 8003e5a:	4613      	movlt	r3, r2
 8003e5c:	6033      	str	r3, [r6, #0]
 8003e5e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e62:	460c      	mov	r4, r1
 8003e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e68:	b10a      	cbz	r2, 8003e6e <_printf_common+0x26>
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	6033      	str	r3, [r6, #0]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	0699      	lsls	r1, r3, #26
 8003e72:	bf42      	ittt	mi
 8003e74:	6833      	ldrmi	r3, [r6, #0]
 8003e76:	3302      	addmi	r3, #2
 8003e78:	6033      	strmi	r3, [r6, #0]
 8003e7a:	6825      	ldr	r5, [r4, #0]
 8003e7c:	f015 0506 	ands.w	r5, r5, #6
 8003e80:	d106      	bne.n	8003e90 <_printf_common+0x48>
 8003e82:	f104 0a19 	add.w	sl, r4, #25
 8003e86:	68e3      	ldr	r3, [r4, #12]
 8003e88:	6832      	ldr	r2, [r6, #0]
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	42ab      	cmp	r3, r5
 8003e8e:	dc2b      	bgt.n	8003ee8 <_printf_common+0xa0>
 8003e90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e94:	6822      	ldr	r2, [r4, #0]
 8003e96:	3b00      	subs	r3, #0
 8003e98:	bf18      	it	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	0692      	lsls	r2, r2, #26
 8003e9e:	d430      	bmi.n	8003f02 <_printf_common+0xba>
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ea8:	47c8      	blx	r9
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d023      	beq.n	8003ef6 <_printf_common+0xae>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	6922      	ldr	r2, [r4, #16]
 8003eb2:	f003 0306 	and.w	r3, r3, #6
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf14      	ite	ne
 8003eba:	2500      	movne	r5, #0
 8003ebc:	6833      	ldreq	r3, [r6, #0]
 8003ebe:	f04f 0600 	mov.w	r6, #0
 8003ec2:	bf08      	it	eq
 8003ec4:	68e5      	ldreq	r5, [r4, #12]
 8003ec6:	f104 041a 	add.w	r4, r4, #26
 8003eca:	bf08      	it	eq
 8003ecc:	1aed      	subeq	r5, r5, r3
 8003ece:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ed2:	bf08      	it	eq
 8003ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bfc4      	itt	gt
 8003edc:	1a9b      	subgt	r3, r3, r2
 8003ede:	18ed      	addgt	r5, r5, r3
 8003ee0:	42b5      	cmp	r5, r6
 8003ee2:	d11a      	bne.n	8003f1a <_printf_common+0xd2>
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	e008      	b.n	8003efa <_printf_common+0xb2>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	4652      	mov	r2, sl
 8003eec:	4641      	mov	r1, r8
 8003eee:	4638      	mov	r0, r7
 8003ef0:	47c8      	blx	r9
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d103      	bne.n	8003efe <_printf_common+0xb6>
 8003ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8003efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003efe:	3501      	adds	r5, #1
 8003f00:	e7c1      	b.n	8003e86 <_printf_common+0x3e>
 8003f02:	2030      	movs	r0, #48	@ 0x30
 8003f04:	18e1      	adds	r1, r4, r3
 8003f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f10:	4422      	add	r2, r4
 8003f12:	3302      	adds	r3, #2
 8003f14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f18:	e7c2      	b.n	8003ea0 <_printf_common+0x58>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	4641      	mov	r1, r8
 8003f20:	4638      	mov	r0, r7
 8003f22:	47c8      	blx	r9
 8003f24:	3001      	adds	r0, #1
 8003f26:	d0e6      	beq.n	8003ef6 <_printf_common+0xae>
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7d9      	b.n	8003ee0 <_printf_common+0x98>

08003f2c <_printf_i>:
 8003f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f30:	7e0f      	ldrb	r7, [r1, #24]
 8003f32:	4691      	mov	r9, r2
 8003f34:	2f78      	cmp	r7, #120	@ 0x78
 8003f36:	4680      	mov	r8, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	469a      	mov	sl, r3
 8003f3c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f42:	d807      	bhi.n	8003f54 <_printf_i+0x28>
 8003f44:	2f62      	cmp	r7, #98	@ 0x62
 8003f46:	d80a      	bhi.n	8003f5e <_printf_i+0x32>
 8003f48:	2f00      	cmp	r7, #0
 8003f4a:	f000 80d1 	beq.w	80040f0 <_printf_i+0x1c4>
 8003f4e:	2f58      	cmp	r7, #88	@ 0x58
 8003f50:	f000 80b8 	beq.w	80040c4 <_printf_i+0x198>
 8003f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f5c:	e03a      	b.n	8003fd4 <_printf_i+0xa8>
 8003f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f62:	2b15      	cmp	r3, #21
 8003f64:	d8f6      	bhi.n	8003f54 <_printf_i+0x28>
 8003f66:	a101      	add	r1, pc, #4	@ (adr r1, 8003f6c <_printf_i+0x40>)
 8003f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f6c:	08003fc5 	.word	0x08003fc5
 8003f70:	08003fd9 	.word	0x08003fd9
 8003f74:	08003f55 	.word	0x08003f55
 8003f78:	08003f55 	.word	0x08003f55
 8003f7c:	08003f55 	.word	0x08003f55
 8003f80:	08003f55 	.word	0x08003f55
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	08003f55 	.word	0x08003f55
 8003f8c:	08003f55 	.word	0x08003f55
 8003f90:	08003f55 	.word	0x08003f55
 8003f94:	08003f55 	.word	0x08003f55
 8003f98:	080040d7 	.word	0x080040d7
 8003f9c:	08004003 	.word	0x08004003
 8003fa0:	08004091 	.word	0x08004091
 8003fa4:	08003f55 	.word	0x08003f55
 8003fa8:	08003f55 	.word	0x08003f55
 8003fac:	080040f9 	.word	0x080040f9
 8003fb0:	08003f55 	.word	0x08003f55
 8003fb4:	08004003 	.word	0x08004003
 8003fb8:	08003f55 	.word	0x08003f55
 8003fbc:	08003f55 	.word	0x08003f55
 8003fc0:	08004099 	.word	0x08004099
 8003fc4:	6833      	ldr	r3, [r6, #0]
 8003fc6:	1d1a      	adds	r2, r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6032      	str	r2, [r6, #0]
 8003fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e09c      	b.n	8004112 <_printf_i+0x1e6>
 8003fd8:	6833      	ldr	r3, [r6, #0]
 8003fda:	6820      	ldr	r0, [r4, #0]
 8003fdc:	1d19      	adds	r1, r3, #4
 8003fde:	6031      	str	r1, [r6, #0]
 8003fe0:	0606      	lsls	r6, r0, #24
 8003fe2:	d501      	bpl.n	8003fe8 <_printf_i+0xbc>
 8003fe4:	681d      	ldr	r5, [r3, #0]
 8003fe6:	e003      	b.n	8003ff0 <_printf_i+0xc4>
 8003fe8:	0645      	lsls	r5, r0, #25
 8003fea:	d5fb      	bpl.n	8003fe4 <_printf_i+0xb8>
 8003fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ff0:	2d00      	cmp	r5, #0
 8003ff2:	da03      	bge.n	8003ffc <_printf_i+0xd0>
 8003ff4:	232d      	movs	r3, #45	@ 0x2d
 8003ff6:	426d      	negs	r5, r5
 8003ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ffc:	230a      	movs	r3, #10
 8003ffe:	4858      	ldr	r0, [pc, #352]	@ (8004160 <_printf_i+0x234>)
 8004000:	e011      	b.n	8004026 <_printf_i+0xfa>
 8004002:	6821      	ldr	r1, [r4, #0]
 8004004:	6833      	ldr	r3, [r6, #0]
 8004006:	0608      	lsls	r0, r1, #24
 8004008:	f853 5b04 	ldr.w	r5, [r3], #4
 800400c:	d402      	bmi.n	8004014 <_printf_i+0xe8>
 800400e:	0649      	lsls	r1, r1, #25
 8004010:	bf48      	it	mi
 8004012:	b2ad      	uxthmi	r5, r5
 8004014:	2f6f      	cmp	r7, #111	@ 0x6f
 8004016:	6033      	str	r3, [r6, #0]
 8004018:	bf14      	ite	ne
 800401a:	230a      	movne	r3, #10
 800401c:	2308      	moveq	r3, #8
 800401e:	4850      	ldr	r0, [pc, #320]	@ (8004160 <_printf_i+0x234>)
 8004020:	2100      	movs	r1, #0
 8004022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004026:	6866      	ldr	r6, [r4, #4]
 8004028:	2e00      	cmp	r6, #0
 800402a:	60a6      	str	r6, [r4, #8]
 800402c:	db05      	blt.n	800403a <_printf_i+0x10e>
 800402e:	6821      	ldr	r1, [r4, #0]
 8004030:	432e      	orrs	r6, r5
 8004032:	f021 0104 	bic.w	r1, r1, #4
 8004036:	6021      	str	r1, [r4, #0]
 8004038:	d04b      	beq.n	80040d2 <_printf_i+0x1a6>
 800403a:	4616      	mov	r6, r2
 800403c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004040:	fb03 5711 	mls	r7, r3, r1, r5
 8004044:	5dc7      	ldrb	r7, [r0, r7]
 8004046:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800404a:	462f      	mov	r7, r5
 800404c:	42bb      	cmp	r3, r7
 800404e:	460d      	mov	r5, r1
 8004050:	d9f4      	bls.n	800403c <_printf_i+0x110>
 8004052:	2b08      	cmp	r3, #8
 8004054:	d10b      	bne.n	800406e <_printf_i+0x142>
 8004056:	6823      	ldr	r3, [r4, #0]
 8004058:	07df      	lsls	r7, r3, #31
 800405a:	d508      	bpl.n	800406e <_printf_i+0x142>
 800405c:	6923      	ldr	r3, [r4, #16]
 800405e:	6861      	ldr	r1, [r4, #4]
 8004060:	4299      	cmp	r1, r3
 8004062:	bfde      	ittt	le
 8004064:	2330      	movle	r3, #48	@ 0x30
 8004066:	f806 3c01 	strble.w	r3, [r6, #-1]
 800406a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800406e:	1b92      	subs	r2, r2, r6
 8004070:	6122      	str	r2, [r4, #16]
 8004072:	464b      	mov	r3, r9
 8004074:	4621      	mov	r1, r4
 8004076:	4640      	mov	r0, r8
 8004078:	f8cd a000 	str.w	sl, [sp]
 800407c:	aa03      	add	r2, sp, #12
 800407e:	f7ff fee3 	bl	8003e48 <_printf_common>
 8004082:	3001      	adds	r0, #1
 8004084:	d14a      	bne.n	800411c <_printf_i+0x1f0>
 8004086:	f04f 30ff 	mov.w	r0, #4294967295
 800408a:	b004      	add	sp, #16
 800408c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	f043 0320 	orr.w	r3, r3, #32
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	2778      	movs	r7, #120	@ 0x78
 800409a:	4832      	ldr	r0, [pc, #200]	@ (8004164 <_printf_i+0x238>)
 800409c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	6831      	ldr	r1, [r6, #0]
 80040a4:	061f      	lsls	r7, r3, #24
 80040a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80040aa:	d402      	bmi.n	80040b2 <_printf_i+0x186>
 80040ac:	065f      	lsls	r7, r3, #25
 80040ae:	bf48      	it	mi
 80040b0:	b2ad      	uxthmi	r5, r5
 80040b2:	6031      	str	r1, [r6, #0]
 80040b4:	07d9      	lsls	r1, r3, #31
 80040b6:	bf44      	itt	mi
 80040b8:	f043 0320 	orrmi.w	r3, r3, #32
 80040bc:	6023      	strmi	r3, [r4, #0]
 80040be:	b11d      	cbz	r5, 80040c8 <_printf_i+0x19c>
 80040c0:	2310      	movs	r3, #16
 80040c2:	e7ad      	b.n	8004020 <_printf_i+0xf4>
 80040c4:	4826      	ldr	r0, [pc, #152]	@ (8004160 <_printf_i+0x234>)
 80040c6:	e7e9      	b.n	800409c <_printf_i+0x170>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	f023 0320 	bic.w	r3, r3, #32
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	e7f6      	b.n	80040c0 <_printf_i+0x194>
 80040d2:	4616      	mov	r6, r2
 80040d4:	e7bd      	b.n	8004052 <_printf_i+0x126>
 80040d6:	6833      	ldr	r3, [r6, #0]
 80040d8:	6825      	ldr	r5, [r4, #0]
 80040da:	1d18      	adds	r0, r3, #4
 80040dc:	6961      	ldr	r1, [r4, #20]
 80040de:	6030      	str	r0, [r6, #0]
 80040e0:	062e      	lsls	r6, r5, #24
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	d501      	bpl.n	80040ea <_printf_i+0x1be>
 80040e6:	6019      	str	r1, [r3, #0]
 80040e8:	e002      	b.n	80040f0 <_printf_i+0x1c4>
 80040ea:	0668      	lsls	r0, r5, #25
 80040ec:	d5fb      	bpl.n	80040e6 <_printf_i+0x1ba>
 80040ee:	8019      	strh	r1, [r3, #0]
 80040f0:	2300      	movs	r3, #0
 80040f2:	4616      	mov	r6, r2
 80040f4:	6123      	str	r3, [r4, #16]
 80040f6:	e7bc      	b.n	8004072 <_printf_i+0x146>
 80040f8:	6833      	ldr	r3, [r6, #0]
 80040fa:	2100      	movs	r1, #0
 80040fc:	1d1a      	adds	r2, r3, #4
 80040fe:	6032      	str	r2, [r6, #0]
 8004100:	681e      	ldr	r6, [r3, #0]
 8004102:	6862      	ldr	r2, [r4, #4]
 8004104:	4630      	mov	r0, r6
 8004106:	f000 f859 	bl	80041bc <memchr>
 800410a:	b108      	cbz	r0, 8004110 <_printf_i+0x1e4>
 800410c:	1b80      	subs	r0, r0, r6
 800410e:	6060      	str	r0, [r4, #4]
 8004110:	6863      	ldr	r3, [r4, #4]
 8004112:	6123      	str	r3, [r4, #16]
 8004114:	2300      	movs	r3, #0
 8004116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800411a:	e7aa      	b.n	8004072 <_printf_i+0x146>
 800411c:	4632      	mov	r2, r6
 800411e:	4649      	mov	r1, r9
 8004120:	4640      	mov	r0, r8
 8004122:	6923      	ldr	r3, [r4, #16]
 8004124:	47d0      	blx	sl
 8004126:	3001      	adds	r0, #1
 8004128:	d0ad      	beq.n	8004086 <_printf_i+0x15a>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	079b      	lsls	r3, r3, #30
 800412e:	d413      	bmi.n	8004158 <_printf_i+0x22c>
 8004130:	68e0      	ldr	r0, [r4, #12]
 8004132:	9b03      	ldr	r3, [sp, #12]
 8004134:	4298      	cmp	r0, r3
 8004136:	bfb8      	it	lt
 8004138:	4618      	movlt	r0, r3
 800413a:	e7a6      	b.n	800408a <_printf_i+0x15e>
 800413c:	2301      	movs	r3, #1
 800413e:	4632      	mov	r2, r6
 8004140:	4649      	mov	r1, r9
 8004142:	4640      	mov	r0, r8
 8004144:	47d0      	blx	sl
 8004146:	3001      	adds	r0, #1
 8004148:	d09d      	beq.n	8004086 <_printf_i+0x15a>
 800414a:	3501      	adds	r5, #1
 800414c:	68e3      	ldr	r3, [r4, #12]
 800414e:	9903      	ldr	r1, [sp, #12]
 8004150:	1a5b      	subs	r3, r3, r1
 8004152:	42ab      	cmp	r3, r5
 8004154:	dcf2      	bgt.n	800413c <_printf_i+0x210>
 8004156:	e7eb      	b.n	8004130 <_printf_i+0x204>
 8004158:	2500      	movs	r5, #0
 800415a:	f104 0619 	add.w	r6, r4, #25
 800415e:	e7f5      	b.n	800414c <_printf_i+0x220>
 8004160:	08004893 	.word	0x08004893
 8004164:	080048a4 	.word	0x080048a4

08004168 <memmove>:
 8004168:	4288      	cmp	r0, r1
 800416a:	b510      	push	{r4, lr}
 800416c:	eb01 0402 	add.w	r4, r1, r2
 8004170:	d902      	bls.n	8004178 <memmove+0x10>
 8004172:	4284      	cmp	r4, r0
 8004174:	4623      	mov	r3, r4
 8004176:	d807      	bhi.n	8004188 <memmove+0x20>
 8004178:	1e43      	subs	r3, r0, #1
 800417a:	42a1      	cmp	r1, r4
 800417c:	d008      	beq.n	8004190 <memmove+0x28>
 800417e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004182:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004186:	e7f8      	b.n	800417a <memmove+0x12>
 8004188:	4601      	mov	r1, r0
 800418a:	4402      	add	r2, r0
 800418c:	428a      	cmp	r2, r1
 800418e:	d100      	bne.n	8004192 <memmove+0x2a>
 8004190:	bd10      	pop	{r4, pc}
 8004192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800419a:	e7f7      	b.n	800418c <memmove+0x24>

0800419c <_sbrk_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	2300      	movs	r3, #0
 80041a0:	4d05      	ldr	r5, [pc, #20]	@ (80041b8 <_sbrk_r+0x1c>)
 80041a2:	4604      	mov	r4, r0
 80041a4:	4608      	mov	r0, r1
 80041a6:	602b      	str	r3, [r5, #0]
 80041a8:	f7fd fc9e 	bl	8001ae8 <_sbrk>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d102      	bne.n	80041b6 <_sbrk_r+0x1a>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	b103      	cbz	r3, 80041b6 <_sbrk_r+0x1a>
 80041b4:	6023      	str	r3, [r4, #0]
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	2000043c 	.word	0x2000043c

080041bc <memchr>:
 80041bc:	4603      	mov	r3, r0
 80041be:	b510      	push	{r4, lr}
 80041c0:	b2c9      	uxtb	r1, r1
 80041c2:	4402      	add	r2, r0
 80041c4:	4293      	cmp	r3, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	d101      	bne.n	80041ce <memchr+0x12>
 80041ca:	2000      	movs	r0, #0
 80041cc:	e003      	b.n	80041d6 <memchr+0x1a>
 80041ce:	7804      	ldrb	r4, [r0, #0]
 80041d0:	3301      	adds	r3, #1
 80041d2:	428c      	cmp	r4, r1
 80041d4:	d1f6      	bne.n	80041c4 <memchr+0x8>
 80041d6:	bd10      	pop	{r4, pc}

080041d8 <memcpy>:
 80041d8:	440a      	add	r2, r1
 80041da:	4291      	cmp	r1, r2
 80041dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80041e0:	d100      	bne.n	80041e4 <memcpy+0xc>
 80041e2:	4770      	bx	lr
 80041e4:	b510      	push	{r4, lr}
 80041e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ea:	4291      	cmp	r1, r2
 80041ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041f0:	d1f9      	bne.n	80041e6 <memcpy+0xe>
 80041f2:	bd10      	pop	{r4, pc}

080041f4 <_realloc_r>:
 80041f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041f8:	4607      	mov	r7, r0
 80041fa:	4614      	mov	r4, r2
 80041fc:	460d      	mov	r5, r1
 80041fe:	b921      	cbnz	r1, 800420a <_realloc_r+0x16>
 8004200:	4611      	mov	r1, r2
 8004202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004206:	f7ff bc3b 	b.w	8003a80 <_malloc_r>
 800420a:	b92a      	cbnz	r2, 8004218 <_realloc_r+0x24>
 800420c:	f7ff fbce 	bl	80039ac <_free_r>
 8004210:	4625      	mov	r5, r4
 8004212:	4628      	mov	r0, r5
 8004214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004218:	f000 f81a 	bl	8004250 <_malloc_usable_size_r>
 800421c:	4284      	cmp	r4, r0
 800421e:	4606      	mov	r6, r0
 8004220:	d802      	bhi.n	8004228 <_realloc_r+0x34>
 8004222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004226:	d8f4      	bhi.n	8004212 <_realloc_r+0x1e>
 8004228:	4621      	mov	r1, r4
 800422a:	4638      	mov	r0, r7
 800422c:	f7ff fc28 	bl	8003a80 <_malloc_r>
 8004230:	4680      	mov	r8, r0
 8004232:	b908      	cbnz	r0, 8004238 <_realloc_r+0x44>
 8004234:	4645      	mov	r5, r8
 8004236:	e7ec      	b.n	8004212 <_realloc_r+0x1e>
 8004238:	42b4      	cmp	r4, r6
 800423a:	4622      	mov	r2, r4
 800423c:	4629      	mov	r1, r5
 800423e:	bf28      	it	cs
 8004240:	4632      	movcs	r2, r6
 8004242:	f7ff ffc9 	bl	80041d8 <memcpy>
 8004246:	4629      	mov	r1, r5
 8004248:	4638      	mov	r0, r7
 800424a:	f7ff fbaf 	bl	80039ac <_free_r>
 800424e:	e7f1      	b.n	8004234 <_realloc_r+0x40>

08004250 <_malloc_usable_size_r>:
 8004250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004254:	1f18      	subs	r0, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	bfbc      	itt	lt
 800425a:	580b      	ldrlt	r3, [r1, r0]
 800425c:	18c0      	addlt	r0, r0, r3
 800425e:	4770      	bx	lr

08004260 <_init>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr

0800426c <_fini>:
 800426c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800426e:	bf00      	nop
 8004270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004272:	bc08      	pop	{r3}
 8004274:	469e      	mov	lr, r3
 8004276:	4770      	bx	lr
